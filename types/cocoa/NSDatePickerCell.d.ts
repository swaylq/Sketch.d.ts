/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface NSDatePickerCell<T = any> extends cocoa.NSActionCell {
    cxx_destruct<R = void>(): R;
    cellSize<R = cocoa.CGSize>(): R;
    setObjectValue<R = void, P0 = unknown>(_setObjectValue: P0): R;
    setFont<R = void, P0 = unknown>(_setFont: P0): R;
    setEnabled<R = void, P0 = boolean>(_setEnabled: P0): R;
    _setWrapsDateComponentArithmetic<R = void, P0 = boolean>(__setWrapsDateComponentArithmetic: P0): R;
    _wrapsDateComponentArithmetic<R = boolean>(): R;
    _setForcesLeadingZeroes<R = void, P0 = boolean>(__setForcesLeadingZeroes: P0): R;
    _forcesLeadingZeroes<R = boolean>(): R;
    _setDisabledTextColor<R = void, P0 = unknown>(__setDisabledTextColor: P0): R;
    _disabledTextColor<R = unknown>(): R;
    _constrainDateValue_timeInterval<R = unknown, P0 = unknown, P1 = number>(__constrainDateValue: P0, _timeInterval: P1): R;
    _finishPendingEdit<R = void>(): R;
    _constrainAndSetDateValue_timeInterval_sendActionIfChanged_beepIfNoChange_returnCalendarToHomeMonth_preserveFractionalSeconds<R = boolean, P0 = unknown, P1 = number, P2 = boolean, P3 = boolean, P4 = boolean, P5 = boolean>(__constrainAndSetDateValue: P0, _timeInterval: P1, _sendActionIfChanged: P2, _beepIfNoChange: P3, _returnCalendarToHomeMonth: P4, _preserveFractionalSeconds: P5): R;
    _toggleAMPM<R = void>(): R;
    _adjustDatePickerElement_by_returnCalendarToHomeMonth<R = void, P0 = number, P1 = number, P2 = boolean>(__adjustDatePickerElement: P0, _by: P1, _returnCalendarToHomeMonth: P2): R;
    _digitForLocalizedDigitCharacter<R = number, P0 = number>(__digitForLocalizedDigitCharacter: P0): R;
    _rangeOfDaysForMonth_year<R = cocoa._NSRange, P0 = number, P1 = number>(__rangeOfDaysForMonth: P0, _year: P1): R;
    _localeIsRTL<R = boolean>(): R;
    _effectiveLocale<R = unknown>(): R;
    _effectiveCalendar<R = unknown>(): R;
    _dayOfWeekForDate<R = number, P0 = unknown>(__dayOfWeekForDate: P0): R;
    _dateIsAM<R = boolean, P0 = unknown>(__dateIsAM: P0): R;
    _dateFromComponents<R = unknown, P0 = unknown>(__dateFromComponents: P0): R;
    _componentsOfInterestToDatePickerFromDate<R = unknown, P0 = unknown>(__componentsOfInterestToDatePickerFromDate: P0): R;
    _clampDayToValidRangeInDateComponents<R = void, P0 = unknown>(__clampDayToValidRangeInDateComponents: P0): R;
    _adjustDate_byEras_years_months_days_hours_minutes_seconds<R = unknown, P0 = unknown, P1 = number, P2 = number, P3 = number, P4 = number, P5 = number, P6 = number, P7 = number>(__adjustDate: P0, _byEras: P1, _years: P2, _months: P3, _days: P4, _hours: P5, _minutes: P6, _seconds: P7): R;
    _numberFormatter<R = unknown>(): R;
    _invalidateDateFormatter<R = void>(): R;
    _dateFormatter<R = unknown>(): R;
    _calenderWeekdayHeaderTextColorBasedOnEnabledState<R = unknown>(): R;
    _calenderHeaderTextColorBasedOnEnabledState<R = unknown>(): R;
    _textColorBasedOnEnabledState<R = unknown>(): R;
    _fixUpDatePickerElementFlags<R = boolean>(): R;
    _allocateDatePickerCellExtraIvars<R = boolean>(): R;
    _unregisterForDatePreferencesChanges<R = void>(): R;
    _registerForDatePreferencesChanges<R = void>(): R;
    _datePreferencesDidChange<R = void, P0 = unknown>(__datePreferencesDidChange: P0): R;
    _stepperCellValueChanged<R = void, P0 = unknown>(__stepperCellValueChanged: P0): R;
    _stepperCell<R = unknown>(): R;
    _stepper<R = unknown>(): R;
    _setStepper<R = void, P0 = unknown>(__setStepper: P0): R;
    _selectLastSubfield<R = void>(): R;
    _selectFirstSubfield<R = void>(): R;
    _selectPreviousSubfield<R = void>(): R;
    _selectNextSubfield<R = void>(): R;
    _notifyDelegateIndexOfSelectedSubfieldDidChange<R = void>(): R;
    _setPM<R = void, P0 = boolean>(__setPM: P0): R;
    _insertDigit<R = void, P0 = number>(__insertDigit: P0): R;
    _cancelSubfieldFieldChanges<R = void>(): R;
    _commitSubfieldFieldChanges<R = void>(): R;
    _deleteDigit<R = void>(): R;
    _cancelUserEditTimer<R = void>(): R;
    _resetUserEditTimer<R = void>(): R;
    _userEditExpired<R = void, P0 = unknown>(__userEditExpired: P0): R;
    _incrementSelectedSubfield<R = void>(): R;
    _decrementSelectedSubfield<R = void>(): R;
    _textFieldWithStepperKeyDown_inRect_ofView<R = boolean, P0 = unknown, P1 = cocoa.CGRect, P2 = unknown>(__textFieldWithStepperKeyDown: P0, _inRect: P1, _ofView: P2): R;
    _textFieldWithStepperTrackMouse_inRect_ofView_untilMouseUp<R = boolean, P0 = unknown, P1 = cocoa.CGRect, P2 = unknown, P3 = boolean>(__textFieldWithStepperTrackMouse: P0, _inRect: P1, _ofView: P2, _untilMouseUp: P3): R;
    _indexOfSelectedSubfield<R = number>(): R;
    _subfields<R = unknown>(): R;
    _updateSubfieldStringsForDateChange<R = void>(): R;
    _stringForDatePickerElement_usingDateFormat<R = unknown, P0 = number, P1 = unknown>(__stringForDatePickerElement: P0, _usingDateFormat: P1): R;
    _makeSubfieldsWithHandler<R = void, P0 = cocoa.CDUnknownBlockType>(__makeSubfieldsWithHandler: P0): R;
    _concoctUnholyAbominationOfADateFormatThatMakesAMockeryOfLocalization<R = unknown>(): R;
    _addSubfieldForElement_withDateFormat_referenceStrings<R = void, P0 = number, P1 = unknown, P2 = unknown>(__addSubfieldForElement: P0, _withDateFormat: P1, _referenceStrings: P2): R;
    _addStaticSubfieldWithString<R = void, P0 = unknown>(__addStaticSubfieldWithString: P0): R;
    _addEditableSubfieldForElement_dateFormat<R = void, P0 = number, P1 = unknown>(__addEditableSubfieldForElement: P0, _dateFormat: P1): R;
    _referenceDatesForElement<R = unknown, P0 = number>(__referenceDatesForElement: P0): R;
    _createSubfields<R = void>(): R;
    _subfieldsFrame<R = cocoa.CGRect>(): R;
    _subfieldOffsetForTextAreaFrame<R = number, P0 = cocoa.CGRect>(__subfieldOffsetForTextAreaFrame: P0): R;
    _textFieldCellSize<R = cocoa.CGSize>(): R;
    _textFieldWithStepperCellSize<R = cocoa.CGSize>(): R;
    _indexOfSubfieldAtPoint_inTextAreaFrame<R = number, P0 = cocoa.CGPoint, P1 = cocoa.CGRect>(__indexOfSubfieldAtPoint: P0, _inTextAreaFrame: P1): R;
    _getTextAreaFrame_stepperCellFrame_forDatePickerCellFrame<R = void, P0 = cocoa.CGRect, P1 = cocoa.CGRect, P2 = cocoa.CGRect>(__getTextAreaFrame: P0, _stepperCellFrame: P1, _forDatePickerCellFrame: P2): R;
    _stepperCellTopAndBottomTrim<R = number>(): R;
    _desiredTextAreaSize<R = cocoa.CGSize>(): R;
    _textFieldAlignment<R = number>(): R;
    _stepperIsRTL<R = boolean>(): R;
    _shouldShowFocusRingInView<R = boolean, P0 = unknown>(__shouldShowFocusRingInView: P0): R;
    _hasFocusRingInView<R = boolean, P0 = unknown>(__hasFocusRingInView: P0): R;
    _drawTextFieldWithStepperWithFrame_inView<R = void, P0 = cocoa.CGRect, P1 = unknown>(__drawTextFieldWithStepperWithFrame: P0, _inView: P1): R;
    _drawThemeBezelWithFrame_inView<R = void, P0 = cocoa.CGRect, P1 = unknown>(__drawThemeBezelWithFrame: P0, _inView: P1): R;
    _contentInsetsForThemeBezelWithFrame_inView<R = cocoa.NSEdgeInsets, P0 = cocoa.CGRect, P1 = unknown>(__contentInsetsForThemeBezelWithFrame: P0, _inView: P1): R;
    _alignmentRectInsetsForThemeBezelWithFrame_inView<R = cocoa.NSEdgeInsets, P0 = cocoa.CGRect, P1 = unknown>(__alignmentRectInsetsForThemeBezelWithFrame: P0, _inView: P1): R;
    _coreUIDrawOptionsForThemeBezelWithFrame_inView<R = unknown, P0 = cocoa.CGRect, P1 = unknown>(__coreUIDrawOptionsForThemeBezelWithFrame: P0, _inView: P1): R;
    _hitTestTextFieldWithStepper_inRect_ofView<R = number, P0 = unknown, P1 = cocoa.CGRect, P2 = unknown>(__hitTestTextFieldWithStepper: P0, _inRect: P1, _ofView: P2): R;
    _clockAndCalendarTakeDisplayedMonthFromTodaysDate<R = void>(): R;
    _clockAndCalendarTakeDisplayedMonthFromDateValue<R = void>(): R;
    _clockAndCalendarReturnToHomeMonth<R = void, P0 = unknown>(__clockAndCalendarReturnToHomeMonth: P0): R;
    _clockAndCalendarRightArrowClicked<R = void, P0 = unknown>(__clockAndCalendarRightArrowClicked: P0): R;
    _clockAndCalendarLeftArrowClicked<R = void, P0 = unknown>(__clockAndCalendarLeftArrowClicked: P0): R;
    _clockAndCalendarAdvanceMonth<R = void>(): R;
    _clockAndCalendarRetreatMonth<R = void>(): R;
    _clockAndCalendarIsTargetMonthLeapMonth_offset<R = boolean, P0 = unknown, P1 = number>(__clockAndCalendarIsTargetMonthLeapMonth: P0, _offset: P1): R;
    _clockAndCalendarReturnToHomeMonthButtonCell<R = unknown>(): R;
    _clockAndCalendarAdvanceMonthCell<R = unknown>(): R;
    _clockAndCalendarRetreatMonthCell<R = unknown>(): R;
    _clockAndCalendarKeyDown_inRect_ofView<R = boolean, P0 = unknown, P1 = cocoa.CGRect, P2 = unknown>(__clockAndCalendarKeyDown: P0, _inRect: P1, _ofView: P2): R;
    _autoAdvanceCalendar<R = void, P0 = unknown>(__autoAdvanceCalendar: P0): R;
    _clockAndCalendarStopTracking_at_inView_mouseIsUp<R = void, P0 = cocoa.CGPoint, P1 = cocoa.CGPoint, P2 = unknown, P3 = boolean>(__clockAndCalendarStopTracking: P0, _at: P1, _inView: P2, _mouseIsUp: P3): R;
    _clockAndCalendarContinueTracking_at_inView<R = boolean, P0 = cocoa.CGPoint, P1 = cocoa.CGPoint, P2 = unknown>(__clockAndCalendarContinueTracking: P0, _at: P1, _inView: P2): R;
    _clockAndCalendarStartTrackingAt_inView<R = boolean, P0 = cocoa.CGPoint, P1 = unknown>(__clockAndCalendarStartTrackingAt: P0, _inView: P1): R;
    _calendarDateComponentsForPoint_inCalendarRect<R = unknown, P0 = cocoa.CGPoint, P1 = cocoa.CGRect>(__calendarDateComponentsForPoint: P0, _inCalendarRect: P1): R;
    _clockAndCalendarTrackMouse_inRect_ofView_untilMouseUp<R = boolean, P0 = unknown, P1 = cocoa.CGRect, P2 = unknown, P3 = boolean>(__clockAndCalendarTrackMouse: P0, _inRect: P1, _ofView: P2, _untilMouseUp: P3): R;
    _clockAndCalendarGetClockFrame_calendarFrame_retreatMonthCellFrame_advanceMonthCellFrame_returnToHomeMonthButtonCellFrame_forDatePickerCellFrame<R = void, P0 = cocoa.CGRect, P1 = cocoa.CGRect, P2 = cocoa.CGRect, P3 = cocoa.CGRect, P4 = cocoa.CGRect, P5 = cocoa.CGRect>(__clockAndCalendarGetClockFrame: P0, _calendarFrame: P1, _retreatMonthCellFrame: P2, _advanceMonthCellFrame: P3, _returnToHomeMonthButtonCellFrame: P4, _forDatePickerCellFrame: P5): R;
    _calendarDaysFrameForDatePickerCellFrame<R = cocoa.CGRect, P0 = cocoa.CGRect>(__calendarDaysFrameForDatePickerCellFrame: P0): R;
    _clockAndCalendarCellSize<R = cocoa.CGSize>(): R;
    _drawClockAndCalendarWithFrame_inView<R = void, P0 = cocoa.CGRect, P1 = unknown>(__drawClockAndCalendarWithFrame: P0, _inView: P1): R;
    _hitTestClockAndCalendar_inRect_ofView<R = number, P0 = unknown, P1 = cocoa.CGRect, P2 = unknown>(__hitTestClockAndCalendar: P0, _inRect: P1, _ofView: P2): R;
    _clockAndCalendarFillDayCell_withColor_inFrame_inView<R = void, P0 = number, P1 = unknown, P2 = cocoa.CGRect, P3 = unknown>(__clockAndCalendarFillDayCell: P0, _withColor: P1, _inFrame: P2, _inView: P3): R;
    _clockAndCalendarFillDayCellRange_withColor_inFrame_inView<R = void, P0 = cocoa._NSRange, P1 = unknown, P2 = cocoa.CGRect, P3 = unknown>(__clockAndCalendarFillDayCellRange: P0, _withColor: P1, _inFrame: P2, _inView: P3): R;
    _calendarContentAttributedStringWithSelectedDayCells<R = unknown, P0 = cocoa._NSRange>(__calendarContentAttributedStringWithSelectedDayCells: P0): R;
    _calendarIsRTL<R = boolean>(): R;
    _calendarDayNamesStringForFirstWeekday<R = unknown, P0 = number>(__calendarDayNamesStringForFirstWeekday: P0): R;
    _calendarRangeOfSelectedDaysForDisplayedMonthOffset<R = cocoa._NSRange, P0 = number>(__calendarRangeOfSelectedDaysForDisplayedMonthOffset: P0): R;
    _calendarRangeOfAllDaysForDisplayedMonth<R = cocoa._NSRange>(): R;
    _calendarRangeOfAllDaysForDisplayedMonthOffset<R = cocoa._NSRange, P0 = number>(__calendarRangeOfAllDaysForDisplayedMonthOffset: P0): R;
    _calendarFirstWeekday<R = number>(): R;
    _calendarFirstDayOfDisplayedMonthDateComponents<R = unknown>(): R;
    _calendarDateComponentsOfFirstDayOfDisplayedMonthOffset<R = unknown, P0 = number>(__calendarDateComponentsOfFirstDayOfDisplayedMonthOffset: P0): R;
    _analogClockTrackMouse_inRect_ofView_untilMouseUp<R = boolean, P0 = unknown, P1 = cocoa.CGRect, P2 = unknown, P3 = boolean>(__analogClockTrackMouse: P0, _inRect: P1, _ofView: P2, _untilMouseUp: P3): R;
    _drawAnalogClockWithFrame_inView<R = void, P0 = cocoa.CGRect, P1 = unknown>(__drawAnalogClockWithFrame: P0, _inView: P1): R;
    _formatGregorianYearWithDate<R = unknown, P0 = unknown>(__formatGregorianYearWithDate: P0): R;
    _useChineseSetting<R = boolean>(): R;
    accessibilityIsDateTimeComponentsAttributeSettable<R = boolean>(): R;
    accessibilityDateTimeComponentsAttribute<R = unknown>(): R;
    accessibilityIsMaxValueAttributeSettable<R = boolean>(): R;
    accessibilityMaxValueAttribute<R = unknown>(): R;
    accessibilityIsMinValueAttributeSettable<R = boolean>(): R;
    accessibilityMinValueAttribute<R = unknown>(): R;
    delegate<R = cocoa.NSDatePickerCellDelegate>(): R;
    setDelegate<R = void, P0 = cocoa.NSDatePickerCellDelegate>(_v: P0): R;
    maxDate<R = cocoa.NSDate>(): R;
    setMaxDate<R = void, P0 = cocoa.NSDate>(_v: P0): R;
    minDate<R = cocoa.NSDate>(): R;
    setMinDate<R = void, P0 = cocoa.NSDate>(_v: P0): R;
    timeInterval<R = number>(): R;
    setTimeInterval<R = void, P0 = number>(_v: P0): R;
    dateValue<R = cocoa.NSDate>(): R;
    setDateValue<R = void, P0 = cocoa.NSDate>(_v: P0): R;
    timeZone<R = cocoa.NSTimeZone>(): R;
    setTimeZone<R = void, P0 = cocoa.NSTimeZone>(_v: P0): R;
    locale<R = cocoa.NSLocale>(): R;
    setLocale<R = void, P0 = cocoa.NSLocale>(_v: P0): R;
    calendar<R = cocoa.NSCalendar>(): R;
    setCalendar<R = void, P0 = cocoa.NSCalendar>(_v: P0): R;
    datePickerElements<R = number>(): R;
    setDatePickerElements<R = void, P0 = number>(_v: P0): R;
    datePickerMode<R = number>(): R;
    setDatePickerMode<R = void, P0 = number>(_v: P0): R;
    textColor<R = cocoa.NSColor>(): R;
    setTextColor<R = void, P0 = cocoa.NSColor>(_v: P0): R;
    backgroundColor<R = cocoa.NSColor>(): R;
    setBackgroundColor<R = void, P0 = cocoa.NSColor>(_v: P0): R;
    drawsBackground<R = boolean>(): R;
    setDrawsBackground<R = void, P0 = boolean>(_v: P0): R;
    datePickerStyle<R = number>(): R;
    setDatePickerStyle<R = void, P0 = number>(_v: P0): R;
  }
  namespace classes {
    export interface NSDatePickerCell<T = any> extends cocoa.classes.NSActionCell {
      alloc<R = NSDatePickerCell>(): R;
      new: <R = NSDatePickerCell>() => R;
      _sharedDateFormatter<R = unknown>(): R;
      _calendarWeekDayHeaderFont<R = unknown>(): R;
      _calendarHeaderFontSize<R = number>(): R;
      _calendarHeaderFontOfSize<R = unknown, P0 = number>(__calendarHeaderFontOfSize: P0): R;
      _calendarHeaderFont<R = unknown>(): R;
    }
  }
}

declare const NSDatePickerCell: cocoa.classes.NSDatePickerCell;
