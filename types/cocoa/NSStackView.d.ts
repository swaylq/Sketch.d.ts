/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface NSStackView<T = any> extends cocoa.NSView {
    setArrangedSubviews<R = void, P0 = unknown>(_setArrangedSubviews: P0): R;
    insertArrangedSubview_atIndex<R = void, P0 = unknown, P1 = number>(_insertArrangedSubview: P0, _atIndex: P1): R;
    removeArrangedSubview<R = void, P0 = unknown>(_removeArrangedSubview: P0): R;
    addArrangedSubview<R = void, P0 = unknown>(_addArrangedSubview: P0): R;
    rightSpacer<R = unknown>(): R;
    leftSpacer<R = unknown>(): R;
    bottomSpacer<R = unknown>(): R;
    topSpacer<R = unknown>(): R;
    _ib_is19704021Fixed<R = boolean>(): R;
    currentSpacers<R = unknown>(): R;
    currentContainers<R = unknown>(): R;
    endViewsContainer<R = unknown>(): R;
    middleViewsContainer<R = unknown>(): R;
    beginningViewsContainer<R = unknown>(): R;
    observeValueForKeyPath_ofObject_change_context<R = void, P0 = unknown, P1 = unknown, P2 = unknown, P3 = void>(_observeValueForKeyPath: P0, _ofObject: P1, _change: P2, _context: P3): R;
    _stopObservingView<R = void, P0 = unknown>(__stopObservingView: P0): R;
    _startObservingView<R = void, P0 = unknown>(__startObservingView: P0): R;
    _removesDetachedViewsFromSubviews<R = boolean>(): R;
    _checkForDroppedViews<R = void>(): R;
    _hasActiveClippingOfLastView<R = boolean>(): R;
    _deferringDetachAndReattachNotifications<R = void, P0 = cocoa.CDUnknownBlockType>(__deferringDetachAndReattachNotifications: P0): R;
    _didReattachViews<R = void, P0 = unknown>(__didReattachViews: P0): R;
    _willReattachViews<R = void, P0 = unknown>(__willReattachViews: P0): R;
    _didDetachViews<R = void, P0 = unknown>(__didDetachViews: P0): R;
    _willDetachViews<R = void, P0 = unknown>(__willDetachViews: P0): R;
    _reattachViews<R = void, P0 = unknown>(__reattachViews: P0): R;
    _detachViews<R = void, P0 = unknown>(__detachViews: P0): R;
    _gravityForContainer<R = number, P0 = unknown>(__gravityForContainer: P0): R;
    _detachedViewsSortedByPriorityWithoutUnaddableViews<R = unknown>(): R;
    _detachedViewsSortedByPriority<R = unknown>(): R;
    _attachedViewsSortedByPriority<R = unknown>(): R;
    visibilityPriorityForView<R = number, P0 = unknown>(_visibilityPriorityForView: P0): R;
    _valueOfVisibilityPriorityForView<R = unknown, P0 = unknown>(__valueOfVisibilityPriorityForView: P0): R;
    setVisibilityPriority_forView<R = void, P0 = number, P1 = unknown>(_setVisibilityPriority: P0, _forView: P1): R;
    _lastBaselineOffsetFromStackViewBottomForView<R = number, P0 = unknown>(__lastBaselineOffsetFromStackViewBottomForView: P0): R;
    _firstBaselineOffsetFromStackViewTopForView<R = number, P0 = unknown>(__firstBaselineOffsetFromStackViewTopForView: P0): R;
    _invalidateBaselines<R = void>(): R;
    _nsib_shouldAddConstraints<R = boolean>(): R;
    _nsib_setShouldAddConstraints<R = void, P0 = boolean>(__nsib_setShouldAddConstraints: P0): R;
    _needsSecondUpdateConstraintsPassForAutomaticDetaching<R = boolean>(): R;
    _firstAndLastViewsAreFlushToEdges<R = boolean>(): R;
    _effectiveStackingAxisHuggingPriority<R = number>(): R;
    enumerateViewsIncludingDetached_usingBlock<R = void, P0 = boolean, P1 = cocoa.CDUnknownBlockType>(_enumerateViewsIncludingDetached: P0, _usingBlock: P1): R;
    setUserInterfaceLayoutDirection<R = void, P0 = number>(_setUserInterfaceLayoutDirection: P0): R;
    _idealSizeLayoutDimensionCreateIfNecessary<R = unknown>(): R;
    _allAttachedViewsAreCentered<R = boolean>(): R;
    _hasEffectiveGravityAreas<R = boolean>(): R;
    setViews_inGravity<R = void, P0 = unknown, P1 = number>(_setViews: P0, _inGravity: P1): R;
    viewsInGravity<R = unknown, P0 = number>(_viewsInGravity: P0): R;
    isViewDetached<R = boolean, P0 = unknown>(_isViewDetached: P0): R;
    _invalidateCachedDetachedViews<R = void>(): R;
    attachedViews<R = unknown>(): R;
    views<R = unknown>(): R;
    _invalidateCachedViews<R = void>(): R;
    _removeView_animated_removeFromViewHierarchy<R = void, P0 = unknown, P1 = boolean, P2 = boolean>(__removeView: P0, _animated: P1, _removeFromViewHierarchy: P2): R;
    _removeView_animated<R = void, P0 = unknown, P1 = boolean>(__removeView: P0, _animated: P1): R;
    removeView<R = void, P0 = unknown>(_removeView: P0): R;
    _insertView_atIndex_inGravity_animated<R = void, P0 = unknown, P1 = number, P2 = number, P3 = boolean>(__insertView: P0, _atIndex: P1, _inGravity: P2, _animated: P3): R;
    insertView_atIndex_inGravity<R = void, P0 = unknown, P1 = number, P2 = number>(_insertView: P0, _atIndex: P1, _inGravity: P2): R;
    addView_inGravity<R = void, P0 = unknown, P1 = number>(_addView: P0, _inGravity: P1): R;
    trailingOrBottomViewsManager<R = unknown>(): R;
    centerViewsManager<R = unknown>(): R;
    leadingOrTopViewsManager<R = unknown>(): R;
    _gravityContainerContainingView<R = unknown, P0 = unknown>(__gravityContainerContainingView: P0): R;
    effectiveSpacingAfterView<R = number, P0 = unknown>(_effectiveSpacingAfterView: P0): R;
    _valueOfCustomSpacingAfterView<R = unknown, P0 = unknown>(__valueOfCustomSpacingAfterView: P0): R;
    customSpacingAfterView<R = number, P0 = unknown>(_customSpacingAfterView: P0): R;
    setCustomSpacing_afterView<R = void, P0 = number, P1 = unknown>(_setCustomSpacing: P0, _afterView: P1): R;
    _setCustomSpacing_afterView_animated<R = void, P0 = number, P1 = unknown, P2 = boolean>(__setCustomSpacing: P0, _afterView: P1, _animated: P2): R;
    setHasEqualSpacing<R = void, P0 = boolean>(_setHasEqualSpacing: P0): R;
    hasEqualSpacing<R = boolean>(): R;
    _setEdgeInsets_animated<R = void, P0 = cocoa.NSEdgeInsets, P1 = boolean>(__setEdgeInsets: P0, _animated: P1): R;
    _setSpacing_animated<R = void, P0 = number, P1 = boolean>(__setSpacing: P0, _animated: P1): R;
    setTransverseAlignmentPriority<R = void, P0 = number>(_setTransverseAlignmentPriority: P0): R;
    transverseAlignmentPriority<R = number>(): R;
    setSecondaryAlignmentPriority<R = void, P0 = number>(_setSecondaryAlignmentPriority: P0): R;
    secondaryAlignmentPriority<R = number>(): R;
    setAlignmentPriority<R = void, P0 = number>(_setAlignmentPriority: P0): R;
    alignmentPriority<R = number>(): R;
    setTransverseAlignment<R = void, P0 = number>(_setTransverseAlignment: P0): R;
    transverseAlignment<R = number>(): R;
    setPerpendicularAlignment<R = void, P0 = number>(_setPerpendicularAlignment: P0): R;
    perpendicularAlignment<R = number>(): R;
    setSecondaryAlignment<R = void, P0 = number>(_setSecondaryAlignment: P0): R;
    secondaryAlignment<R = number>(): R;
    _explicitlySetUserInterfaceLayoutDirection<R = unknown>(): R;
    setClippingResistancePriority_forOrientation<R = void, P0 = number, P1 = number>(_setClippingResistancePriority: P0, _forOrientation: P1): R;
    clippingResistancePriorityForOrientation<R = number, P0 = number>(_clippingResistancePriorityForOrientation: P0): R;
    setHuggingPriority_forOrientation<R = void, P0 = number, P1 = number>(_setHuggingPriority: P0, _forOrientation: P1): R;
    huggingPriorityForOrientation<R = number, P0 = number>(_huggingPriorityForOrientation: P0): R;
    _isVertical<R = boolean>(): R;
    _delegate<R = unknown>(): R;
    _earlyDecodingOrderPriority<R = number>(): R;
    _addSubviewsAndPreserveAndPreserveAncestorConstraints<R = void, P0 = unknown>(__addSubviewsAndPreserveAndPreserveAncestorConstraints: P0): R;
    _stackViewDecodedWantingFlatHierarchy<R = boolean>(): R;
    _stackViewFinishedDecoding<R = boolean>(): R;
    arrangedSubviews<R = cocoa.NSArray>(): R;
    detachesHiddenViews<R = boolean>(): R;
    setDetachesHiddenViews<R = void, P0 = boolean>(_v: P0): R;
    detachedViews<R = cocoa.NSArray>(): R;
    distribution<R = number>(): R;
    setDistribution<R = void, P0 = number>(_v: P0): R;
    edgeInsets<R = cocoa.NSEdgeInsets>(): R;
    setEdgeInsets<R = void, P0 = cocoa.NSEdgeInsets>(_v: P0): R;
    spacing<R = number>(): R;
    setSpacing<R = void, P0 = number>(_v: P0): R;
    alignment<R = number>(): R;
    setAlignment<R = void, P0 = number>(_v: P0): R;
    orientation<R = number>(): R;
    setOrientation<R = void, P0 = number>(_v: P0): R;
    delegate<R = cocoa.NSStackViewDelegate>(): R;
    setDelegate<R = void, P0 = cocoa.NSStackViewDelegate>(_v: P0): R;
    baselineRelativeArrangement<R = boolean>(): R;
    setBaselineRelativeArrangement<R = void, P0 = boolean>(_v: P0): R;
  }
  namespace classes {
    export interface NSStackView<T = any> extends cocoa.classes.NSView {
      alloc<R = NSStackView>(): R;
      new: <R = NSStackView>() => R;
      keyPathsForValuesAffectingArrangedSubviews<R = unknown>(): R;
      keyPathsForValuesAffectingAlignment<R = unknown>(): R;
      stackViewWithViews<R = unknown, P0 = unknown>(_stackViewWithViews: P0): R;
    }
  }
}

declare const NSStackView: cocoa.classes.NSStackView;
