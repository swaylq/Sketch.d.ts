/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface NSThemeFrame<T = any> extends cocoa.NSTitledFrame, cocoa.NSViewLayerContentScaleDelegateProtocol {
    animationDidStop<R = void, P0 = unknown>(_animationDidStop: P0): R;
    animationDidEnd<R = void, P0 = unknown>(_animationDidEnd: P0): R;
    _animateFromStartingTitleControlState<R = void>(): R;
    _endTitleAnimation<R = void>(): R;
    _updateButtonsBecauseTitleChanged_havingATitleChanged<R = void, P0 = boolean, P1 = boolean>(__updateButtonsBecauseTitleChanged: P0, _havingATitleChanged: P1): R;
    _beginTitleAnimation<R = void>(): R;
    _doLayerBackedTitleAnimations<R = boolean>(): R;
    _setSuppressTitleControlDrawing<R = void, P0 = boolean>(__setSuppressTitleControlDrawing: P0): R;
    _snapshotStartingTitleControlState<R = void>(): R;
    _titleControlRect<R = cocoa.CGRect>(): R;
    _snapshotCurrentTitleControlStateInRect<R = unknown, P0 = cocoa.CGRect>(__snapshotCurrentTitleControlStateInRect: P0): R;
    updateTitleTextField<R = void>(): R;
    _invalidateDocumentIcon<R = void>(): R;
    setRepresentedURL<R = void, P0 = unknown>(_setRepresentedURL: P0): R;
    _shouldShowDocumentIcon<R = boolean>(): R;
    _shouldRepresentFilename<R = boolean>(): R;
    _setDisplayName<R = void, P0 = unknown>(__setDisplayName: P0): R;
    _displayName<R = unknown>(): R;
    handleRightMouseDown<R = boolean, P0 = unknown>(_handleRightMouseDown: P0): R;
    handleMouseDown<R = boolean, P0 = unknown>(_handleMouseDown: P0): R;
    _mouseIsInTitleOrIconArea<R = boolean, P0 = unknown>(__mouseIsInTitleOrIconArea: P0): R;
    _shouldDoClientSideDragWithEvent<R = boolean, P0 = unknown>(__shouldDoClientSideDragWithEvent: P0): R;
    _shouldSendMouseDownToAutosaveButton<R = boolean, P0 = unknown>(__shouldSendMouseDownToAutosaveButton: P0): R;
    allowTitleDrawing<R = void>(): R;
    _renamingDidEndNormally<R = void, P0 = boolean>(__renamingDidEndNormally: P0): R;
    _didEnd_renameWithTitle_editingRange_grantHandler<R = void, P0 = boolean, P1 = unknown, P2 = cocoa._NSRange, P3 = cocoa.CDUnknownBlockType>(__didEnd: P0, _renameWithTitle: P1, _editingRange: P2, _grantHandler: P3): R;
    _willStartRenameWithTitle_editingRange<R = void, P0 = unknown, P1 = cocoa._NSRange>(__willStartRenameWithTitle: P0, _editingRange: P1): R;
    _mouseInTitleRect<R = boolean, P0 = unknown>(__mouseInTitleRect: P0): R;
    _mouseInPopupRect<R = boolean, P0 = unknown>(__mouseInPopupRect: P0): R;
    _inactiveButtonsNeedMask<R = boolean>(): R;
    _hasToolbar<R = boolean>(): R;
    _hidingToolbar<R = boolean>(): R;
    _hidingTitlebar<R = boolean>(): R;
    _hidingTitlebarOrInAnotherWindow<R = boolean>(): R;
    alwaysShowTitlebar<R = boolean>(): R;
    _isFullScreen<R = boolean>(): R;
    _isMiniaturizable<R = boolean>(): R;
    _isClosable<R = boolean>(): R;
    _isResizable<R = boolean>(): R;
    _setSheet<R = void, P0 = boolean>(__setSheet: P0): R;
    _sheetHeightAdjustment<R = number>(): R;
    _resetTitleFont<R = void>(): R;
    _invalidateTitleCellSize<R = void>(): R;
    _texturedMaxXminYResizeRect<R = cocoa.CGRect>(): R;
    _autosaveButtonRevealOverRect<R = cocoa.CGRect>(): R;
    _commandPopupRect<R = cocoa.CGRect>(): R;
    _tileTitlebarAndRedisplay<R = void, P0 = boolean>(__tileTitlebarAndRedisplay: P0): R;
    _updateButtonPositions<R = void>(): R;
    _setButton_frameOrigin<R = void, P0 = unknown, P1 = cocoa.CGPoint>(__setButton: P0, _frameOrigin: P1): R;
    _setToolbarMockView<R = void, P0 = unknown>(__setToolbarMockView: P0): R;
    _toolbarMockView<R = unknown>(): R;
    _autosaveButtonOrigin<R = cocoa.CGPoint>(): R;
    _effectiveAutosaveButtonFrame<R = cocoa.CGRect>(): R;
    _effectiveAutosaveButtonFrameSize<R = cocoa.CGSize>(): R;
    _autosaveButtonSeparatorFieldOrigin<R = cocoa.CGPoint>(): R;
    _lockButtonOrigin<R = cocoa.CGPoint>(): R;
    _toolbarButtonOrigin<R = cocoa.CGPoint>(): R;
    _fullScreenButtonOrigin<R = cocoa.CGPoint>(): R;
    _shouldCenterTrafficLights<R = boolean>(): R;
    _toolbarLeadingSpace<R = number>(): R;
    _toolbarTrailingSpace<R = number>(): R;
    _maxXTitlebarWidgetInset<R = number>(): R;
    _minXTitlebarWidgetInset<R = number>(): R;
    _windowFileButtonSpacingWidth<R = number>(): R;
    sizeOfTitlebarToolbarButton<R = cocoa.CGSize>(): R;
    _adjustPointToTitlebarView<R = cocoa.CGPoint, P0 = cocoa.CGPoint>(__adjustPointToTitlebarView: P0): R;
    _adjustRectToTitlebarView<R = cocoa.CGRect, P0 = cocoa.CGRect>(__adjustRectToTitlebarView: P0): R;
    _defaultTitlebarTitleRect<R = cocoa.CGRect>(): R;
    _shouldFlipTitleStuffForRTL<R = boolean>(): R;
    _titlebarHeight2<R = number>(): R;
    _sideTitlebarWidth<R = number>(): R;
    _minYTitlebarTitleOffset<R = number>(): R;
    _minYTitlebarButtonsOffset<R = number>(): R;
    _size_ofCell_withTitle<R = void, P0 = cocoa.CGSize, P1 = unknown, P2 = unknown>(__size: P0, _ofCell: P1, _withTitle: P2): R;
    _maxYWindowBorderHeight<R = number>(): R;
    _maxXTitlebarDecorationMinWidth<R = number>(): R;
    _minXTitlebarDecorationMinWidth<R = number>(): R;
    _mouseInGroup<R = boolean, P0 = unknown>(__mouseInGroup: P0): R;
    _setTemporaryMouseOutsideLeftGroup<R = void, P0 = boolean>(__setTemporaryMouseOutsideLeftGroup: P0): R;
    _setMouseEnteredGroup_entered<R = void, P0 = boolean, P1 = boolean>(__setMouseEnteredGroup: P0, _entered: P1): R;
    _updateMouseTracking<R = void>(): R;
    _updateWidgets<R = void>(): R;
    _rightGroupRect<R = cocoa.CGRect>(): R;
    _leftGroupRect<R = cocoa.CGRect>(): R;
    mouseExitedLeftButtonGroup<R = void>(): R;
    mouseEnteredLeftButtonGroup<R = void>(): R;
    leftButtonGroupFrameInTitlebarView<R = cocoa.CGRect>(): R;
    _frameConvertedToSelf<R = cocoa.CGRect, P0 = unknown>(__frameConvertedToSelf: P0): R;
    _hitTest_ignoringResizeRegion<R = unknown, P0 = cocoa.CGPoint, P1 = boolean>(__hitTest: P0, _ignoringResizeRegion: P1): R;
    _drawTexturedBackgroundRegion<R = void, P0 = cocoa.CGSRegionObject>(__drawTexturedBackgroundRegion: P0): R;
    _drawTexturedThemeBackgroundRect<R = void, P0 = cocoa.CGRect>(__drawTexturedThemeBackgroundRect: P0): R;
    _drawTexturedBackground<R = void>(): R;
    _topHeightForTexturedBackground<R = number>(): R;
    _additionalTopHeightForFloatingToolbar<R = number>(): R;
    _drawBackgroundForCellWithRect_inView<R = void, P0 = cocoa.CGRect, P1 = unknown>(__drawBackgroundForCellWithRect: P0, _inView: P1): R;
    _drawNormalBackgroundRegion<R = void, P0 = cocoa.CGSRegionObject>(__drawNormalBackgroundRegion: P0): R;
    _drawNormalThemeBackgroundRect<R = void, P0 = cocoa.CGRect>(__drawNormalThemeBackgroundRect: P0): R;
    _commonBackgroundAlphaDrawHandler<R = void, P0 = cocoa.CDUnknownBlockType>(__commonBackgroundAlphaDrawHandler: P0): R;
    _drawTexturedWindowWithClipRect<R = void, P0 = cocoa.CGRect>(__drawTexturedWindowWithClipRect: P0): R;
    _drawTexturedWindowWithClipRect_inView<R = void, P0 = cocoa.CGRect, P1 = unknown>(__drawTexturedWindowWithClipRect: P0, _inView: P1): R;
    _drawCoreUIHUD<R = void>(): R;
    _drawCoreUIHUDInRect<R = void, P0 = cocoa.CGRect>(__drawCoreUIHUDInRect: P0): R;
    _currentHUDPresentationStateValue<R = cocoa.__CFString>(): R;
    _bottomBarHeight<R = number>(): R;
    _topBarHeight<R = number>(): R;
    startingYLocationForSheets<R = number>(): R;
    _topBarHeightWithoutContentBorderThickness<R = number>(): R;
    contentBorderThicknessForEdge<R = number, P0 = number>(_contentBorderThicknessForEdge: P0): R;
    setContentBorderThickness_forEdge<R = void, P0 = number, P1 = number>(_setContentBorderThickness: P0, _forEdge: P1): R;
    _bottomBarHeightChanged<R = void>(): R;
    _titleBarViewHeightChanged<R = void>(): R;
    _computeHeightOfTop_bottom<R = void, P0 = boolean, P1 = boolean>(__computeHeightOfTop: P0, _bottom: P1): R;
    _texturedComputeHeightOfTop_bottom<R = void, P0 = boolean, P1 = boolean>(__texturedComputeHeightOfTop: P0, _bottom: P1): R;
    _drawToolbarTransitionIfNecessary<R = void>(): R;
    _reacquireToolbarFullScreenAuxiliaryView<R = void, P0 = unknown>(__reacquireToolbarFullScreenAuxiliaryView: P0): R;
    _reacquireToolbarViewFromFullScreenWindowAndShow<R = void, P0 = boolean>(__reacquireToolbarViewFromFullScreenWindowAndShow: P0): R;
    _surrenderToolbarViewForFullScreenWindow<R = void>(): R;
    updateTitlebarViewBlendingMode<R = void>(): R;
    _needsBehindWindowBlendingForFullScreenTitlebar<R = boolean>(): R;
    _showHideToolbar_resizeWindow_animate<R = void, P0 = number, P1 = boolean, P2 = boolean>(__showHideToolbar: P0, _resizeWindow: P1, _animate: P2): R;
    _adjustToolbarFrameIfNecessary<R = cocoa.CGRect, P0 = cocoa.CGRect>(__adjustToolbarFrameIfNecessary: P0): R;
    _syncBottomAuxillaryViewPositions<R = void>(): R;
    _syncTopAuxillaryViewPositions<R = void>(): R;
    _syncSideAuxillaryViewPositions<R = void>(): R;
    _effectiveLayoutAttributeForAttribute<R = number, P0 = number>(__effectiveLayoutAttributeForAttribute: P0): R;
    _minXInsetForAccessoryViews<R = number>(): R;
    _enumerateAuxViewControllersOfType_handler<R = void, P0 = number, P1 = cocoa.CDUnknownBlockType>(__enumerateAuxViewControllersOfType: P0, _handler: P1): R;
    _enumerateAuxViewControllersOfType_useEffectiveLayoutAttribute_handler<R = void, P0 = number, P1 = boolean, P2 = cocoa.CDUnknownBlockType>(__enumerateAuxViewControllersOfType: P0, _useEffectiveLayoutAttribute: P1, _handler: P2): R;
    _auxViewControllers<R = unknown>(): R;
    _auxiliaryViewStartingFrame<R = cocoa.CGRect>(): R;
    _syncToolbarPosition<R = void>(): R;
    _toolbarFrameSizeChanged_oldSize<R = void, P0 = unknown, P1 = cocoa.CGSize>(__toolbarFrameSizeChanged: P0, _oldSize: P1): R;
    _reshapeContentAndToolbarView_withOldToolbarFrameSize_resizeWindow_animate<R = void, P0 = number, P1 = cocoa.CGSize, P2 = boolean, P3 = boolean>(__reshapeContentAndToolbarView: P0, _withOldToolbarFrameSize: P1, _resizeWindow: P2, _animate: P3): R;
    _growWindowReshapeContentAndToolbarView_withOldToolbarFrameSize_animate<R = boolean, P0 = number, P1 = cocoa.CGSize, P2 = boolean>(__growWindowReshapeContentAndToolbarView: P0, _withOldToolbarFrameSize: P1, _animate: P2): R;
    _layerBackedAnimateToolbarWithReason_showToolbarPostWindowFrame<R = void, P0 = number, P1 = cocoa.CGRect>(__layerBackedAnimateToolbarWithReason: P0, _showToolbarPostWindowFrame: P1): R;
    _animateToolbarWithReason_showToolbarPostWindowFrame<R = void, P0 = number, P1 = cocoa.CGRect>(__animateToolbarWithReason: P0, _showToolbarPostWindowFrame: P1): R;
    _growContentReshapeContentAndToolbarView_animate<R = void, P0 = number, P1 = boolean>(__growContentReshapeContentAndToolbarView: P0, _animate: P1): R;
    _calculateToolbarFrameAndUpdateSize<R = cocoa.CGRect, P0 = boolean>(__calculateToolbarFrameAndUpdateSize: P0): R;
    _isTitlebarSubview<R = boolean, P0 = unknown>(__isTitlebarSubview: P0): R;
    addTitlebarSubview<R = void, P0 = unknown>(_addTitlebarSubview: P0): R;
    handleSetFrameCommonRedisplay<R = void>(): R;
    _usingToolbarShowHideWeightingOptimization<R = boolean>(): R;
    _setToolbarShowHideResizeWeightingOptimizationOn<R = void, P0 = boolean>(__setToolbarShowHideResizeWeightingOptimizationOn: P0): R;
    _contentRectIncludingToolbarAtHome<R = cocoa.CGRect>(): R;
    _contentRectExcludingToolbar<R = cocoa.CGRect>(): R;
    _hasFullSizeContentView<R = boolean>(): R;
    _standardShadowOKIgnoringShapeCustomization<R = boolean>(): R;
    _toolbarOffsetIfTitleIsHidden<R = number>(): R;
    _currentToolbarHeightWhileAnimating<R = number>(): R;
    _toolbarViewFrame<R = cocoa.CGRect>(): R;
    _toolbar<R = unknown>(): R;
    _toolbarView<R = unknown>(): R;
    _hasToolbarReservedSpace<R = boolean>(): R;
    _setToolbarVisibleStatus<R = void, P0 = number>(__setToolbarVisibleStatus: P0): R;
    _didChangeContentLayoutRect<R = void>(): R;
    _willChangeContentLayoutRect<R = void>(): R;
    preservesContentDuringLiveResize<R = boolean>(): R;
    _updateBackdropView<R = void>(): R;
    _vibrantBlendingStyleForSubtree<R = number>(): R;
    _shouldUseDarkAppearanceInHUDWindows<R = boolean>(): R;
    _setBackdropView<R = void, P0 = unknown>(__setBackdropView: P0): R;
    _needsVisualEffectViewBackgroundWithMaterial_blendingMode<R = boolean, P0 = number, P1 = number>(__needsVisualEffectViewBackgroundWithMaterial: P0, _blendingMode: P1): R;
    _updateTemporaryContentViewFrame<R = void>(): R;
    _unfloatTitlebarAndToolbarIfNeeded<R = void>(): R;
    _floatTitlebarAndToolbarFromInit<R = void, P0 = boolean>(__floatTitlebarAndToolbarFromInit: P0): R;
    removeUnderTitlebarView_withAssociatedWithView<R = void, P0 = unknown, P1 = unknown>(_removeUnderTitlebarView: P0, _withAssociatedWithView: P1): R;
    addUnderTitlebarView_withAssociatedWithView<R = void, P0 = unknown, P1 = unknown>(_addUnderTitlebarView: P0, _withAssociatedWithView: P1): R;
    _titleBarAssociatedViewFrameChanged<R = void, P0 = unknown>(__titleBarAssociatedViewFrameChanged: P0): R;
    _updateAllUnderTitlebarViews<R = void>(): R;
    _updateUnderTitlebarViewFrame_associatedView_titlebarViewFrame<R = void, P0 = unknown, P1 = unknown, P2 = cocoa.CGRect>(__updateUnderTitlebarViewFrame: P0, _associatedView: P1, _titlebarViewFrame: P2): R;
    _updateTitlebarContainerViewFrameIfNecessary<R = void>(): R;
    fullScreenTitlebarMinHeight<R = number>(): R;
    fullScreenTitlebarMaxHeight<R = number>(): R;
    titlebarAppearsTransparentChanged<R = void>(): R;
    _titlebarViewAppearsTransparent<R = boolean>(): R;
    _themeFrameShouldDrawTitlebar<R = boolean>(): R;
    windowTitleModeChanged<R = void>(): R;
    _noteToolbarLayoutChanged<R = void>(): R;
    _setTitlebarViewController<R = void, P0 = unknown>(__setTitlebarViewController: P0): R;
    _titlebarViewControllerIfAvailable<R = unknown>(): R;
    titlebarAccessoryViewControllers<R = unknown>(): R;
    titlebarViewController<R = unknown>(): R;
    _relayoutBottomAuxiliaryViews<R = void>(): R;
    relayoutAuxiliaryViewsOfType<R = void, P0 = number>(_relayoutAuxiliaryViewsOfType: P0): R;
    _relayoutAuxiliaryViewsOfType<R = void, P0 = number>(__relayoutAuxiliaryViewsOfType: P0): R;
    _syncAuxillaryViewPositions<R = void>(): R;
    _moveTitlebarViewsToView<R = void, P0 = unknown>(__moveTitlebarViewsToView: P0): R;
    _currentTitlebarContainerViewFrame<R = cocoa.CGRect>(): R;
    shouldStartWindowDragForEvent<R = boolean, P0 = unknown>(_shouldStartWindowDragForEvent: P0): R;
    _preferredAppearance<R = unknown>(): R;
    _makeTitlebarViewWithFrame<R = unknown, P0 = cocoa.CGRect>(__makeTitlebarViewWithFrame: P0): R;
    _updateTitleSeparatorViewIfNeeded<R = void>(): R;
    _updateContentViewFrame<R = void>(): R;
    _updateContentLayoutGuideFrame<R = void>(): R;
    _contentLayoutRect<R = cocoa.CGRect>(): R;
    _canAddWindowTabs<R = boolean>(): R;
    _canFloatForTabsOrTitlebar<R = boolean, P0 = boolean>(__canFloatForTabsOrTitlebar: P0): R;
    _wantsFloatingTitlebar<R = boolean>(): R;
    _shouldAlwaysFloatTitlebar<R = boolean>(): R;
    _ensureContentLayoutGuide<R = void>(): R;
    _setContentLayoutGuide<R = void, P0 = unknown>(__setContentLayoutGuide: P0): R;
    _contentLayoutGuide<R = unknown>(): R;
    _ensureContentLayoutView<R = void>(): R;
    _setContentLayoutView<R = void, P0 = unknown>(__setContentLayoutView: P0): R;
    _contentLayoutView<R = unknown>(): R;
    _setButtonHidingView<R = void, P0 = unknown>(__setButtonHidingView: P0): R;
    _buttonHidingView<R = unknown>(): R;
    fullScreenButton<R = unknown>(): R;
    _setRenameField<R = void, P0 = unknown>(__setRenameField: P0): R;
    renameField<R = unknown>(): R;
    _setAutosaveButtonSeparatorField<R = void, P0 = unknown>(__setAutosaveButtonSeparatorField: P0): R;
    _autosaveButtonSeparatorField<R = unknown>(): R;
    _setAutosaveButton<R = void, P0 = unknown>(__setAutosaveButton: P0): R;
    autosaveButton<R = unknown>(): R;
    lockButton<R = unknown>(): R;
    toolbarButton<R = unknown>(): R;
    _nonModalDocumentError<R = unknown>(): R;
    _setNonModalDocumentError<R = void, P0 = unknown>(__setNonModalDocumentError: P0): R;
    _documentAutosavingError<R = unknown>(): R;
    _setDocumentAutosavingError<R = void, P0 = unknown>(__setDocumentAutosavingError: P0): R;
    _setDocumentButtonEnabled<R = void, P0 = boolean>(__setDocumentButtonEnabled: P0): R;
    _documentEditingState<R = number>(): R;
    _setDocumentEditingState_animate<R = void, P0 = number, P1 = boolean>(__setDocumentEditingState: P0, _animate: P1): R;
    _updateButtonsWithDocumentEdited<R = void, P0 = boolean>(__updateButtonsWithDocumentEdited: P0): R;
    _resetTitleBarButtons<R = void>(): R;
    makeRenameField<R = unknown>(): R;
    newFullScreenButton<R = unknown>(): R;
    newAutosaveButton<R = unknown>(): R;
    newLockButton<R = unknown>(): R;
    newToolbarButton<R = unknown>(): R;
    _updateButtons<R = void>(): R;
    _wantsLeftHandButtons<R = boolean>(): R;
    _showsAutosaveButton<R = boolean>(): R;
    _addButtonSubview<R = void, P0 = unknown>(__addButtonSubview: P0): R;
    _isZoomButtonEnabled<R = boolean>(): R;
    _possiblyAdjustedHitTestResult<R = unknown, P0 = unknown>(__possiblyAdjustedHitTestResult: P0): R;
    _setButtonsShown<R = void, P0 = boolean>(__setButtonsShown: P0): R;
    addFileButton<R = void, P0 = unknown>(_addFileButton: P0): R;
    _replaceKnownSubview_with<R = void, P0 = unknown, P1 = unknown>(__replaceKnownSubview: P0, _with: P1): R;
    _addKnownSubview_positioned_relativeTo<R = void, P0 = unknown, P1 = number, P2 = unknown>(__addKnownSubview: P0, _positioned: P1, _relativeTo: P2): R;
    _addKnownSubview<R = void, P0 = unknown>(__addKnownSubview: P0): R;
    canAddUnderTitlebarViews<R = boolean>(): R;
    shouldRoundCornersInFullScreen<R = boolean>(): R;
    setThemeFrameWidgetState<R = void, P0 = number>(_setThemeFrameWidgetState: P0): R;
    _isTexturedWindow<R = boolean>(): R;
    _updateTitleBarField<R = void>(): R;
    _alwaysNeedsTitleBarTextField<R = boolean>(): R;
    backgroundColorChanged<R = void, P0 = unknown>(_backgroundColorChanged: P0): R;
    _currentThemeStyle<R = number>(): R;
    _updateTitleTextField<R = void>(): R;
    _backgroundStyleForTitleTextField<R = number>(): R;
    _updateTitleTextFieldView<R = void>(): R;
    _shouldHideTitleView<R = boolean>(): R;
    _hasTopAlignedAccessoryView<R = boolean>(): R;
    _currentTitleTextFieldAttributedString<R = unknown>(): R;
    _titleTextFieldFrame<R = cocoa.CGRect>(): R;
    _removeTitleTextFieldView<R = void>(): R;
    _titleTextField<R = unknown>(): R;
    _setTitleTextFieldView<R = void, P0 = unknown>(__setTitleTextFieldView: P0): R;
    _titleTextFieldView<R = unknown>(): R;
    _removeBackgroundLayer<R = void>(): R;
    _updateBackgroundLayer<R = void>(): R;
    _setDrawHandlerDelegate<R = void, P0 = unknown>(__setDrawHandlerDelegate: P0): R;
    _drawHandlerDelegate<R = unknown>(): R;
    _displayLayer<R = void, P0 = unknown>(__displayLayer: P0): R;
    _cornerMask<R = unknown>(): R;
    _fullScreenCornerMaskImage<R = unknown>(): R;
    _shouldRoundCornersForSurface<R = boolean>(): R;
    _cuiMakeOrUpdateBackgroundLayer_topHeight_drawTopSeparator_bottomHeight_forTitlebar<R = void, P0 = unknown, P1 = number, P2 = boolean, P3 = number, P4 = boolean>(__cuiMakeOrUpdateBackgroundLayer: P0, _topHeight: P1, _drawTopSeparator: P2, _bottomHeight: P3, _forTitlebar: P4): R;
    _cuiMakeOrUpdateBackgroundLayer<R = void, P0 = unknown>(__cuiMakeOrUpdateBackgroundLayer: P0): R;
    _cuiMakeOrUpdateBackgroundLayerForTitlebarView<R = void, P0 = unknown>(__cuiMakeOrUpdateBackgroundLayerForTitlebarView: P0): R;
    _cuiWindowType<R = cocoa.__CFString>(): R;
    _cuiOptionsForWindowType_topHeight_drawTopSeparator_bottomBarHeight_shouldSetScaleKey_forTitlebar<R = unknown, P0 = cocoa.__CFString, P1 = number, P2 = boolean, P3 = number, P4 = boolean, P5 = boolean>(__cuiOptionsForWindowType: P0, _topHeight: P1, _drawTopSeparator: P2, _bottomBarHeight: P3, _shouldSetScaleKey: P4, _forTitlebar: P5): R;
    _cuiOptionsForCornerMaskForWindowType<R = unknown, P0 = cocoa.__CFString>(__cuiOptionsForCornerMaskForWindowType: P0): R;
    _cuiOptionsForHUDIncludeScaleKey<R = unknown, P0 = boolean>(__cuiOptionsForHUDIncludeScaleKey: P0): R;
    _currentThemeStateKey<R = cocoa.__CFString>(): R;
    _backgroundLayerFrame<R = cocoa.CGRect>(): R;
    opaqueAncestor<R = unknown>(): R;
    _titlebarViewShouldRoundCorners<R = boolean>(): R;
    _updateRoundCornerMaskWhenLayerBacked<R = void>(): R;
    windowCornerMaskChanged<R = void>(): R;
    _setCornerMaskIfNeeded<R = void>(): R;
    _clearCornerMaskIfNeeded<R = void>(): R;
    updateWindowCornerMaskOnLayer_forTitlebar<R = void, P0 = unknown, P1 = boolean>(_updateWindowCornerMaskOnLayer: P0, _forTitlebar: P1): R;
    _setBackgroundLayer<R = void, P0 = unknown>(__setBackgroundLayer: P0): R;
    _backgroundLayer<R = unknown>(): R;
    _hasRegularDrawWindowBackground<R = boolean>(): R;
    wantsUpdateLayer<R = boolean>(): R;
    setLayer<R = void, P0 = unknown>(_setLayer: P0): R;
    _drawTitleBar<R = void, P0 = cocoa.CGRect>(__drawTitleBar: P0): R;
    _shouldDrawTitlebarTitle<R = boolean>(): R;
    _titleVisibilityIsHidden<R = boolean>(): R;
    _wantsTitleString<R = boolean>(): R;
    _drawTitleBarBackgroundInClipRect<R = void, P0 = cocoa.CGRect>(__drawTitleBarBackgroundInClipRect: P0): R;
    _wantsUnifiedToolbar<R = boolean>(): R;
    _isOnePieceTitleAndToolbarWithToolbarNotHidden<R = boolean>(): R;
    _wantsSideUtilityTitleBar<R = boolean>(): R;
    _drawTitleStringInClip<R = void, P0 = cocoa.CGRect>(__drawTitleStringInClip: P0): R;
    _currentTitleColor<R = unknown>(): R;
    _drawNormalTitleBar<R = void>(): R;
    _normalTitleBarFrame<R = cocoa.CGRect>(): R;
    _drawSideUtilityTitleBar<R = void>(): R;
    _currentThemeState<R = number>(): R;
    _drawUnifiedToolbar<R = void, P0 = number>(__drawUnifiedToolbar: P0): R;
    _drawTransparentTitlebarInRect<R = void, P0 = cocoa.CGRect>(__drawTransparentTitlebarInRect: P0): R;
    _drawUnifiedToolbarWithState_inFrame<R = void, P0 = number, P1 = cocoa.CGRect>(__drawUnifiedToolbarWithState: P0, _inFrame: P1): R;
    _visibleAuxViewControllersCount<R = number>(): R;
    _needsTitlebarSeparator<R = boolean>(): R;
    _unifiedToolbarFrame<R = cocoa.CGRect>(): R;
    _drawUnifiedToolbarBackgroundInRect_withState<R = void, P0 = cocoa.CGRect, P1 = number>(__drawUnifiedToolbarBackgroundInRect: P0, _withState: P1): R;
    setNeedsDisplay<R = void, P0 = boolean>(_setNeedsDisplay: P0): R;
    _useRegularTextFieldForTheTitleBar<R = boolean>(): R;
    _invalidateAllButtons<R = void>(): R;
    _drawRectFrameNeedsDisplay<R = void, P0 = boolean>(__drawRectFrameNeedsDisplay: P0): R;
    _separatorRectForInactiveWindow<R = cocoa.CGRect>(): R;
    _wantsToolbarHeightTitlebarWithoutToolbar<R = boolean>(): R;
    _isOnePieceTitleAndToolbar<R = boolean>(): R;
    _setTextShadow<R = void, P0 = boolean>(__setTextShadow: P0): R;
    _drawFrameInterior_clip<R = void, P0 = cocoa.CGRect, P1 = cocoa.CGRect>(__drawFrameInterior: P0, _clip: P1): R;
    _wantsTitleBar<R = boolean>(): R;
    _opaqueFullSizeContentViewRegionWithClipRect<R = cocoa.CGSRegionObject, P0 = cocoa.CGRect>(__opaqueFullSizeContentViewRegionWithClipRect: P0): R;
    fontSmoothingBackgroundColor<R = unknown>(): R;
    _setContentView<R = void, P0 = unknown>(__setContentView: P0): R;
    setAssociatedViewsToUnderTitlebarViews<R = void, P0 = unknown>(_setAssociatedViewsToUnderTitlebarViews: P0): R;
    associatedViewsToUnderTitlebarViews<R = unknown>(): R;
    _createAuxiliaryTitlebarViewContainerViewIfNecessary<R = unknown>(): R;
    _setAuxiliaryTitlebarViewContainerView<R = void, P0 = unknown>(__setAuxiliaryTitlebarViewContainerView: P0): R;
    _auxiliaryTitlebarViewContainerView<R = unknown>(): R;
    setTitlebarContainerView<R = void, P0 = unknown>(_setTitlebarContainerView: P0): R;
    setTitlebarView<R = void, P0 = unknown>(_setTitlebarView: P0): R;
    titlebarView<R = unknown>(): R;
    _maskCorners<R = void, P0 = cocoa.CGRect>(__maskCorners: P0): R;
    _maskCorners_clipRect<R = void, P0 = number, P1 = cocoa.CGRect>(__maskCorners: P0, _clipRect: P1): R;
    _createWindowOpaqueShape<R = cocoa.CGSRegionObject>(): R;
    _bottomRightCornerRect<R = cocoa.CGRect>(): R;
    _bottomLeftCornerRect<R = cocoa.CGRect>(): R;
    _bottomCornerRect<R = cocoa.CGRect>(): R;
    _bottomCornerSize<R = cocoa.CGSize>(): R;
    _bottomCornerSizeForRegularWindows<R = cocoa.CGSize>(): R;
    _topCornerSize<R = cocoa.CGSize>(): R;
    _topCornerSizeForRegularWindows<R = cocoa.CGSize>(): R;
    topCornerRounded<R = boolean>(): R;
    bottomCornerRounded<R = boolean>(): R;
    setBottomCornerRounded<R = void, P0 = boolean>(_setBottomCornerRounded: P0): R;
    _bottomCornerHeight<R = number>(): R;
    _getWindowMaskCornerDimensionsLeftCornerWidth_rightCornerWidth_topCornerHeight_bottomCornerHeight<R = void, P0 = number, P1 = number, P2 = number, P3 = number>(__getWindowMaskCornerDimensionsLeftCornerWidth: P0, _rightCornerWidth: P1, _topCornerHeight: P2, _bottomCornerHeight: P3): R;
    _getCachedWindowCornerSizes<R = unknown>(): R;
    _createWindowShapeMask_centerRect_scale<R = boolean, P0 = cocoa.CGImage, P1 = cocoa.CGRect, P2 = number>(__createWindowShapeMask: P0, _centerRect: P1, _scale: P2): R;
    roundedCornerRadius<R = number>(): R;
    _effectiveMovableByBottomBar<R = boolean>(): R;
    _setMovableByBottomBar<R = void, P0 = boolean>(__setMovableByBottomBar: P0): R;
    _movableByBottomBar<R = boolean>(): R;
    activationRect<R = cocoa.CGRect>(): R;
    _isDarkWindow<R = boolean>(): R;
    titlebarAlphaValue<R = number>(): R;
    setTitlebarAlphaValue<R = void, P0 = number>(_v: P0): R;
    buttonRevealAmount<R = number>(): R;
    setButtonRevealAmount<R = void, P0 = number>(_v: P0): R;
    titleHeightToHideInFullScreen<R = number>(): R;
    _backdropView<R = cocoa.NSVisualEffectView>(): R;
    temporaryContentView<R = cocoa.NSView>(): R;
    setTemporaryContentView<R = void, P0 = cocoa.NSView>(_v: P0): R;
    contentLayoutGuide<R = unknown>(): R;
    titlebarContainerView<R = cocoa.NSTitlebarContainerView>(): R;
    debugDescription<R = cocoa.NSString>(): R;
    description<R = cocoa.NSString>(): R;
    hash<R = number>(): R;
    superclass<R = unknown>(): R;
  }
  namespace classes {
    export interface NSThemeFrame<T = any> extends cocoa.classes.NSTitledFrame, cocoa.classes.NSViewLayerContentScaleDelegateProtocol {
      alloc<R = NSThemeFrame>(): R;
      new: <R = NSThemeFrame>() => R;
      _prepareRenameField_forEditingMode<R = void, P0 = unknown, P1 = number>(__prepareRenameField: P0, _forEditingMode: P1): R;
      _fileButtonSpacingWidthForWindowWithStyleMask<R = number, P0 = number>(__fileButtonSpacingWidthForWindowWithStyleMask: P0): R;
      _sizeOfTitlebarFileButtonForWindowWithStyleMask<R = cocoa.CGSize, P0 = number>(__sizeOfTitlebarFileButtonForWindowWithStyleMask: P0): R;
      _resizeHeight<R = number, P0 = number>(__resizeHeight: P0): R;
      _windowSideTitlebarTitleMinWidth<R = number, P0 = number>(__windowSideTitlebarTitleMinWidth: P0): R;
      automaticallyNotifiesObserversOf_backdropView<R = boolean>(): R;
      _cuiMaskOnlyOptionsForWindowType_cornerMask_inRect<R = unknown, P0 = cocoa.__CFString, P1 = number, P2 = cocoa.CGRect>(__cuiMaskOnlyOptionsForWindowType: P0, _cornerMask: P1, _inRect: P2): R;
      clearCornerMaskOnLayer<R = void, P0 = unknown>(_clearCornerMaskOnLayer: P0): R;
      drawBevel_inFrame_topCornerRounded_bottomCornerRounded<R = void, P0 = cocoa.CGRect, P1 = cocoa.CGRect, P2 = boolean, P3 = boolean>(_drawBevel: P0, _inFrame: P1, _topCornerRounded: P2, _bottomCornerRounded: P3): R;
      drawBevel_inFrame_topCornerRounded_bottomCornerRounded_isHUD_isDarkWindow<R = void, P0 = cocoa.CGRect, P1 = cocoa.CGRect, P2 = boolean, P3 = boolean, P4 = boolean, P5 = boolean>(_drawBevel: P0, _inFrame: P1, _topCornerRounded: P2, _bottomCornerRounded: P3, _isHUD: P4, _isDarkWindow: P5): R;
      _renameFieldForWindowWithStyleMask<R = unknown, P0 = number>(__renameFieldForWindowWithStyleMask: P0): R;
      containingThemeFrameFromView<R = unknown, P0 = unknown>(_containingThemeFrameFromView: P0): R;
    }
  }
}

declare const NSThemeFrame: cocoa.classes.NSThemeFrame;
