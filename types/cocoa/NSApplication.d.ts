/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface NSApplication<T = any> extends NSResponder, NSAppearanceCustomizationProtocol, NSTouchBarProviderContainerProtocol, NSAppearanceCustomizationInternalProtocol, NSUserInterfaceValidationsProtocol, NSMenuItemValidationProtocol, NSAccessibilityElementProtocol, NSAccessibilityProtocol {
    cxx_destruct<R = void>(): R;
    _shouldLoadMainNibNamed<R = boolean, P0 = unknown>(__shouldLoadMainNibNamed: P0): R;
    memoryStatus<R = number>(): R;
    _installMemoryStatusDispatchSources<R = void>(): R;
    _installMemoryPressureDispatchSources<R = void>(): R;
    _fakeMemoryPressureHandler<R = void, P0 = unknown>(__fakeMemoryPressureHandler: P0): R;
    _callMemoryPressureHandlers<R = void>(): R;
    removeIdleMonitor<R = void, P0 = unknown>(_removeIdleMonitor: P0): R;
    addIdleMonitorUsingHandler<R = unknown, P0 = CDUnknownBlockType>(_addIdleMonitorUsingHandler: P0): R;
    removeMemoryPressureMonitor<R = void, P0 = unknown>(_removeMemoryPressureMonitor: P0): R;
    addMemoryPressureMonitorUsingHandler<R = unknown, P0 = CDUnknownBlockType>(_addMemoryPressureMonitorUsingHandler: P0): R;
    _doCopyMemoryPressureArrayOnWriteIfNecessary<R = void>(): R;
    abortAllToolTips<R = void>(): R;
    setCanEnterFullScreenMode<R = void, P0 = boolean>(_setCanEnterFullScreenMode: P0): R;
    canEnterFullScreenMode<R = boolean>(): R;
    exitFullScreenMode<R = void, P0 = unknown>(_exitFullScreenMode: P0): R;
    enterFullScreenMode<R = void, P0 = unknown>(_enterFullScreenMode: P0): R;
    _setPresentationOptions_instance_flags<R = void, P0 = number, P1 = unknown, P2 = number>(__setPresentationOptions: P0, _instance: P1, _flags: P2): R;
    _setPresentationOptions_flags<R = void, P0 = number, P1 = number>(__setPresentationOptions: P0, _flags: P1): R;
    userInterfaceLayoutDirection<R = number>(): R;
    _enableSuddenTermination<R = void>(): R;
    _disableSuddenTermination<R = boolean>(): R;
    _processSwitchesEnabled<R = boolean>(): R;
    isFullKeyboardAccessEnabled<R = boolean>(): R;
    orderFrontCharacterPalette<R = void, P0 = unknown>(_orderFrontCharacterPalette: P0): R;
    _reopenWindowsAsNecessaryIncludingRestorableState_completionHandler<R = void, P0 = boolean, P1 = CDUnknownBlockType>(__reopenWindowsAsNecessaryIncludingRestorableState: P0, _completionHandler: P1): R;
    _launchTaskMask<R = number>(): R;
    _setLaunchTaskMaskBits<R = void, P0 = number>(__setLaunchTaskMaskBits: P0): R;
    _whenReopeningIsAllowedDo<R = void, P0 = CDUnknownBlockType>(__whenReopeningIsAllowedDo: P0): R;
    _continueReopening<R = void>(): R;
    _delayReopening<R = void>(): R;
    _kitBundle<R = unknown>(): R;
    _isNSDocumentBased<R = boolean>(): R;
    showGuessPanel<R = void, P0 = unknown>(_showGuessPanel: P0): R;
    stopDictation<R = void, P0 = unknown>(_stopDictation: P0): R;
    startDictation<R = void, P0 = unknown>(_startDictation: P0): R;
    stopSpeaking<R = void, P0 = unknown>(_stopSpeaking: P0): R;
    isSpeaking<R = boolean>(): R;
    speakString<R = void, P0 = unknown>(_speakString: P0): R;
    speechSynthesizer_didFinishSpeaking<R = void, P0 = unknown, P1 = boolean>(_speechSynthesizer: P0, _didFinishSpeaking: P1): R;
    reportException<R = void, P0 = unknown>(_reportException: P0): R;
    _exceptionListeners<R = unknown>(): R;
    _unregisterExceptionListener<R = void, P0 = unknown>(__unregisterExceptionListener: P0): R;
    _registerExceptionListener<R = void, P0 = unknown>(__registerExceptionListener: P0): R;
    _canShowExceptions<R = boolean>(): R;
    _showException<R = void, P0 = unknown>(__showException: P0): R;
    _crashOnException<R = void, P0 = unknown>(__crashOnException: P0): R;
    _pendingActCount<R = number>(): R;
    _setCurrentActivation<R = unknown, P0 = number>(__setCurrentActivation: P0): R;
    _currentActivation<R = number>(): R;
    _handleKeyFocusNotification_withEvent<R = boolean, P0 = number, P1 = unknown>(__handleKeyFocusNotification: P0, _withEvent: P1): R;
    _handleHotKeyRelease<R = boolean, P0 = unknown>(__handleHotKeyRelease: P0): R;
    _handleHotKeyPressed<R = boolean, P0 = unknown>(__handleHotKeyPressed: P0): R;
    _handleAppKitDefinedEvent<R = void, P0 = unknown>(__handleAppKitDefinedEvent: P0): R;
    _openWindows<R = unknown>(): R;
    _removeOpenWindow<R = void, P0 = unknown>(__removeOpenWindow: P0): R;
    _addOpenWindow<R = void, P0 = unknown>(__addOpenWindow: P0): R;
    _addWindow<R = unknown, P0 = unknown>(__addWindow: P0): R;
    _removeWindow<R = unknown, P0 = unknown>(__removeWindow: P0): R;
    _indexOfWindow<R = number, P0 = unknown>(__indexOfWindow: P0): R;
    _windowMoveDisabled<R = boolean>(): R;
    _setWindowMoveDisabled<R = void, P0 = boolean>(__setWindowMoveDisabled: P0): R;
    _createDockMenu<R = __CFArray, P0 = boolean>(__createDockMenu: P0): R;
    _flattenMenu<R = __CFArray, P0 = unknown>(__flattenMenu: P0): R;
    _flattenMenu_flatList<R = __CFArray, P0 = unknown, P1 = unknown>(__flattenMenu: P0, _flatList: P1): R;
    _flattenMenuItem<R = __CFDictionary, P0 = unknown>(__flattenMenuItem: P0): R;
    _flattenMenuItem_flatList<R = __CFDictionary, P0 = unknown, P1 = unknown>(__flattenMenuItem: P0, _flatList: P1): R;
    _sendDockMenuCommand_withTag_modifierFlags_originatingDisplay<R = number, P0 = number, P1 = number, P2 = number, P3 = number>(__sendDockMenuCommand: P0, _withTag: P1, _modifierFlags: P2, _originatingDisplay: P3): R;
    _sendDockMenuCommand_withTag_modifierFlags<R = number, P0 = number, P1 = number, P2 = number>(__sendDockMenuCommand: P0, _withTag: P1, _modifierFlags: P2): R;
    setDockMenu<R = void, P0 = unknown>(_setDockMenu: P0): R;
    menu<R = unknown>(): R;
    setMenu<R = void, P0 = unknown>(_setMenu: P0): R;
    _setMainMenu<R = void, P0 = unknown>(__setMainMenu: P0): R;
    _addUpdaterForDocumentMenuItem<R = void, P0 = unknown>(__addUpdaterForDocumentMenuItem: P0): R;
    _quitMenuItemShouldKeepWindows<R = boolean, P0 = unknown>(__quitMenuItemShouldKeepWindows: P0): R;
    _isAlternateQuitMenuItem<R = boolean, P0 = unknown>(__isAlternateQuitMenuItem: P0): R;
    _reactToChangeInQuitAlwaysKeepsWindows<R = void, P0 = unknown>(__reactToChangeInQuitAlwaysKeepsWindows: P0): R;
    updateWindows<R = void>(): R;
    setWindowsNeedUpdate<R = void, P0 = boolean>(_setWindowsNeedUpdate: P0): R;
    _copyWindows<R = unknown>(): R;
    setActivationPolicy<R = boolean, P0 = number>(_setActivationPolicy: P0): R;
    activationPolicy<R = number>(): R;
    _appIcon<R = unknown>(): R;
    _dockRestarted<R = void>(): R;
    _iconImageIfSet<R = unknown>(): R;
    _iconImage<R = unknown>(): R;
    _setApplicationIconImage_setDockImage<R = void, P0 = unknown, P1 = boolean>(__setApplicationIconImage: P0, _setDockImage: P1): R;
    _dockDied<R = void>(): R;
    _cycleUtilityWindowsReversed<R = void, P0 = boolean>(__cycleUtilityWindowsReversed: P0): R;
    _cycleWindowsReversed<R = void, P0 = boolean>(__cycleWindowsReversed: P0): R;
    _makeWindowsPerform_forEvent_inWindow_standardWindowButton<R = void, P0 = string, P1 = unknown, P2 = unknown, P3 = number>(__makeWindowsPerform: P0, _forEvent: P1, _inWindow: P2, _standardWindowButton: P3): R;
    makeWindowsPerform_inOrder<R = unknown, P0 = string, P1 = boolean>(_makeWindowsPerform: P0, _inOrder: P1): R;
    enumerateWindowsWithOptions_usingBlock<R = void, P0 = number, P1 = CDUnknownBlockType>(_enumerateWindowsWithOptions: P0, _usingBlock: P1): R;
    _findWindowWithOptions_passingTest<R = unknown, P0 = number, P1 = CDUnknownBlockType>(__findWindowWithOptions: P0, _passingTest: P1): R;
    _enumerateOnScreenWindowsUsingBlock<R = void, P0 = CDUnknownBlockType>(__enumerateOnScreenWindowsUsingBlock: P0): R;
    frontWindow<R = unknown>(): R;
    _areAllPanelsNonactivating<R = boolean>(): R;
    _setAllPanelsNonactivating<R = void, P0 = boolean>(__setAllPanelsNonactivating: P0): R;
    _releaseKeyFocus<R = number>(): R;
    _stealKeyFocusWithOptions<R = number, P0 = number>(__stealKeyFocusWithOptions: P0): R;
    _setHasKeyFocus<R = void, P0 = boolean>(__setHasKeyFocus: P0): R;
    _hasKeyFocus<R = boolean>(): R;
    _obtainKeyFocus<R = void>(): R;
    _resignKeyFocus<R = void>(): R;
    quickLookPreviewItems<R = void, P0 = unknown>(_quickLookPreviewItems: P0): R;
    _handleActivateDeferredEvent<R = void, P0 = unknown>(__handleActivateDeferredEvent: P0): R;
    _handleDeactivateEvent<R = void, P0 = unknown>(__handleDeactivateEvent: P0): R;
    _handleReactivateEvent<R = void, P0 = unknown>(__handleReactivateEvent: P0): R;
    _handleActivatedEvent<R = void, P0 = unknown>(__handleActivatedEvent: P0): R;
    event_wouldActivateWindow<R = void, P0 = unknown, P1 = unknown>(_event: P0, _wouldActivateWindow: P1): R;
    _activeDisplayChanged<R = void, P0 = unknown>(__activeDisplayChanged: P0): R;
    _declineSpaceChangedNotification<R = void>(): R;
    _requestSpaceChangedNotification<R = void>(): R;
    activeSpaceChanged<R = void, P0 = unknown>(_activeSpaceChanged: P0): R;
    _updateActiveWindowForSpaceChange<R = void>(): R;
    _anyOfMyWindowsAreOnAVisibleNonFullScreenSpace<R = boolean>(): R;
    _updateFullScreenPresentationOptionsForInstance<R = void, P0 = unknown>(__updateFullScreenPresentationOptionsForInstance: P0): R;
    _updateFullScreenPresentationOptions<R = void>(): R;
    _shouldClearModalWindowLevelWhenInactive<R = boolean>(): R;
    _findKeyWindowConsideringSpacesWithOriginatingDisplayHint_isAppleEventPending_makeKey<R = boolean, P0 = number, P1 = boolean, P2 = boolean>(__findKeyWindowConsideringSpacesWithOriginatingDisplayHint: P0, _isAppleEventPending: P1, _makeKey: P2): R;
    _bestMainWindowCandidateOnScreen<R = unknown, P0 = unknown>(__bestMainWindowCandidateOnScreen: P0): R;
    _bestKeyWindowCandidateOnScreen<R = unknown, P0 = unknown>(__bestKeyWindowCandidateOnScreen: P0): R;
    _sendScreenNotificationWhenDockSizeChanges<R = boolean>(): R;
    _isActiveApp<R = boolean>(): R;
    onFirstEvent<R = void>(): R;
    preventWindowOrdering<R = void>(): R;
    delayWindowOrdering<R = unknown>(): R;
    _unsetShouldRestoreStateOnNextLaunch<R = void>(): R;
    _setShouldRestoreStateOnNextLaunch<R = void, P0 = boolean>(__setShouldRestoreStateOnNextLaunch: P0): R;
    shouldRestoreStateOnNextLaunch<R = boolean>(): R;
    terminate<R = void, P0 = unknown>(_terminate: P0): R;
    _expectingAppDeath<R = boolean>(): R;
    _isDying<R = boolean>(): R;
    _terminateFromSender_askIfShouldTerminate_saveWindows<R = void, P0 = unknown, P1 = boolean, P2 = boolean>(__terminateFromSender: P0, _askIfShouldTerminate: P1, _saveWindows: P2): R;
    _copyPublicPersistentUIInfo<R = unknown>(): R;
    _setDockMenuForPersistentState<R = void, P0 = unknown>(__setDockMenuForPersistentState: P0): R;
    _popPersistentStateTerminationGeneration<R = void>(): R;
    _pushPersistentStateTerminationGeneration<R = void>(): R;
    _reopenPersistentState<R = void>(): R;
    _flushPersistentState<R = void>(): R;
    _persistentStateTerminationGeneration<R = number>(): R;
    _persistenceOrderedWindowNumbers<R = unknown>(): R;
    replyToApplicationShouldTerminate<R = void, P0 = boolean>(_replyToApplicationShouldTerminate: P0): R;
    _docController_shouldTerminate<R = void, P0 = unknown, P1 = boolean>(__docController: P0, _shouldTerminate: P1): R;
    _shouldTerminate<R = boolean>(): R;
    _setWaitingForTerminationReply<R = void, P0 = boolean>(__setWaitingForTerminationReply: P0): R;
    _waitingForTerminationReply<R = boolean>(): R;
    _cancelAllUserAttentionRequests<R = void>(): R;
    _cancelRequest<R = void, P0 = unknown>(__cancelRequest: P0): R;
    cancelUserAttentionRequest<R = void, P0 = number>(_cancelUserAttentionRequest: P0): R;
    requestUserAttention<R = number, P0 = number>(_requestUserAttention: P0): R;
    _hasActiveRequest<R = boolean>(): R;
    _setAppCentricOpenPanel<R = void, P0 = unknown>(__setAppCentricOpenPanel: P0): R;
    _appCentricOpenPanel<R = unknown>(): R;
    _clearModalWindowLevels<R = void>(): R;
    endModalSession<R = void, P0 = _NSModalSession>(_endModalSession: P0): R;
    runModalSession<R = number, P0 = _NSModalSession>(_runModalSession: P0): R;
    beginModalSessionForWindow<R = _NSModalSession, P0 = unknown>(_beginModalSessionForWindow: P0): R;
    beginModalSessionForWindow_relativeToWindow<R = _NSModalSession, P0 = unknown, P1 = unknown>(_beginModalSessionForWindow: P0, _relativeToWindow: P1): R;
    _commonBeginModalSessionForWindow_relativeToWindow_modalDelegate_didEndSelector_contextInfo<R = _NSModalSession, P0 = unknown, P1 = unknown, P2 = unknown, P3 = string, P4 = void>(__commonBeginModalSessionForWindow: P0, _relativeToWindow: P1, _modalDelegate: P2, _didEndSelector: P3, _contextInfo: P4): R;
    _orderFrontModalWindow_relativeToWindow<R = unknown, P0 = unknown, P1 = unknown>(__orderFrontModalWindow: P0, _relativeToWindow: P1): R;
    abortModal<R = void>(): R;
    endSheet_returnCode<R = void, P0 = unknown, P1 = number>(_endSheet: P0, _returnCode: P1): R;
    stopModalWithCode<R = void, P0 = number>(_stopModalWithCode: P0): R;
    endSheet<R = void, P0 = unknown>(_endSheet: P0): R;
    stopModal<R = void>(): R;
    stop<R = void, P0 = unknown>(_stop: P0): R;
    beginSheet_modalForWindow_modalDelegate_didEndSelector_contextInfo<R = void, P0 = unknown, P1 = unknown, P2 = unknown, P3 = string, P4 = void>(_beginSheet: P0, _modalForWindow: P1, _modalDelegate: P2, _didEndSelector: P3, _contextInfo: P4): R;
    runModalForWindow_relativeToWindow<R = number, P0 = unknown, P1 = unknown>(_runModalForWindow: P0, _relativeToWindow: P1): R;
    _wantsDeviceDependentEventModifierFlags<R = boolean>(): R;
    runModalForWindow<R = number, P0 = unknown>(_runModalForWindow: P0): R;
    _doModalLoop_peek<R = void, P0 = _NSModalSession, P1 = boolean>(__doModalLoop: P0, _peek: P1): R;
    run<R = void>(): R;
    _postEventHandling<R = void>(): R;
    _preEventHandling<R = void>(): R;
    _endRunMethod<R = void>(): R;
    _startRunMethod<R = void>(): R;
    _didNSOpenOrPrint<R = boolean>(): R;
    finishLaunching<R = void>(): R;
    _shouldDelayDocumentReopeningUntilAfterFinishLaunching<R = boolean>(): R;
    _replyToOpen<R = unknown, P0 = number>(__replyToOpen: P0): R;
    _replyToLaunch<R = boolean>(): R;
    _sendFinishLaunchingNotification<R = void>(): R;
    _postDidFinishNotification<R = void>(): R;
    _isFinishLaunchingFromEventHandlersSuppressed<R = boolean>(): R;
    _suppressFinishLaunchingFromEventHandlersWhilePerformingBlock<R = void, P0 = CDUnknownBlockType>(__suppressFinishLaunchingFromEventHandlersWhilePerformingBlock: P0): R;
    _activateWindows<R = void>(): R;
    _deactivateWindows<R = void>(): R;
    activateIgnoringOtherApps<R = void, P0 = boolean>(_activateIgnoringOtherApps: P0): R;
    _adjustKeyWindowFromOriginatingDisplayHint<R = void, P0 = number>(__adjustKeyWindowFromOriginatingDisplayHint: P0): R;
    _pendingActivationOriginatingDisplayHint<R = number>(): R;
    _setPendingActivationOriginatingDisplayHint<R = void, P0 = number>(__setPendingActivationOriginatingDisplayHint: P0): R;
    _withAmbientOriginatingDisplayHint_perform<R = void, P0 = number, P1 = CDUnknownBlockType>(__withAmbientOriginatingDisplayHint: P0, _perform: P1): R;
    _handlingAmbientDisplayHintDockMenuCommand<R = boolean>(): R;
    _ambientOriginatingDisplayHint<R = number>(): R;
    _setAmbientOriginatingDisplayHint<R = void, P0 = number>(__setAmbientOriginatingDisplayHint: P0): R;
    deactivate<R = void>(): R;
    _isRunningModal<R = boolean>(): R;
    _isRunningDocModal<R = boolean>(): R;
    _isRunningAppModal<R = boolean>(): R;
    _isDoingHide<R = boolean>(): R;
    _isDoingUnhide<R = boolean>(): R;
    _hiddenOnLaunch<R = boolean>(): R;
    _wantsToActivate<R = boolean>(): R;
    _setWantsToActivate<R = void, P0 = boolean>(__setWantsToActivate: P0): R;
    setIsActive<R = void, P0 = boolean>(_setIsActive: P0): R;
    _doOpenUntitled<R = boolean>(): R;
    _hasOpenMenuItem<R = boolean>(): R;
    _doOpenFile_ok_tryTemp<R = void, P0 = unknown, P1 = number, P2 = boolean>(__doOpenFile: P0, _ok: P1, _tryTemp: P2): R;
    replyToOpenOrPrint<R = void, P0 = number>(_replyToOpenOrPrint: P0): R;
    _openFileWithoutUI<R = boolean, P0 = unknown>(__openFileWithoutUI: P0): R;
    openTempFile_ok<R = number, P0 = unknown, P1 = number>(_openTempFile: P0, _ok: P1): R;
    openFile_ok<R = number, P0 = unknown, P1 = number>(_openFile: P0, _ok: P1): R;
    _isDoingOpenFile<R = boolean>(): R;
    unhide<R = number>(): R;
    _isDeactPending<R = boolean>(): R;
    _appleEventActivationInProgress<R = boolean>(): R;
    _setAppleEventActivationInProgress<R = void, P0 = boolean>(__setAppleEventActivationInProgress: P0): R;
    _mouseActivationInProgress<R = boolean>(): R;
    _setMouseActivationInProgress<R = void, P0 = boolean>(__setMouseActivationInProgress: P0): R;
    _setKeyWindow<R = unknown, P0 = unknown>(__setKeyWindow: P0): R;
    _setPreviousKeyWindow<R = void, P0 = unknown>(__setPreviousKeyWindow: P0): R;
    _previousKeyWindow<R = unknown>(): R;
    _keyWindow<R = unknown>(): R;
    _setMainWindow<R = unknown, P0 = unknown>(__setMainWindow: P0): R;
    _mainWindow<R = unknown>(): R;
    _windowWithContextID<R = unknown, P0 = number>(__windowWithContextID: P0): R;
    windowWithWindowNumber<R = unknown, P0 = number>(_windowWithWindowNumber: P0): R;
    _windowNumber_changedTo<R = void, P0 = number, P1 = number>(__windowNumber: P0, _changedTo: P1): R;
    unhideAllApplications<R = void, P0 = unknown>(_unhideAllApplications: P0): R;
    hideOtherApplications<R = void, P0 = unknown>(_hideOtherApplications: P0): R;
    unhideWithoutActivation<R = void>(): R;
    _doUnhideWithoutActivation<R = void>(): R;
    _doUnhideWithoutActivationMaybeFakingIt<R = void, P0 = boolean>(__doUnhideWithoutActivationMaybeFakingIt: P0): R;
    _batchOrdering<R = boolean>(): R;
    hide<R = void, P0 = unknown>(_hide: P0): R;
    _afterBatchOrderingFinishesDo<R = void, P0 = CDUnknownBlockType>(__afterBatchOrderingFinishesDo: P0): R;
    _performBatchWindowOrdering_release<R = void, P0 = number, P1 = boolean>(__performBatchWindowOrdering: P0, _release: P1): R;
    _copyBatchWindowOrderingPerformerForToken_release<R = CDUnknownBlockType, P0 = number, P1 = boolean>(__copyBatchWindowOrderingPerformerForToken: P0, _release: P1): R;
    _scheduleWindow_forBatchOrdering_relativeTo<R = void, P0 = number, P1 = number, P2 = number>(__scheduleWindow: P0, _forBatchOrdering: P1, _relativeTo: P2): R;
    _lowestWindowOfAtLeastNormalWindowLevelAfterScheduledBatchOrdering<R = number>(): R;
    _unscheduleWindowForBatchOrdering<R = void, P0 = number>(__unscheduleWindowForBatchOrdering: P0): R;
    _startBatchWindowAccumulation<R = number, P0 = number>(__startBatchWindowAccumulation: P0): R;
    _switchToSpaceIfNeeded<R = void>(): R;
    _orderWindowsAndSwitchToSpaceIfNeeded<R = void>(): R;
    _doFakeUnhide<R = void>(): R;
    _doHide<R = void>(): R;
    _doHideMaybeFakingIt<R = void, P0 = boolean>(__doHideMaybeFakingIt: P0): R;
    _hiddenWindows<R = unknown>(): R;
    _removeHiddenWindow<R = void, P0 = unknown>(__removeHiddenWindow: P0): R;
    _addHiddenWindow<R = void, P0 = unknown>(__addHiddenWindow: P0): R;
    context<R = unknown>(): R;
    contextID<R = number>(): R;
    _eventDelegate<R = unknown>(): R;
    _setEventDelegate<R = void, P0 = unknown>(__setEventDelegate: P0): R;
    _deallocHardCore<R = void, P0 = boolean>(__deallocHardCore: P0): R;
    _dockBehaviorChanged<R = void, P0 = unknown>(__dockBehaviorChanged: P0): R;
    _setDoubleClickBehavior<R = void>(): R;
    _eventBlockingTransitionDidEnd<R = void>(): R;
    _eventBlockingTransitionWillBegin<R = void>(): R;
    _accessibilityStatusChanged<R = void, P0 = unknown>(__accessibilityStatusChanged: P0): R;
    _initializeAutomaticTermination<R = void>(): R;
    _makeSureAutomaticTerminationIsNotInterferingWithLanguagePrefs<R = void, P0 = unknown>(__makeSureAutomaticTerminationIsNotInterferingWithLanguagePrefs: P0): R;
    _enableAutomaticTerminationIfWhitelisted<R = void>(): R;
    _forceAutoQuit<R = void, P0 = unknown>(__forceAutoQuit: P0): R;
    _terminateOnMemoryPressure<R = void, P0 = unknown>(__terminateOnMemoryPressure: P0): R;
    _unfreezeAutomaticTerminationState<R = void>(): R;
    _freezeAutomaticTerminationState<R = void>(): R;
    _applicationLaunchIsPastSplashScreens<R = boolean>(): R;
    _spacesSwitchOnActivationChanged<R = void, P0 = unknown>(__spacesSwitchOnActivationChanged: P0): R;
    _spacesSwitchOnActivation<R = boolean>(): R;
    _setSpacesSwitchOnActivation<R = void>(): R;
    _isFakeHidden<R = boolean>(): R;
    _setFakeHidden<R = void, P0 = boolean>(__setFakeHidden: P0): R;
    _setIsHidden<R = void, P0 = boolean>(__setIsHidden: P0): R;
    _updateButtonsForSystemUIModeChanged<R = void>(): R;
    _removeSystemUIModeHandler<R = void>(): R;
    _registerWithDock<R = void>(): R;
    _installAutoreleasePoolsOnCurrentThreadIfNecessary<R = void>(): R;
    _cleanUpForCarbonAppTermination<R = void>(): R;
    _applicationBundle<R = unknown>(): R;
    _emitApplicationLaunchExtendedSignpostsAppIsOptedIn<R = void, P0 = boolean>(__emitApplicationLaunchExtendedSignpostsAppIsOptedIn: P0): R;
    markAppLaunchComplete<R = void>(): R;
    _emitApplicationLaunchSignpost<R = void>(): R;
    _inInstallEnvironment<R = boolean>(): R;
    _accessibilityUIElementSpecifierRegisterIfNeeded<R = unknown, P0 = boolean>(__accessibilityUIElementSpecifierRegisterIfNeeded: P0): R;
    _accessibilityUIElementSpecifier<R = unknown>(): R;
    _previousModalSession<R = _NSModalSession, P0 = _NSModalSession>(__previousModalSession: P0): R;
    _windowForModalSession<R = unknown, P0 = _NSModalSession>(__windowForModalSession: P0): R;
    _modalSessionForWindow<R = _NSModalSession, P0 = unknown>(__modalSessionForWindow: P0): R;
    _something_wasPresentedWithResult_soContinue<R = void, P0 = unknown, P1 = number, P2 = CDUnknownBlockType>(__something: P0, _wasPresentedWithResult: P1, _soContinue: P2): R;
    _validateError_forPresentationMethod<R = unknown, P0 = unknown, P1 = string>(__validateError: P0, _forPresentationMethod: P1): R;
    _setNeedsUpdateToReflectAutomaticTerminationState<R = void>(): R;
    observeValueForKeyPath_ofObject_change_context<R = void, P0 = unknown, P1 = unknown, P2 = unknown, P3 = void>(_observeValueForKeyPath: P0, _ofObject: P1, _change: P2, _context: P3): R;
    _tryTransformingToBackgroundTypeForAutoQuit<R = boolean>(): R;
    _checkForAutomaticTerminationSupportPossiblyEnablingIt<R = boolean>(): R;
    enableAutomaticTermination<R = void>(): R;
    disableAutomaticTermination<R = void>(): R;
    _userNotificationCenter_didActivateWithToken<R = void, P0 = unknown, P1 = unknown>(__userNotificationCenter: P0, _didActivateWithToken: P1): R;
    _userNotificationCenter_willActivateForNotification_additionalUserInfo<R = unknown, P0 = unknown, P1 = unknown, P2 = unknown>(__userNotificationCenter: P0, _willActivateForNotification: P1, _additionalUserInfo: P2): R;
    unregisterForRemoteNotifications<R = void>(): R;
    registerForRemoteNotifications<R = void>(): R;
    registerForRemoteNotificationTypes<R = void, P0 = number>(_registerForRemoteNotificationTypes: P0): R;
    pushRegistrationDidReceiveRemotePush<R = void, P0 = unknown>(_pushRegistrationDidReceiveRemotePush: P0): R;
    pushRegistrationDidFailToRegister<R = void, P0 = unknown>(_pushRegistrationDidFailToRegister: P0): R;
    pushRegistrationDidRegisterWithDeviceToken<R = void, P0 = unknown>(_pushRegistrationDidRegisterWithDeviceToken: P0): R;
    _startPrefetchingUbiquityContainerURL<R = void>(): R;
    _ubiquityIdentityDidChange<R = void, P0 = unknown>(__ubiquityIdentityDidChange: P0): R;
    _asynchronouslyPrefetchUbiqityContainerURL<R = void>(): R;
    _addFullScreenMenuItemIfNeeded<R = void>(): R;
    _customizeFileMenuIfNeeded<R = void>(): R;
    _findMenuItemWithSelector<R = unknown, P0 = string>(__findMenuItemWithSelector: P0): R;
    _findMenuItemMatchingPredicate<R = unknown, P0 = CDUnknownBlockType>(__findMenuItemMatchingPredicate: P0): R;
    _customizeMainMenu<R = void>(): R;
    _addTextInputMenuItems<R = void, P0 = unknown>(__addTextInputMenuItems: P0): R;
    _bestAppearanceCustomizationTargetForAction_to<R = unknown, P0 = string, P1 = unknown>(__bestAppearanceCustomizationTargetForAction: P0, _to: P1): R;
    importFromDevice<R = void, P0 = unknown>(_importFromDevice: P0): R;
    _customizeImportFromDeviceMenuItem<R = void>(): R;
    accessibilityFunctionRowTopLevelElementsAttribute<R = unknown>(): R;
    accessibilityShouldUseUniqueId<R = boolean>(): R;
    accessibilityFocusedUIElement<R = unknown>(): R;
    accessibilityHitTest<R = unknown>(): R;
    _accessibilityViewBridgeHitTest<R = unknown, P0 = CGPoint>(__accessibilityViewBridgeHitTest: P0): R;
    accessibilityIsIgnored<R = boolean>(): R;
    accessibilityPerformAction<R = void, P0 = unknown>(_accessibilityPerformAction: P0): R;
    accessibilityActionDescription<R = unknown, P0 = unknown>(_accessibilityActionDescription: P0): R;
    accessibilityActionNames<R = unknown>(): R;
    accessibilityAttributeValue_forParameter<R = unknown, P0 = unknown, P1 = unknown>(_accessibilityAttributeValue: P0, _forParameter: P1): R;
    _accessibilityPopovers<R = unknown>(): R;
    accessibilitySetValue_forAttribute<R = void, P0 = unknown, P1 = unknown>(_accessibilitySetValue: P0, _forAttribute: P1): R;
    accessibilityIsAttributeSettable<R = boolean, P0 = unknown>(_accessibilityIsAttributeSettable: P0): R;
    accessibilityAttributeValue<R = unknown, P0 = unknown>(_accessibilityAttributeValue: P0): R;
    accessibilityAuditIssuesAttribute<R = unknown>(): R;
    accessibilityExtrasMenuBarAttribute<R = unknown>(): R;
    accessibilitySetEnhancedUserInterfaceAttribute<R = void, P0 = unknown>(_accessibilitySetEnhancedUserInterfaceAttribute: P0): R;
    accessibilityIsEnhancedUserInterfaceAttributeSettable<R = boolean>(): R;
    accessibilityEnhancedUserInterfaceAttribute<R = unknown>(): R;
    accessibilityIsFocusedUIElementAttributeSettable<R = boolean>(): R;
    accessibilityFocusedUIElementAttribute<R = unknown>(): R;
    accessibilityIsFocusedWindowAttributeSettable<R = boolean>(): R;
    accessibilityFocusedWindowAttribute<R = unknown>(): R;
    accessibilityIsMainWindowAttributeSettable<R = boolean>(): R;
    accessibilityMainWindowAttribute<R = unknown>(): R;
    accessibilitySetHiddenAttribute<R = void, P0 = unknown>(_accessibilitySetHiddenAttribute: P0): R;
    accessibilityIsHiddenAttributeSettable<R = boolean>(): R;
    accessibilityHiddenAttribute<R = unknown>(): R;
    accessibilitySetFrontmostAttribute<R = void, P0 = unknown>(_accessibilitySetFrontmostAttribute: P0): R;
    accessibilityIsFrontmostAttributeSettable<R = boolean>(): R;
    accessibilityFrontmostAttribute<R = unknown>(): R;
    accessibilityIsChildrenAttributeSettable<R = boolean>(): R;
    accessibilityChildrenAttribute<R = unknown>(): R;
    accessibilityChildrenInNavigationOrderAttribute<R = unknown>(): R;
    _accessibilityValueForAttribute_clientError<R = unknown, P0 = unknown, P1 = number>(__accessibilityValueForAttribute: P0, _clientError: P1): R;
    accessibilityIsWindowsAttributeSettable<R = boolean>(): R;
    accessibilityWindowsAttribute<R = unknown>(): R;
    accessibilityIsMenuBarAttributeSettable<R = boolean>(): R;
    accessibilityMenuBarAttribute<R = unknown>(): R;
    accessibilityIsTitleAttributeSettable<R = boolean>(): R;
    accessibilityTitleAttribute<R = unknown>(): R;
    accessibilityIsRoleDescriptionAttributeSettable<R = boolean>(): R;
    accessibilityRoleDescriptionAttribute<R = unknown>(): R;
    accessibilityIsRoleAttributeSettable<R = boolean>(): R;
    accessibilityRoleAttribute<R = unknown>(): R;
    accessibilityAttributeNames<R = unknown>(): R;
    accessibilityWorkaroundRemoveExtraWindow<R = void, P0 = unknown>(_accessibilityWorkaroundRemoveExtraWindow: P0): R;
    accessibilityWorkaroundAddExtraWindow<R = void, P0 = unknown>(_accessibilityWorkaroundAddExtraWindow: P0): R;
    accessibilityMayContainProtectedContent<R = boolean>(): R;
    accessibilitySetMayContainProtectedContent<R = void, P0 = boolean>(_accessibilitySetMayContainProtectedContent: P0): R;
    _accessibilityCompatibilityHitTest<R = unknown, P0 = CGPoint>(__accessibilityCompatibilityHitTest: P0): R;
    _accessibilityEventProcessed<R = void, P0 = unknown>(__accessibilityEventProcessed: P0): R;
    _accessibilityEventReceived<R = void, P0 = unknown>(__accessibilityEventReceived: P0): R;
    setAccessibilityEventProcessedNotificationEnabled<R = void, P0 = boolean>(_setAccessibilityEventProcessedNotificationEnabled: P0): R;
    isAccessibilityEventProcessedNotificationEnabled<R = boolean>(): R;
    isAccessibilityEventProcessedNotificationSupported<R = boolean>(): R;
    setAccessibilityMainThreadIdleNotificationEnabled<R = void, P0 = boolean>(_setAccessibilityMainThreadIdleNotificationEnabled: P0): R;
    isAccessibilityMainThreadIdleNotificationEnabled<R = boolean>(): R;
    isAccessibilityMainThreadIdleNotificationSupported<R = boolean>(): R;
    handleQuitScriptCommand<R = void, P0 = unknown>(_handleQuitScriptCommand: P0): R;
    handlePrintScriptCommand<R = void, P0 = unknown>(_handlePrintScriptCommand: P0): R;
    handleOpenScriptCommand<R = unknown, P0 = unknown>(_handleOpenScriptCommand: P0): R;
    _scriptingCount<R = number>(): R;
    _supportsGetValueWithUniqueIDForKey_perhapsByOverridingClass<R = number, P0 = unknown, P1 = unknown>(__supportsGetValueWithUniqueIDForKey: P0, _perhapsByOverridingClass: P1): R;
    _supportsGetValueWithNameForKey_perhapsByOverridingClass<R = number, P0 = unknown, P1 = unknown>(__supportsGetValueWithNameForKey: P0, _perhapsByOverridingClass: P1): R;
    replaceValueAtIndex_inPropertyWithKey_withValue<R = void, P0 = number, P1 = unknown, P2 = unknown>(_replaceValueAtIndex: P0, _inPropertyWithKey: P1, _withValue: P2): R;
    removeValueAtIndex_fromPropertyWithKey<R = void, P0 = number, P1 = unknown>(_removeValueAtIndex: P0, _fromPropertyWithKey: P1): R;
    insertValue_inPropertyWithKey<R = void, P0 = unknown, P1 = unknown>(_insertValue: P0, _inPropertyWithKey: P1): R;
    insertValue_atIndex_inPropertyWithKey<R = void, P0 = unknown, P1 = number, P2 = unknown>(_insertValue: P0, _atIndex: P1, _inPropertyWithKey: P2): R;
    valueWithUniqueID_inPropertyWithKey<R = unknown, P0 = unknown, P1 = unknown>(_valueWithUniqueID: P0, _inPropertyWithKey: P1): R;
    valueWithName_inPropertyWithKey<R = unknown, P0 = unknown, P1 = unknown>(_valueWithName: P0, _inPropertyWithKey: P1): R;
    valueAtIndex_inPropertyWithKey<R = unknown, P0 = number, P1 = unknown>(_valueAtIndex: P0, _inPropertyWithKey: P1): R;
    setValue_forKey<R = void, P0 = unknown, P1 = unknown>(_setValue: P0, _forKey: P1): R;
    valueForKey<R = unknown, P0 = unknown>(_valueForKey: P0): R;
    newScriptingObjectOfClass_forValueForKey_withContentsValue_properties<R = unknown, P0 = unknown, P1 = unknown, P2 = unknown, P3 = unknown>(_newScriptingObjectOfClass: P0, _forValueForKey: P1, _withContentsValue: P2, _properties: P3): R;
    copyScriptingValue_forKey_withProperties<R = unknown, P0 = unknown, P1 = unknown, P2 = unknown>(_copyScriptingValue: P0, _forKey: P1, _withProperties: P2): R;
    _delegate_handlesKey<R = boolean, P0 = unknown, P1 = unknown>(__delegate: P0, _handlesKey: P1): R;
    valueInOrderedWindowsWithUniqueID<R = unknown, P0 = number>(_valueInOrderedWindowsWithUniqueID: P0): R;
    _orderedWindowsWithPanels<R = unknown, P0 = boolean>(__orderedWindowsWithPanels: P0): R;
    _registerRequiredAEHandlers<R = void>(): R;
    _supportsOpenURLs<R = boolean>(): R;
    _handleCoreEvent_withReplyEvent<R = void, P0 = unknown, P1 = unknown>(__handleCoreEvent: P0, _withReplyEvent: P1): R;
    _extractOriginatingDisplayHintFromAppleEvent<R = number, P0 = unknown>(__extractOriginatingDisplayHintFromAppleEvent: P0): R;
    _handleTestEvent_withReplyEvent<R = void, P0 = unknown, P1 = unknown>(__handleTestEvent: P0, _withReplyEvent: P1): R;
    _handleSelfTestEvent<R = number, P0 = unknown>(__handleSelfTestEvent: P0): R;
    _handleAEQuit<R = number>(): R;
    _handleAEOpenContentsEvent_withReplyEvent<R = number, P0 = unknown, P1 = unknown>(__handleAEOpenContentsEvent: P0, _withReplyEvent: P1): R;
    _handleAEPrintDocumentsForURLs_withSettings_showPrintPanels<R = number, P0 = unknown, P1 = unknown, P2 = boolean>(__handleAEPrintDocumentsForURLs: P0, _withSettings: P1, _showPrintPanels: P2): R;
    _handleAEGetURLEvent<R = number, P0 = unknown>(__handleAEGetURLEvent: P0): R;
    _handleAECloudKitShareInvitationEvent<R = number, P0 = unknown>(__handleAECloudKitShareInvitationEvent: P0): R;
    _handleAEContinueUserActivityEvent<R = number, P0 = unknown>(__handleAEContinueUserActivityEvent: P0): R;
    _handleAEOpenDocumentsForURLs<R = number, P0 = unknown>(__handleAEOpenDocumentsForURLs: P0): R;
    _openURLs_withCompletionHandler<R = void, P0 = unknown, P1 = CDUnknownBlockType>(__openURLs: P0, _withCompletionHandler: P1): R;
    _resumeAppleEventWithSuspensionIDValue<R = void, P0 = unknown>(__resumeAppleEventWithSuspensionIDValue: P0): R;
    _forAEOpenDocumentsEvent_populateReplyEvent_withURLs_documents<R = void, P0 = unknown, P1 = unknown, P2 = unknown, P3 = unknown>(__forAEOpenDocumentsEvent: P0, _populateReplyEvent: P1, _withURLs: P2, _documents: P3): R;
    _handleAEReopen<R = void, P0 = unknown>(__handleAEReopen: P0): R;
    _handleAEOpenEvent<R = void, P0 = unknown>(__handleAEOpenEvent: P0): R;
    _requiresOpeningUntitledWindowAtLaunch<R = boolean>(): R;
    _reopenWindowsIfNecessaryWithAppleEvent_completionHandler<R = void, P0 = unknown, P1 = CDUnknownBlockType>(__reopenWindowsIfNecessaryWithAppleEvent: P0, _completionHandler: P1): R;
    _shouldRestoreWithFullFidelity<R = boolean>(): R;
    runModalForCarbonWindow<R = number, P0 = unknown>(_runModalForCarbonWindow: P0): R;
    _doModalLoopForCarbonWindow_peek<R = void, P0 = _NSModalSession, P1 = boolean>(__doModalLoopForCarbonWindow: P0, _peek: P1): R;
    orderFrontColorPanel<R = void, P0 = unknown>(_orderFrontColorPanel: P0): R;
    toggleTouchBarControlStripCustomizationPalette<R = void, P0 = unknown>(_toggleTouchBarControlStripCustomizationPalette: P0): R;
    _validateTouchBarCustomizationPaletteItem<R = boolean, P0 = unknown>(__validateTouchBarCustomizationPaletteItem: P0): R;
    orderFrontPreferencesPanel<R = void, P0 = unknown>(_orderFrontPreferencesPanel: P0): R;
    _handleCursorRectEvent<R = boolean, P0 = unknown>(__handleCursorRectEvent: P0): R;
    areCursorRectsEnabled<R = boolean>(): R;
    enableCursorRects<R = void>(): R;
    disableCursorRects<R = void>(): R;
    _setCursorForCurrentMouseLocation<R = void>(): R;
    _restoreCursor<R = unknown>(): R;
    _cursorRectCursor<R = unknown>(): R;
    _resetCursorStack<R = void>(): R;
    orderFrontFontPanel<R = void, P0 = unknown>(_orderFrontFontPanel: P0): R;
    showHelp<R = void, P0 = unknown>(_showHelp: P0): R;
    activateContextHelpMode<R = void, P0 = unknown>(_activateContextHelpMode: P0): R;
    _invalidateWindowAppearances<R = void>(): R;
    _refreshSetAppearance<R = void>(): R;
    _invalidateEffectiveAppearance<R = void>(): R;
    _observeValueForSystemAppearanceKeyPath_ofObject_change<R = void, P0 = unknown, P1 = unknown, P2 = unknown>(__observeValueForSystemAppearanceKeyPath: P0, _ofObject: P1, _change: P2): R;
    _unregisterForAppearanceNotifications<R = void>(): R;
    _registerForAppearanceNotifications<R = void>(): R;
    runPageLayout<R = void, P0 = unknown>(_runPageLayout: P0): R;
    _eventFirstResponderChainDescription<R = unknown>(): R;
    unregisterServiceProviderNamed<R = void, P0 = unknown>(_unregisterServiceProviderNamed: P0): R;
    registerServiceProvider_withName<R = void, P0 = unknown, P1 = unknown>(_registerServiceProvider: P0, _withName: P1): R;
    _addDebugMenuIfNeeded<R = void>(): R;
    _debugMenu<R = unknown>(): R;
    _modalSession_sendEvent<R = void, P0 = _NSModalSession, P1 = unknown>(__modalSession: P0, _sendEvent: P1): R;
    _isSuppressGestureSubMaskChangesEnabled<R = boolean>(): R;
    _setSupressGestureSubMaskChangesEnabled<R = void, P0 = boolean>(__setSupressGestureSubMaskChangesEnabled: P0): R;
    _setGestureEventMask<R = void, P0 = number>(__setGestureEventMask: P0): R;
    _gestureEventMask<R = number>(): R;
    _lastEventRecordTime<R = number>(): R;
    _setCurrentEvent<R = void, P0 = unknown>(__setCurrentEvent: P0): R;
    _handleSymbolicHotKey<R = boolean, P0 = unknown>(__handleSymbolicHotKey: P0): R;
    _handleKeyEquivalent<R = boolean, P0 = unknown>(__handleKeyEquivalent: P0): R;
    _nextEventMatchingEventMask_untilDate_inMode_dequeue<R = unknown, P0 = number, P1 = unknown, P2 = unknown, P3 = boolean>(__nextEventMatchingEventMask: P0, _untilDate: P1, _inMode: P2, _dequeue: P3): R;
    nextEventMatchingMask_untilDate_inMode_dequeue<R = unknown, P0 = number, P1 = unknown, P2 = unknown, P3 = boolean>(_nextEventMatchingMask: P0, _untilDate: P1, _inMode: P2, _dequeue: P3): R;
    postEvent_atStart<R = void, P0 = unknown, P1 = boolean>(_postEvent: P0, _atStart: P1): R;
    discardEventsMatchingMask_beforeEvent<R = void, P0 = number, P1 = unknown>(_discardEventsMatchingMask: P0, _beforeEvent: P1): R;
    sendEvent<R = void, P0 = unknown>(_sendEvent: P0): R;
    _removeKeyOverrideWindow<R = void, P0 = unknown>(__removeKeyOverrideWindow: P0): R;
    _addKeyOverrideWindow<R = void, P0 = unknown>(__addKeyOverrideWindow: P0): R;
    sendAction_to_from<R = boolean, P0 = string, P1 = unknown, P2 = unknown>(_sendAction: P0, _to: P1, _from: P2): R;
    targetForAction_to_from<R = unknown, P0 = string, P1 = unknown, P2 = unknown>(_targetForAction: P0, _to: P1, _from: P2): R;
    targetForAction<R = unknown, P0 = string>(_targetForAction: P0): R;
    orderFrontStandardAboutPanelWithOptions<R = void, P0 = unknown>(_orderFrontStandardAboutPanelWithOptions: P0): R;
    orderFrontStandardAboutPanel<R = void, P0 = unknown>(_orderFrontStandardAboutPanel: P0): R;
    resetAutomaticCustomizeTouchBarMenuItemEnabled<R = void>(): R;
    _setAutomaticCustomizeTouchBarMenuItemEnabled<R = void, P0 = unknown>(__setAutomaticCustomizeTouchBarMenuItemEnabled: P0): R;
    toggleTouchBarCustomizationPalette<R = void, P0 = unknown>(_toggleTouchBarCustomizationPalette: P0): R;
    _responsibleDelegateForSelector<R = unknown, P0 = string>(__responsibleDelegateForSelector: P0): R;
    setAppleMenu<R = void, P0 = unknown>(_setAppleMenu: P0): R;
    _restoreMiniaturizedWindow<R = void>(): R;
    _makeModalWindowsPerform<R = void, P0 = string>(__makeModalWindowsPerform: P0): R;
    _isModalUsingCache<R = boolean, P0 = unknown>(__isModalUsingCache: P0): R;
    _setModalInCache_forWindow<R = void, P0 = boolean, P1 = unknown>(__setModalInCache: P0, _forWindow: P1): R;
    _makeHODWindowsPerform<R = void, P0 = string>(__makeHODWindowsPerform: P0): R;
    _setHidesOnDeactivateInCache_forWindow<R = void, P0 = boolean, P1 = unknown>(__setHidesOnDeactivateInCache: P0, _forWindow: P1): R;
    _isVisibleUsingCache<R = boolean, P0 = unknown>(__isVisibleUsingCache: P0): R;
    _removeWindowFromCache<R = void, P0 = unknown>(__removeWindowFromCache: P0): R;
    _setVisibleInCache_forWindow<R = void, P0 = boolean, P1 = unknown>(__setVisibleInCache: P0, _forWindow: P1): R;
    _scheduleCheckForTerminateAfterLastWindowClosed<R = void>(): R;
    _checkForTerminateAfterLastWindowClosed_saveWindows<R = void, P0 = unknown, P1 = boolean>(__checkForTerminateAfterLastWindowClosed: P0, _saveWindows: P1): R;
    _appHasNonMiniaturizedWindow<R = boolean>(): R;
    _appHasOpenNSWindow<R = boolean>(): R;
    _appHasOpenNSWindowOrPanel<R = boolean>(): R;
    _appHasVisibleWindowOrPanel<R = boolean>(): R;
    _setCacheWindowNum_forWindow<R = void, P0 = number, P1 = unknown>(__setCacheWindowNum: P0, _forWindow: P1): R;
    _updateWindowsUsingCache<R = void>(): R;
    _findWindowUsingContextID<R = unknown, P0 = number>(__findWindowUsingContextID: P0): R;
    _findWindowUsingCache<R = unknown, P0 = number>(__findWindowUsingCache: P0): R;
    _getWindowData_add<R = unknown, P0 = unknown, P1 = boolean>(__getWindowData: P0, _add: P1): R;
    _invalidateWindowListForCycleIfNeededForWindow<R = void, P0 = unknown>(__invalidateWindowListForCycleIfNeededForWindow: P0): R;
    _unlockWindowListForCycle<R = void>(): R;
    _getLockedWindowListForCycle<R = unknown>(): R;
    _lockOrUnlockWindowCycleList<R = boolean, P0 = boolean>(__lockOrUnlockWindowCycleList: P0): R;
    _fillSpellCheckerPopupButton<R = boolean, P0 = unknown>(__fillSpellCheckerPopupButton: P0): R;
    _launchSpellChecker<R = boolean, P0 = number>(__launchSpellChecker: P0): R;
    _launchSpellChecker_error<R = boolean, P0 = number, P1 = unknown>(__launchSpellChecker: P0, _error: P1): R;
    _rebuildOrUpdateServicesMenu<R = void, P0 = boolean>(__rebuildOrUpdateServicesMenu: P0): R;
    registerServicesMenuSendTypes_returnTypes<R = void, P0 = unknown, P1 = unknown>(_registerServicesMenuSendTypes: P0, _returnTypes: P1): R;
    setServicesMenu<R = void, P0 = unknown>(_setServicesMenu: P0): R;
    servicesMenu<R = unknown>(): R;
    removeWindowsItem<R = void, P0 = unknown>(_removeWindowsItem: P0): R;
    addWindowsItem_title_filename<R = void, P0 = unknown, P1 = unknown, P2 = boolean>(_addWindowsItem: P0, _title: P1, _filename: P2): R;
    updateWindowsItem<R = void, P0 = unknown>(_updateWindowsItem: P0): R;
    changeWindowsItem_title_filename<R = void, P0 = unknown, P1 = unknown, P2 = boolean>(_changeWindowsItem: P0, _title: P1, _filename: P2): R;
    alternateArrangeInFront<R = void, P0 = unknown>(_alternateArrangeInFront: P0): R;
    arrangeInFront<R = void, P0 = unknown>(_arrangeInFront: P0): R;
    zoomAll<R = void, P0 = unknown>(_zoomAll: P0): R;
    closeAll<R = void, P0 = unknown>(_closeAll: P0): R;
    miniaturizeAll<R = void, P0 = unknown>(_miniaturizeAll: P0): R;
    _addWindowsMenu_enabled<R = void, P0 = __CFArray, P1 = boolean>(__addWindowsMenu: P0, _enabled: P1): R;
    _displayProgressNotification_isIndeterminate<R = void, P0 = number, P1 = boolean>(__displayProgressNotification: P0, _isIndeterminate: P1): R;
    _displayStatusNotification_title_options<R = void, P0 = unknown, P1 = unknown, P2 = unknown>(__displayStatusNotification: P0, _title: P1, _options: P2): R;
    setDefaultHelpBookSearchEnabled<R = void, P0 = boolean>(_setDefaultHelpBookSearchEnabled: P0): R;
    isDefaultHelpBookSearchEnabled<R = boolean>(): R;
    searchString_inUserInterfaceItemString_searchRange_foundRange<R = boolean, P0 = unknown, P1 = unknown, P2 = _NSRange, P3 = _NSRange>(_searchString: P0, _inUserInterfaceItemString: P1, _searchRange: P2, _foundRange: P3): R;
    unregisterUserInterfaceItemSearchHandler<R = void, P0 = unknown>(_unregisterUserInterfaceItemSearchHandler: P0): R;
    registerUserInterfaceItemSearchHandler<R = void, P0 = unknown>(_registerUserInterfaceItemSearchHandler: P0): R;
    _openFeedbackAssistant<R = void, P0 = unknown>(__openFeedbackAssistant: P0): R;
    _addFeedbackMenuItemIfNeeded<R = void>(): R;
    _feedbackMenuTitle<R = unknown>(): R;
    _feedbackMenuAppName<R = unknown>(): R;
    _shouldShowFeedbackMenuItem<R = boolean>(): R;
    _feedbackURL<R = unknown>(): R;
    _enableRestorableStateWriting<R = void>(): R;
    _disableRestorableStateWriting<R = void>(): R;
    _stateRestorationExtensionCounter<R = number>(): R;
    completeStateRestoration<R = void>(): R;
    extendStateRestoration<R = void>(): R;
    _disableRelaunchOnLoginIfNotLaunchedByLaunchServicesOrBlacklisted<R = void>(): R;
    enableRelaunchOnLogin<R = void>(): R;
    disableRelaunchOnLogin<R = void>(): R;
    _invalidateRestorableStateOfContents<R = void>(): R;
    _shouldRecordPersistentState<R = boolean>(): R;
    _setContentsHaveInvalidRestorableState<R = void, P0 = boolean>(__setContentsHaveInvalidRestorableState: P0): R;
    _contentsHaveInvalidRestorableState<R = boolean>(): R;
    _cancelGestureRecognizers<R = void, P0 = unknown>(__cancelGestureRecognizers: P0): R;
    _kitAppearance<R = unknown>(): R;
    _restoreWindowWithRestoration_completionHandler<R = void, P0 = unknown, P1 = CDUnknownBlockType>(__restoreWindowWithRestoration: P0, _completionHandler: P1): R;
    _restoreGlobalStateWithRestoration<R = void, P0 = unknown>(__restoreGlobalStateWithRestoration: P0): R;
    restoreWindowWithIdentifier_state_completionHandler<R = boolean, P0 = unknown, P1 = unknown, P2 = CDUnknownBlockType>(_restoreWindowWithIdentifier: P0, _state: P1, _completionHandler: P2): R;
    _tryRestorationHeuristicsForWindowWithIdentifier_state<R = unknown, P0 = unknown, P1 = unknown>(__tryRestorationHeuristicsForWindowWithIdentifier: P0, _state: P1): R;
    _registerForDisplayChangedNotifications<R = void>(): R;
    _reactToDisplayProfileChangedNotification<R = void>(): R;
    _reactToDockChanged<R = void>(): R;
    _reactToPresentationChanged<R = void>(): R;
    _reactToDisplayChangedEvent<R = void, P0 = number>(__reactToDisplayChangedEvent: P0): R;
    _reactToExtendedDynamicRangeChangeNotification<R = void>(): R;
    _reactToAcceleratorChangedNotification<R = void>(): R;
    _reactToDisplayChangedNotification<R = void>(): R;
    _reactToScreenInvalidationImmediately<R = void, P0 = boolean>(__reactToScreenInvalidationImmediately: P0): R;
    _reactToScreenInvalidation<R = void, P0 = boolean>(__reactToScreenInvalidation: P0): R;
    _prepareForPossibleScreenInvalidation<R = void, P0 = boolean>(__prepareForPossibleScreenInvalidation: P0): R;
    _finishHandlingDisplayReconfig<R = boolean>(): R;
    _isHandlingDisplayReconfigThatWillRepositionWindows<R = boolean>(): R;
    _startHandlingDisplayReconfig<R = boolean, P0 = boolean>(__startHandlingDisplayReconfig: P0): R;
    _updateCanQuitQuietlyAndSafely<R = void>(): R;
    _debugCanQuietSafeQuit<R = unknown>(): R;
    _canQuitQuietlyAndSafelyWithOptionalExplanation<R = boolean, P0 = unknown>(__canQuitQuietlyAndSafelyWithOptionalExplanation: P0): R;
    _canAutoQuitQuietlyAndSafelyWithOptionalExplanation<R = boolean, P0 = unknown>(__canAutoQuitQuietlyAndSafelyWithOptionalExplanation: P0): R;
    _globalCanQuietAndSafeQuit<R = boolean>(): R;
    accessibilityParent<R = unknown>(): R;
    setAccessibilityParent<R = void, P0 = unknown>(_v: P0): R;
    accessibilityFrame<R = CGRect>(): R;
    setAccessibilityFrame<R = void, P0 = CGRect>(_v: P0): R;
    currentSystemPresentationOptions<R = number>(): R;
    presentationOptions<R = number>(): R;
    setPresentationOptions<R = void, P0 = number>(_v: P0): R;
    helpMenu<R = NSMenu>(): R;
    setHelpMenu<R = void, P0 = NSMenu>(_v: P0): R;
    mainMenu<R = NSMenu>(): R;
    setMainMenu<R = void, P0 = NSMenu>(_v: P0): R;
    windows<R = NSArray>(): R;
    dockTile<R = NSDockTile>(): R;
    applicationIconImage<R = NSImage>(): R;
    setApplicationIconImage<R = void, P0 = NSImage>(_v: P0): R;
    modalWindow<R = NSWindow>(): R;
    running<R = boolean>(): R;
    hidden<R = boolean>(): R;
    active<R = boolean>(): R;
    keyWindow<R = NSWindow>(): R;
    mainWindow<R = NSWindow>(): R;
    delegate<R = NSApplicationDelegate>(): R;
    setDelegate<R = void, P0 = NSApplicationDelegate>(_v: P0): R;
    occlusionState<R = number>(): R;
    enabledRemoteNotificationTypes<R = number>(): R;
    registeredForRemoteNotifications<R = boolean>(): R;
    touchBar<R = NSTouchBar>(): R;
    orderedWindows<R = NSArray>(): R;
    orderedDocuments<R = NSArray>(): R;
    effectiveAppearance<R = NSAppearance>(): R;
    appearance<R = NSAppearance>(): R;
    setAppearance<R = void, P0 = NSAppearance>(_v: P0): R;
    servicesProvider<R = unknown>(): R;
    setServicesProvider<R = void, P0 = unknown>(_v: P0): R;
    currentEvent<R = NSEvent>(): R;
    automaticCustomizeTouchBarMenuItemEnabled<R = boolean>(): R;
    setAutomaticCustomizeTouchBarMenuItemEnabled<R = void, P0 = boolean>(_v: P0): R;
    windowsMenu<R = NSMenu>(): R;
    setWindowsMenu<R = void, P0 = NSMenu>(_v: P0): R;
    _effectiveAppearanceParent<R = NSAppearanceCustomization>(): R;
    accessibilityActivationPoint<R = CGPoint>(): R;
    setAccessibilityActivationPoint<R = void, P0 = CGPoint>(_v: P0): R;
    accessibilityAllowedValues<R = NSArray>(): R;
    setAccessibilityAllowedValues<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityAlternateUIVisible<R = boolean>(): R;
    setAccessibilityAlternateUIVisible<R = void, P0 = boolean>(_v: P0): R;
    accessibilityApplicationFocusedUIElement<R = unknown>(): R;
    setAccessibilityApplicationFocusedUIElement<R = void, P0 = unknown>(_v: P0): R;
    accessibilityCancelButton<R = unknown>(): R;
    setAccessibilityCancelButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityChildren<R = NSArray>(): R;
    setAccessibilityChildren<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityChildrenInNavigationOrder<R = NSArray>(): R;
    setAccessibilityChildrenInNavigationOrder<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityClearButton<R = unknown>(): R;
    setAccessibilityClearButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityCloseButton<R = unknown>(): R;
    setAccessibilityCloseButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityColumnCount<R = number>(): R;
    setAccessibilityColumnCount<R = void, P0 = number>(_v: P0): R;
    accessibilityColumnHeaderUIElements<R = NSArray>(): R;
    setAccessibilityColumnHeaderUIElements<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityColumnIndexRange<R = _NSRange>(): R;
    setAccessibilityColumnIndexRange<R = void, P0 = _NSRange>(_v: P0): R;
    accessibilityColumnTitles<R = NSArray>(): R;
    setAccessibilityColumnTitles<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityColumns<R = NSArray>(): R;
    setAccessibilityColumns<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityContents<R = NSArray>(): R;
    setAccessibilityContents<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityCriticalValue<R = unknown>(): R;
    setAccessibilityCriticalValue<R = void, P0 = unknown>(_v: P0): R;
    accessibilityCustomActions<R = NSArray>(): R;
    setAccessibilityCustomActions<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityCustomRotors<R = NSArray>(): R;
    setAccessibilityCustomRotors<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityDecrementButton<R = unknown>(): R;
    setAccessibilityDecrementButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityDefaultButton<R = unknown>(): R;
    setAccessibilityDefaultButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityDisclosed<R = boolean>(): R;
    setAccessibilityDisclosed<R = void, P0 = boolean>(_v: P0): R;
    accessibilityDisclosedByRow<R = unknown>(): R;
    setAccessibilityDisclosedByRow<R = void, P0 = unknown>(_v: P0): R;
    accessibilityDisclosedRows<R = unknown>(): R;
    setAccessibilityDisclosedRows<R = void, P0 = unknown>(_v: P0): R;
    accessibilityDisclosureLevel<R = number>(): R;
    setAccessibilityDisclosureLevel<R = void, P0 = number>(_v: P0): R;
    accessibilityDocument<R = NSString>(): R;
    setAccessibilityDocument<R = void, P0 = NSString>(_v: P0): R;
    accessibilityEdited<R = boolean>(): R;
    setAccessibilityEdited<R = void, P0 = boolean>(_v: P0): R;
    accessibilityElement<R = boolean>(): R;
    setAccessibilityElement<R = void, P0 = boolean>(_v: P0): R;
    accessibilityEnabled<R = boolean>(): R;
    setAccessibilityEnabled<R = void, P0 = boolean>(_v: P0): R;
    accessibilityExpanded<R = boolean>(): R;
    setAccessibilityExpanded<R = void, P0 = boolean>(_v: P0): R;
    accessibilityExtrasMenuBar<R = unknown>(): R;
    setAccessibilityExtrasMenuBar<R = void, P0 = unknown>(_v: P0): R;
    accessibilityFilename<R = NSString>(): R;
    setAccessibilityFilename<R = void, P0 = NSString>(_v: P0): R;
    accessibilityFocused<R = boolean>(): R;
    setAccessibilityFocused<R = void, P0 = boolean>(_v: P0): R;
    accessibilityFocusedWindow<R = unknown>(): R;
    setAccessibilityFocusedWindow<R = void, P0 = unknown>(_v: P0): R;
    accessibilityFrontmost<R = boolean>(): R;
    setAccessibilityFrontmost<R = void, P0 = boolean>(_v: P0): R;
    accessibilityFullScreenButton<R = unknown>(): R;
    setAccessibilityFullScreenButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityGrowArea<R = unknown>(): R;
    setAccessibilityGrowArea<R = void, P0 = unknown>(_v: P0): R;
    accessibilityHandles<R = NSArray>(): R;
    setAccessibilityHandles<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityHeader<R = unknown>(): R;
    setAccessibilityHeader<R = void, P0 = unknown>(_v: P0): R;
    accessibilityHelp<R = NSString>(): R;
    setAccessibilityHelp<R = void, P0 = NSString>(_v: P0): R;
    accessibilityHidden<R = boolean>(): R;
    setAccessibilityHidden<R = void, P0 = boolean>(_v: P0): R;
    accessibilityHorizontalScrollBar<R = unknown>(): R;
    setAccessibilityHorizontalScrollBar<R = void, P0 = unknown>(_v: P0): R;
    accessibilityHorizontalUnitDescription<R = NSString>(): R;
    setAccessibilityHorizontalUnitDescription<R = void, P0 = NSString>(_v: P0): R;
    accessibilityHorizontalUnits<R = number>(): R;
    setAccessibilityHorizontalUnits<R = void, P0 = number>(_v: P0): R;
    accessibilityIdentifier<R = NSString>(): R;
    setAccessibilityIdentifier<R = void, P0 = NSString>(_v: P0): R;
    accessibilityIncrementButton<R = unknown>(): R;
    setAccessibilityIncrementButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityIndex<R = number>(): R;
    setAccessibilityIndex<R = void, P0 = number>(_v: P0): R;
    accessibilityInsertionPointLineNumber<R = number>(): R;
    setAccessibilityInsertionPointLineNumber<R = void, P0 = number>(_v: P0): R;
    accessibilityLabel<R = NSString>(): R;
    setAccessibilityLabel<R = void, P0 = NSString>(_v: P0): R;
    accessibilityLabelUIElements<R = NSArray>(): R;
    setAccessibilityLabelUIElements<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityLabelValue<R = number>(): R;
    setAccessibilityLabelValue<R = void, P0 = number>(_v: P0): R;
    accessibilityLinkedUIElements<R = NSArray>(): R;
    setAccessibilityLinkedUIElements<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityMain<R = boolean>(): R;
    setAccessibilityMain<R = void, P0 = boolean>(_v: P0): R;
    accessibilityMainWindow<R = unknown>(): R;
    setAccessibilityMainWindow<R = void, P0 = unknown>(_v: P0): R;
    accessibilityMarkerGroupUIElement<R = unknown>(): R;
    setAccessibilityMarkerGroupUIElement<R = void, P0 = unknown>(_v: P0): R;
    accessibilityMarkerTypeDescription<R = NSString>(): R;
    setAccessibilityMarkerTypeDescription<R = void, P0 = NSString>(_v: P0): R;
    accessibilityMarkerUIElements<R = NSArray>(): R;
    setAccessibilityMarkerUIElements<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityMarkerValues<R = unknown>(): R;
    setAccessibilityMarkerValues<R = void, P0 = unknown>(_v: P0): R;
    accessibilityMaxValue<R = unknown>(): R;
    setAccessibilityMaxValue<R = void, P0 = unknown>(_v: P0): R;
    accessibilityMenuBar<R = unknown>(): R;
    setAccessibilityMenuBar<R = void, P0 = unknown>(_v: P0): R;
    accessibilityMinValue<R = unknown>(): R;
    setAccessibilityMinValue<R = void, P0 = unknown>(_v: P0): R;
    accessibilityMinimizeButton<R = unknown>(): R;
    setAccessibilityMinimizeButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityMinimized<R = boolean>(): R;
    setAccessibilityMinimized<R = void, P0 = boolean>(_v: P0): R;
    accessibilityModal<R = boolean>(): R;
    setAccessibilityModal<R = void, P0 = boolean>(_v: P0): R;
    accessibilityNextContents<R = NSArray>(): R;
    setAccessibilityNextContents<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityNumberOfCharacters<R = number>(): R;
    setAccessibilityNumberOfCharacters<R = void, P0 = number>(_v: P0): R;
    accessibilityOrderedByRow<R = boolean>(): R;
    setAccessibilityOrderedByRow<R = void, P0 = boolean>(_v: P0): R;
    accessibilityOrientation<R = number>(): R;
    setAccessibilityOrientation<R = void, P0 = number>(_v: P0): R;
    accessibilityOverflowButton<R = unknown>(): R;
    setAccessibilityOverflowButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityPlaceholderValue<R = NSString>(): R;
    setAccessibilityPlaceholderValue<R = void, P0 = NSString>(_v: P0): R;
    accessibilityPreviousContents<R = NSArray>(): R;
    setAccessibilityPreviousContents<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityProtectedContent<R = boolean>(): R;
    setAccessibilityProtectedContent<R = void, P0 = boolean>(_v: P0): R;
    accessibilityProxy<R = unknown>(): R;
    setAccessibilityProxy<R = void, P0 = unknown>(_v: P0): R;
    accessibilityRequired<R = boolean>(): R;
    setAccessibilityRequired<R = void, P0 = boolean>(_v: P0): R;
    accessibilityRole<R = NSString>(): R;
    setAccessibilityRole<R = void, P0 = NSString>(_v: P0): R;
    accessibilityRoleDescription<R = NSString>(): R;
    setAccessibilityRoleDescription<R = void, P0 = NSString>(_v: P0): R;
    accessibilityRowCount<R = number>(): R;
    setAccessibilityRowCount<R = void, P0 = number>(_v: P0): R;
    accessibilityRowHeaderUIElements<R = NSArray>(): R;
    setAccessibilityRowHeaderUIElements<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityRowIndexRange<R = _NSRange>(): R;
    setAccessibilityRowIndexRange<R = void, P0 = _NSRange>(_v: P0): R;
    accessibilityRows<R = NSArray>(): R;
    setAccessibilityRows<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityRulerMarkerType<R = number>(): R;
    setAccessibilityRulerMarkerType<R = void, P0 = number>(_v: P0): R;
    accessibilitySearchButton<R = unknown>(): R;
    setAccessibilitySearchButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilitySearchMenu<R = unknown>(): R;
    setAccessibilitySearchMenu<R = void, P0 = unknown>(_v: P0): R;
    accessibilitySelected<R = boolean>(): R;
    setAccessibilitySelected<R = void, P0 = boolean>(_v: P0): R;
    accessibilitySelectedCells<R = NSArray>(): R;
    setAccessibilitySelectedCells<R = void, P0 = NSArray>(_v: P0): R;
    accessibilitySelectedChildren<R = NSArray>(): R;
    setAccessibilitySelectedChildren<R = void, P0 = NSArray>(_v: P0): R;
    accessibilitySelectedColumns<R = NSArray>(): R;
    setAccessibilitySelectedColumns<R = void, P0 = NSArray>(_v: P0): R;
    accessibilitySelectedRows<R = NSArray>(): R;
    setAccessibilitySelectedRows<R = void, P0 = NSArray>(_v: P0): R;
    accessibilitySelectedText<R = NSString>(): R;
    setAccessibilitySelectedText<R = void, P0 = NSString>(_v: P0): R;
    accessibilitySelectedTextRange<R = _NSRange>(): R;
    setAccessibilitySelectedTextRange<R = void, P0 = _NSRange>(_v: P0): R;
    accessibilitySelectedTextRanges<R = NSArray>(): R;
    setAccessibilitySelectedTextRanges<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityServesAsTitleForUIElements<R = NSArray>(): R;
    setAccessibilityServesAsTitleForUIElements<R = void, P0 = NSArray>(_v: P0): R;
    accessibilitySharedCharacterRange<R = _NSRange>(): R;
    setAccessibilitySharedCharacterRange<R = void, P0 = _NSRange>(_v: P0): R;
    accessibilitySharedFocusElements<R = NSArray>(): R;
    setAccessibilitySharedFocusElements<R = void, P0 = NSArray>(_v: P0): R;
    accessibilitySharedTextUIElements<R = NSArray>(): R;
    setAccessibilitySharedTextUIElements<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityShownMenu<R = unknown>(): R;
    setAccessibilityShownMenu<R = void, P0 = unknown>(_v: P0): R;
    accessibilitySortDirection<R = number>(): R;
    setAccessibilitySortDirection<R = void, P0 = number>(_v: P0): R;
    accessibilitySplitters<R = NSArray>(): R;
    setAccessibilitySplitters<R = void, P0 = NSArray>(_v: P0): R;
    accessibilitySubrole<R = NSString>(): R;
    setAccessibilitySubrole<R = void, P0 = NSString>(_v: P0): R;
    accessibilityTabs<R = NSArray>(): R;
    setAccessibilityTabs<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityTitle<R = NSString>(): R;
    setAccessibilityTitle<R = void, P0 = NSString>(_v: P0): R;
    accessibilityTitleUIElement<R = unknown>(): R;
    setAccessibilityTitleUIElement<R = void, P0 = unknown>(_v: P0): R;
    accessibilityToolbarButton<R = unknown>(): R;
    setAccessibilityToolbarButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityTopLevelUIElement<R = unknown>(): R;
    setAccessibilityTopLevelUIElement<R = void, P0 = unknown>(_v: P0): R;
    accessibilityURL<R = NSURL>(): R;
    setAccessibilityURL<R = void, P0 = NSURL>(_v: P0): R;
    accessibilityUnitDescription<R = NSString>(): R;
    setAccessibilityUnitDescription<R = void, P0 = NSString>(_v: P0): R;
    accessibilityUnits<R = number>(): R;
    setAccessibilityUnits<R = void, P0 = number>(_v: P0): R;
    accessibilityValue<R = unknown>(): R;
    setAccessibilityValue<R = void, P0 = unknown>(_v: P0): R;
    accessibilityValueDescription<R = NSString>(): R;
    setAccessibilityValueDescription<R = void, P0 = NSString>(_v: P0): R;
    accessibilityVerticalScrollBar<R = unknown>(): R;
    setAccessibilityVerticalScrollBar<R = void, P0 = unknown>(_v: P0): R;
    accessibilityVerticalUnitDescription<R = NSString>(): R;
    setAccessibilityVerticalUnitDescription<R = void, P0 = NSString>(_v: P0): R;
    accessibilityVerticalUnits<R = number>(): R;
    setAccessibilityVerticalUnits<R = void, P0 = number>(_v: P0): R;
    accessibilityVisibleCells<R = NSArray>(): R;
    setAccessibilityVisibleCells<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityVisibleCharacterRange<R = _NSRange>(): R;
    setAccessibilityVisibleCharacterRange<R = void, P0 = _NSRange>(_v: P0): R;
    accessibilityVisibleChildren<R = NSArray>(): R;
    setAccessibilityVisibleChildren<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityVisibleColumns<R = NSArray>(): R;
    setAccessibilityVisibleColumns<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityVisibleRows<R = NSArray>(): R;
    setAccessibilityVisibleRows<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityWarningValue<R = unknown>(): R;
    setAccessibilityWarningValue<R = void, P0 = unknown>(_v: P0): R;
    accessibilityWindow<R = unknown>(): R;
    setAccessibilityWindow<R = void, P0 = unknown>(_v: P0): R;
    accessibilityWindows<R = NSArray>(): R;
    setAccessibilityWindows<R = void, P0 = NSArray>(_v: P0): R;
    accessibilityZoomButton<R = unknown>(): R;
    setAccessibilityZoomButton<R = void, P0 = unknown>(_v: P0): R;
    debugDescription<R = NSString>(): R;
    description<R = NSString>(): R;
    hash<R = number>(): R;
    superclass<R = unknown>(): R;
    // + NSApplication(CHApplicationAdditions):
    isActiveApplication<R = boolean>(): R;
    applicationBuild<R = unknown>(): R;
    applicationVersion<R = unknown>(): R;
    applicationName<R = unknown>(): R;
  }
  namespace classes {
    export interface NSApplication<T = any> extends NSResponder, NSAppearanceCustomizationProtocol, NSTouchBarProviderContainerProtocol, NSAppearanceCustomizationInternalProtocol, NSUserInterfaceValidationsProtocol, NSMenuItemValidationProtocol, NSAccessibilityElementProtocol, NSAccessibilityProtocol {
      alloc<R = NSApplication>(): R;
      new: <R = NSApplication>() => R;
      _resetCurrentDeferredActivation<R = void>(): R;
      _isCurrentActivationDeferred<R = boolean>(): R;
      _startDrawingThread<R = void, P0 = unknown>(__startDrawingThread: P0): R;
      detachDrawingThread_toTarget_withObject<R = void, P0 = string, P1 = unknown, P2 = unknown>(_detachDrawingThread: P0, _toTarget: P1, _withObject: P2): R;
      _initializeSharedApplicationForCarbonAppIfNecessary<R = void>(): R;
      sharedApplication<R = unknown>(): R;
      _preventDockConnections<R = void>(): R;
      _accessibilityInitialize<R = void>(): R;
      _userLoggedOut<R = void>(): R;
      load<R = void>(): R;
      _initializeRegisteredDefaults<R = void>(): R;
      automaticallyNotifiesObserversForKey<R = boolean, P0 = unknown>(_automaticallyNotifiesObserversForKey: P0): R;
      _urlsWithWithPathOrPaths_itWasPaths<R = unknown, P0 = unknown, P1 = string>(__urlsWithWithPathOrPaths: P0, _itWasPaths: P1): R;
      _URLsWithEvent<R = unknown, P0 = unknown>(__URLsWithEvent: P0): R;
      _fileURLsWithEvent<R = unknown, P0 = unknown>(__fileURLsWithEvent: P0): R;
      _logicalURLsForRawURLs_event<R = unknown, P0 = unknown, P1 = unknown>(__logicalURLsForRawURLs: P0, _event: P1): R;
      willRestoreState<R = boolean>(): R;
      // + NSApplication(CHApplicationAdditions):
      
    }
  }
}

declare const NSApplication: cocoa.classes.NSApplication;
