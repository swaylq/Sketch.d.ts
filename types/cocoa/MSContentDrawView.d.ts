/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface MSContentDrawView<T = any> extends cocoa.NSView, cocoa.MSOverlayRenderingDelegateProtocol, cocoa.MSEventHandlerManagerDelegateProtocol, cocoa.MSTiledRendererHostViewProtocol {
    cxx_destruct<R = void>(): R;
    zoomPoint<R = cocoa.CGPoint, P0 = cocoa.CGPoint>(_zoomPoint: P0): R;
    convertSizeToPage<R = cocoa.CGSize, P0 = cocoa.CGSize>(_convertSizeToPage: P0): R;
    convertPointFromPage<R = cocoa.CGPoint, P0 = cocoa.CGPoint>(_convertPointFromPage: P0): R;
    convertPoint_toLayer<R = cocoa.CGPoint, P0 = cocoa.CGPoint, P1 = unknown>(_convertPoint: P0, _toLayer: P1): R;
    layerPositionPossiblyChanged<R = void>(): R;
    ignoreNextKeyDownEventUntilModifiersChange<R = void>(): R;
    returnToDefaultHandlerIfNeededForResize<R = void>(): R;
    windowDidResize<R = void, P0 = unknown>(_windowDidResize: P0): R;
    setFrame<R = void, P0 = cocoa.CGRect>(_setFrame: P0): R;
    selectToolbarItemWithIdentifier<R = void, P0 = unknown>(_selectToolbarItemWithIdentifier: P0): R;
    refreshSidebarWithMask<R = void, P0 = number>(_refreshSidebarWithMask: P0): R;
    pages<R = unknown>(): R;
    currentPage<R = unknown>(): R;
    contentDrawView<R = unknown>(): R;
    selectedLayers<R = unknown>(): R;
    handleFlagsChangedEvent<R = void, P0 = unknown>(_handleFlagsChangedEvent: P0): R;
    _scheduleToolbarItemValidation<R = void>(): R;
    changeColor<R = void, P0 = unknown>(_changeColor: P0): R;
    updateCursorIfNeeded<R = void>(): R;
    setNeedsUpdateCursor<R = void>(): R;
    updateCursor<R = boolean>(): R;
    changeFont<R = void, P0 = unknown>(_changeFont: P0): R;
    isOpaque<R = boolean>(): R;
    switchToSymbolHandlerIfPasteboardContentsDetected<R = void, P0 = unknown>(_switchToSymbolHandlerIfPasteboardContentsDetected: P0): R;
    acceptsFirstResponder<R = boolean>(): R;
    insertBacktab<R = void, P0 = unknown>(_insertBacktab: P0): R;
    insertTab<R = void, P0 = unknown>(_insertTab: P0): R;
    insertTabIgnoringFieldEditor<R = void, P0 = unknown>(_insertTabIgnoringFieldEditor: P0): R;
    performActionWithIdentifier<R = boolean, P0 = unknown>(_performActionWithIdentifier: P0): R;
    handToolMouseUp<R = void>(): R;
    handToolMouseDragged<R = void, P0 = unknown>(_handToolMouseDragged: P0): R;
    handToolMouseDown<R = void, P0 = unknown>(_handToolMouseDown: P0): R;
    displayPropertiesDidChange<R = void>(): R;
    completeMagnifyWithFactor<R = void>(): R;
    magnifyByFactor_centerOnMouse<R = void, P0 = number, P1 = boolean>(_magnifyByFactor: P0, _centerOnMouse: P1): R;
    scrollWheelScroll<R = void, P0 = unknown>(_scrollWheelScroll: P0): R;
    centerSelectionInVisibleArea<R = void>(): R;
    centerLayersInCanvas<R = void>(): R;
    centerRect_animated<R = void, P0 = cocoa.CGRect, P1 = boolean>(_centerRect: P0, _animated: P1): R;
    centerRect<R = void, P0 = cocoa.CGRect>(_centerRect: P0): R;
    trackMouse<R = void, P0 = unknown>(_trackMouse: P0): R;
    doMouseDraggedEvent<R = void, P0 = unknown>(_doMouseDraggedEvent: P0): R;
    mouseDraggedOutsideCanvas<R = void>(): R;
    isPointOutsideCanvas<R = boolean, P0 = cocoa.CGPoint>(_isPointOutsideCanvas: P0): R;
    transformRectToViewCoords<R = cocoa.CGRect, P0 = cocoa.CGRect>(_transformRectToViewCoords: P0): R;
    _viewSizeInPixels<R = cocoa.CGSize>(): R;
    redrawContentImmediately<R = void>(): R;
    refreshRulers<R = void>(): R;
    mouseInView<R = cocoa.CGPoint>(): R;
    animationDidFinishAtViewPort<R = void, P0 = unknown>(_animationDidFinishAtViewPort: P0): R;
    animationDidFinish<R = void>(): R;
    endZoomToolMode<R = void>(): R;
    zoomOut<R = void>(): R;
    setZoomValueCenteredInCanvas<R = void, P0 = number>(_setZoomValueCenteredInCanvas: P0): R;
    scaleContentBy<R = void, P0 = number>(_scaleContentBy: P0): R;
    scaleContentBy_withScalingCenterInViewCoordinates<R = void, P0 = number, P1 = cocoa.CGPoint>(_scaleContentBy: P0, _withScalingCenterInViewCoordinates: P1): R;
    zoomToActualSizeAnimated<R = void, P0 = boolean>(_zoomToActualSizeAnimated: P0): R;
    zoomToFitRect<R = void, P0 = cocoa.CGRect>(_zoomToFitRect: P0): R;
    animateToZoom_scalingCenteredOnAbsoluteCoordinates<R = void, P0 = number, P1 = cocoa.CGPoint>(_animateToZoom: P0, _scalingCenteredOnAbsoluteCoordinates: P1): R;
    animateToZoom<R = void, P0 = number>(_animateToZoom: P0): R;
    zoomIn<R = void>(): R;
    visibleContentRect<R = cocoa.CGRect>(): R;
    animateScrollOriginToPoint<R = void, P0 = cocoa.CGPoint>(_animateScrollOriginToPoint: P0): R;
    viewCenterInAbsoluteCoordinatesForViewPort<R = cocoa.CGPoint, P0 = unknown>(_viewCenterInAbsoluteCoordinatesForViewPort: P0): R;
    centerForScalingInAbsoluteCoordinates<R = cocoa.CGPoint>(): R;
    animateToViewPort<R = void, P0 = unknown>(_animateToViewPort: P0): R;
    zoomBy_centeredOnViewPoint<R = void, P0 = number, P1 = cocoa.CGPoint>(_zoomBy: P0, _centeredOnViewPoint: P1): R;
    viewPortAfterScalingToZoom_selectionCentered<R = unknown, P0 = number, P1 = boolean>(_viewPortAfterScalingToZoom: P0, _selectionCentered: P1): R;
    viewPortAfterScalingToZoom_centeredOnAbsoluteCoordinates<R = unknown, P0 = number, P1 = cocoa.CGPoint>(_viewPortAfterScalingToZoom: P0, _centeredOnAbsoluteCoordinates: P1): R;
    viewPortWithCenter_zoomValue<R = unknown, P0 = cocoa.CGPoint, P1 = number>(_viewPortWithCenter: P0, _zoomValue: P1): R;
    viewPortForZoomToFitRect<R = unknown, P0 = cocoa.CGRect>(_viewPortForZoomToFitRect: P0): R;
    refreshAfterSettingsChange<R = void>(): R;
    queuePendingMonitor<R = void>(): R;
    overlayOptionsForPage_zoom_fullScreen<R = number, P0 = unknown, P1 = number, P2 = boolean>(_overlayOptionsForPage: P0, _zoom: P1, _fullScreen: P2): R;
    scrollBy<R = void, P0 = cocoa.CGPoint>(_scrollBy: P0): R;
    scrollToScrollOrigin<R = void, P0 = cocoa.CGPoint>(_scrollToScrollOrigin: P0): R;
    placeOriginInTopLeft<R = void>(): R;
    centerDocumentAndPlaceScrollOriginInTopLeft<R = void>(): R;
    centerInBounds<R = void>(): R;
    pageDidChange<R = void, P0 = unknown>(_pageDidChange: P0): R;
    didMoveThroughHistory<R = void, P0 = unknown>(_didMoveThroughHistory: P0): R;
    willMoveThroughHistory<R = void, P0 = unknown>(_willMoveThroughHistory: P0): R;
    visualSettingChanged<R = void, P0 = unknown>(_visualSettingChanged: P0): R;
    prepare<R = void>(): R;
    pixelGridDidChange<R = void>(): R;
    canDrawConcurrently<R = boolean>(): R;
    tag<R = number>(): R;
    isFlipped<R = boolean>(): R;
    removeObserversForNotifications<R = void>(): R;
    addObserversForNotifications<R = void>(): R;
    useDebugDriver<R = boolean>(): R;
    endImporting<R = void>(): R;
    beginImporting<R = void>(): R;
    initTiledRenderer<R = void>(): R;
    initDrivers<R = void>(): R;
    commonInit<R = void>(): R;
    clickShouldDismissPopover<R = boolean, P0 = unknown>(_clickShouldDismissPopover: P0): R;
    flowCollector<R = cocoa.MSFlowRendererCollector>(): R;
    setFlowCollector<R = void, P0 = cocoa.MSFlowRendererCollector>(_v: P0): R;
    debugDriver<R = cocoa.MSRenderingDriver>(): R;
    setDebugDriver<R = void, P0 = cocoa.MSRenderingDriver>(_v: P0): R;
    normalDriver<R = cocoa.MSRenderingDriver>(): R;
    setNormalDriver<R = void, P0 = cocoa.MSRenderingDriver>(_v: P0): R;
    refreshAfterSettingsChangeScheduled<R = boolean>(): R;
    setRefreshAfterSettingsChangeScheduled<R = void, P0 = boolean>(_v: P0): R;
    didMouseDragged<R = boolean>(): R;
    setDidMouseDragged<R = void, P0 = boolean>(_v: P0): R;
    performanceMonitor<R = cocoa.MSRenderMonitor>(): R;
    setPerformanceMonitor<R = void, P0 = cocoa.MSRenderMonitor>(_v: P0): R;
    measurementLabelNumberFormatter<R = cocoa.NSNumberFormatter>(): R;
    setMeasurementLabelNumberFormatter<R = void, P0 = cocoa.NSNumberFormatter>(_v: P0): R;
    isMagnifying<R = boolean>(): R;
    setIsMagnifying<R = void, P0 = boolean>(_v: P0): R;
    redrawPending<R = boolean>(): R;
    setRedrawPending<R = void, P0 = boolean>(_v: P0): R;
    haveStoredMostRecentFullScaleScrollOrigin<R = boolean>(): R;
    setHaveStoredMostRecentFullScaleScrollOrigin<R = void, P0 = boolean>(_v: P0): R;
    mostRecentFullScaleScrollOrigin<R = cocoa.CGPoint>(): R;
    setMostRecentFullScaleScrollOrigin<R = void, P0 = cocoa.CGPoint>(_v: P0): R;
    scalingCenterInViewCoordinates<R = cocoa.CGPoint>(): R;
    setScalingCenterInViewCoordinates<R = void, P0 = cocoa.CGPoint>(_v: P0): R;
    scrollOriginRelativeContentRedrawRect<R = cocoa.CGRect>(): R;
    setScrollOriginRelativeContentRedrawRect<R = void, P0 = cocoa.CGRect>(_v: P0): R;
    previouslyRenderedDoc<R = cocoa.MSImmutableDocumentData>(): R;
    setPreviouslyRenderedDoc<R = void, P0 = cocoa.MSImmutableDocumentData>(_v: P0): R;
    previouslyRenderedColorSpace<R = number>(): R;
    setPreviouslyRenderedColorSpace<R = void, P0 = number>(_v: P0): R;
    zoomTool<R = cocoa.MSZoomTool>(): R;
    needsUpdateCursor<R = boolean>(): R;
    handToolState<R = number>(): R;
    setHandToolState<R = void, P0 = number>(_v: P0): R;
    didMouseDown<R = boolean>(): R;
    setDidMouseDown<R = void, P0 = boolean>(_v: P0): R;
    mouseTracker<R = cocoa.MSMouseTracker>(): R;
    cacheManager<R = cocoa.MSCacheManager>(): R;
    setCacheManager<R = void, P0 = cocoa.MSCacheManager>(_v: P0): R;
    pendingMonitor<R = cocoa.MSRenderMonitor>(): R;
    setPendingMonitor<R = void, P0 = cocoa.MSRenderMonitor>(_v: P0): R;
    shouldHideOverlayControls<R = boolean>(): R;
    setShouldHideOverlayControls<R = void, P0 = boolean>(_v: P0): R;
    document<R = cocoa.MSDocument>(): R;
    setDocument<R = void, P0 = cocoa.MSDocument>(_v: P0): R;
    verticalRuler<R = cocoa.MSRulerView>(): R;
    setVerticalRuler<R = void, P0 = cocoa.MSRulerView>(_v: P0): R;
    horizontalRuler<R = cocoa.MSRulerView>(): R;
    setHorizontalRuler<R = void, P0 = cocoa.MSRulerView>(_v: P0): R;
    eventHandlerManager<R = cocoa.MSEventHandlerManager>(): R;
    setEventHandlerManager<R = void, P0 = cocoa.MSEventHandlerManager>(_v: P0): R;
    delegate<R = cocoa.MSContentDrawViewDelegate>(): R;
    setDelegate<R = void, P0 = cocoa.MSContentDrawViewDelegate>(_v: P0): R;
    contentDrawViewParent<R = cocoa.MSContentDrawViewParent>(): R;
    setContentDrawViewParent<R = void, P0 = cocoa.MSContentDrawViewParent>(_v: P0): R;
    tiledRenderer<R = cocoa.MSTiledRenderer>(): R;
    setTiledRenderer<R = void, P0 = cocoa.MSTiledRenderer>(_v: P0): R;
    rendererColorSettings<R = cocoa.MSOverlayColorSettings>(): R;
    zoomValue<R = number>(): R;
    setZoomValue<R = void, P0 = number>(_v: P0): R;
    scrollOrigin<R = cocoa.CGPoint>(): R;
    setScrollOrigin<R = void, P0 = cocoa.CGPoint>(_v: P0): R;
    viewPort<R = cocoa.MSViewPort>(): R;
    setViewPort<R = void, P0 = cocoa.MSViewPort>(_v: P0): R;
    driver<R = cocoa.MSRenderingDriver>(): R;
    debugDescription<R = cocoa.NSString>(): R;
    description<R = cocoa.NSString>(): R;
    hash<R = number>(): R;
    superclass<R = unknown>(): R;
  }
  namespace classes {
    export interface MSContentDrawView<T = any> extends cocoa.classes.NSView, cocoa.classes.MSOverlayRenderingDelegateProtocol, cocoa.classes.MSEventHandlerManagerDelegateProtocol, cocoa.classes.MSTiledRendererHostViewProtocol {
      alloc<R = MSContentDrawView>(): R;
      new: <R = MSContentDrawView>() => R;
      absoluteCoordinatesFromViewCoordinates_forViewPort<R = cocoa.CGPoint, P0 = cocoa.CGPoint, P1 = unknown>(_absoluteCoordinatesFromViewCoordinates: P0, _forViewPort: P1): R;
      viewCoordinatesFromAbsoluteCoordinates_forViewPort<R = cocoa.CGPoint, P0 = cocoa.CGPoint, P1 = unknown>(_viewCoordinatesFromAbsoluteCoordinates: P0, _forViewPort: P1): R;
      scrollOriginAfterScalingViewPort_toZoomValue_scalingCenterInViewCoordinates<R = cocoa.CGPoint, P0 = unknown, P1 = number, P2 = cocoa.CGPoint>(_scrollOriginAfterScalingViewPort: P0, _toZoomValue: P1, _scalingCenterInViewCoordinates: P2): R;
      viewPortAfterScalingViewPort_toZoom_centeredOnAbsoluteCoordinates<R = unknown, P0 = unknown, P1 = number, P2 = cocoa.CGPoint>(_viewPortAfterScalingViewPort: P0, _toZoom: P1, _centeredOnAbsoluteCoordinates: P2): R;
    }
  }
}

declare const MSContentDrawView: cocoa.classes.MSContentDrawView;
