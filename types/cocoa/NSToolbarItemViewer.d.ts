/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface NSToolbarItemViewer<T0 = void, T1 = void, T2 = void> extends NSView, _NSTouchBarItemLayoutWrapperProtocol {
    _toolbarView<R = unknown>(): R;
    _menuFormRepresentationChanged<R = void>(): R;
    _scalableMaxIconSize<R = CGSize>(): R;
    _scalableMinIconSize<R = CGSize>(): R;
    _updateMeasuredSizes<R = void>(): R;
    _itemChangedLabelOrPaletteLabel<R = void>(): R;
    _itemLayoutChanged<R = void>(): R;
    _itemChangedToolTip<R = void>(): R;
    _itemEnabledStateChanged<R = void>(): R;
    _itemChanged<R = void>(): R;
    _itemVisibilityPriority<R = number>(): R;
    _labelOnlyShowsAsPopupMenu<R = boolean>(): R;
    _needsViewerLayout<R = boolean>(): R;
    _setNeedsViewerLayout<R = void, P0 = boolean>(__setNeedsViewerLayout: P0): R;
    _needsModeConfiguration<R = boolean>(): R;
    _setNeedsModeConfiguration<R = void, P0 = boolean>(__setNeedsModeConfiguration: P0): R;
    _endToolbarEditingMode<R = void>(): R;
    _beginToolbarEditingMode<R = void>(): R;
    _accessibilityOptionsChanged<R = void>(): R;
    _updateJiggle<R = void, P0 = boolean>(__updateJiggle: P0): R;
    _simulateClickInLabelView_deferringPopUpsForAccessibility<R = void, P0 = unknown, P1 = boolean>(__simulateClickInLabelView: P0, _deferringPopUpsForAccessibility: P1): R;
    _simultaneousSegmentAndLabelTrackingWithEvent_forSegmentAtIndex_withLabelRect<R = boolean, P0 = unknown, P1 = number, P2 = CGRect>(__simultaneousSegmentAndLabelTrackingWithEvent: P0, _forSegmentAtIndex: P1, _withLabelRect: P2): R;
    _segmentedControlDidChangeHighlightDuringTracking<R = void, P0 = unknown>(__segmentedControlDidChangeHighlightDuringTracking: P0): R;
    _supportsSimultaneousSegmentAndLabelTrackingWithEvent_segment<R = boolean, P0 = unknown, P1 = number>(__supportsSimultaneousSegmentAndLabelTrackingWithEvent: P0, _segment: P1): R;
    _shouldMinimizeWindowForEvent<R = boolean, P0 = unknown>(__shouldMinimizeWindowForEvent: P0): R;
    trackMouseForPopupMenuFormRepresentation<R = void, P0 = unknown>(_trackMouseForPopupMenuFormRepresentation: P0): R;
    trackMouseForPopupMenuFormRepresentation_forItem_forLabelView<R = void, P0 = unknown, P1 = unknown, P2 = unknown>(_trackMouseForPopupMenuFormRepresentation: P0, _forItem: P1, _forLabelView: P2): R;
    _popUpMenuFormRepresentationInLabelView<R = void, P0 = unknown>(__popUpMenuFormRepresentationInLabelView: P0): R;
    _shouldPreventCustomViewFromDraggingWindow<R = boolean, P0 = unknown>(__shouldPreventCustomViewFromDraggingWindow: P0): R;
    mouseDownCanMoveWindow<R = boolean>(): R;
    performClick<R = void, P0 = unknown>(_performClick: P0): R;
    labelOnlyMenuDidSendActionNotification<R = void, P0 = unknown>(_labelOnlyMenuDidSendActionNotification: P0): R;
    moveLeft<R = void, P0 = unknown>(_moveLeft: P0): R;
    moveRight<R = void, P0 = unknown>(_moveRight: P0): R;
    _selectLabelView<R = void, P0 = unknown>(__selectLabelView: P0): R;
    _initialLabelViewToSelectFromDirection<R = unknown, P0 = number>(__initialLabelViewToSelectFromDirection: P0): R;
    _labelViewToSelectInDirection<R = unknown, P0 = number>(__labelViewToSelectInDirection: P0): R;
    _spaceRequiredToSatisfySplitViewTrackingForMinimumLeftOrigin_inWindow<R = number, P0 = CGPoint, P1 = unknown>(__spaceRequiredToSatisfySplitViewTrackingForMinimumLeftOrigin: P0, _inWindow: P1): R;
    _isPartitionItem<R = boolean>(): R;
    _labelViewIsSelectable<R = boolean, P0 = unknown>(__labelViewIsSelectable: P0): R;
    _allowsIndividualLabelViewSelection<R = boolean>(): R;
    needsPanelToBecomeKey<R = boolean>(): R;
    acceptsFirstResponder<R = boolean>(): R;
    _acceptsFirstResponderInItem<R = boolean, P0 = unknown>(__acceptsFirstResponderInItem: P0): R;
    resignKeyWindow<R = void>(): R;
    becomeKeyWindow<R = void>(): R;
    setNeedsDisplay<R = void, P0 = boolean>(_setNeedsDisplay: P0): R;
    _setHighlighted_displayNow<R = void, P0 = boolean, P1 = boolean>(__setHighlighted: P0, _displayNow: P1): R;
    _setHighlighted_pieces_forItemAtIndex_displayNow<R = void, P0 = boolean, P1 = number, P2 = number, P3 = boolean>(__setHighlighted: P0, _pieces: P1, _forItemAtIndex: P2, _displayNow: P3): R;
    _backgroundStyleForLabelCell<R = number, P0 = unknown>(__backgroundStyleForLabelCell: P0): R;
    _reallyShouldDrawFocusAroundLabel<R = boolean>(): R;
    _updateEnableStateOfLabelViews<R = void>(): R;
    drawSelectionIndicatorInRect<R = void, P0 = CGRect>(_drawSelectionIndicatorInRect: P0): R;
    _drawSelectionIndicatorInRect_clipRect<R = void, P0 = CGRect, P1 = CGRect>(__drawSelectionIndicatorInRect: P0, _clipRect: P1): R;
    _shouldDrawFocus<R = boolean>(): R;
    _shouldDrawSelectionIndicator<R = boolean>(): R;
    _endInsertionOptimization<R = void>(): R;
    _startInsertionOptimization<R = void>(): R;
    setLayer<R = void, P0 = unknown>(_setLayer: P0): R;
    _stopWatchingBackgroundGradientNotification<R = void>(): R;
    _watchBackgroundGradientNotification<R = void>(): R;
    _invalidateLabelViewsWhenLayerBacked<R = void, P0 = unknown>(__invalidateLabelViewsWhenLayerBacked: P0): R;
    minViewerSize<R = CGSize>(): R;
    _setOverriddenMaxWidth<R = void, P0 = number>(__setOverriddenMaxWidth: P0): R;
    _hackUpTheItemSizesAndFrameToHaveSpaceFor10_11Borders<R = void>(): R;
    configureForLayoutInDisplayMode_andSizeMode_inToolbarView<R = void, P0 = number, P1 = number, P2 = unknown>(_configureForLayoutInDisplayMode: P0, _andSizeMode: P1, _inToolbarView: P2): R;
    _configureLabelCellStringValue<R = void>(): R;
    _noteToolbarSizeModeChanged<R = void>(): R;
    _recomputeLabelHeight<R = void>(): R;
    _computeLayoutInfoForIconViewSize_frameSize<R = void, P0 = CGSize, P1 = CGSize>(__computeLayoutInfoForIconViewSize: P0, _frameSize: P1): R;
    _getPixelAligningTransformForLayout<R = CGAffineTransform>(): R;
    _widthRequiredForLabelLayout<R = number>(): R;
    _itemCanBeDraggedInTemporaryEditingModeFromPoint<R = boolean, P0 = CGPoint>(__itemCanBeDraggedInTemporaryEditingModeFromPoint: P0): R;
    _updateLabelViewByLabelRectInWindow<R = void, P0 = unknown>(__updateLabelViewByLabelRectInWindow: P0): R;
    _updateLabelViewByLabelRect<R = void>(): R;
    _metrics<R = __NSToolbarMetrics>(): R;
    itemViewRect<R = CGRect>(): R;
    isOpaque<R = boolean>(): R;
    transparentBackground<R = boolean>(): R;
    setTransparentBackground<R = void, P0 = boolean>(_setTransparentBackground: P0): R;
    _endSubviewsBeingBorrowed<R = void>(): R;
    _beginSubviewsBeingBorrowed<R = void>(): R;
    _clearToolbarView<R = void>(): R;
    _setToolbarItem<R = void, P0 = unknown>(__setToolbarItem: P0): R;
    item<R = unknown>(): R;
    initWithItem_forToolbarView<R = unknown, P0 = unknown, P1 = unknown>(_initWithItem: P0, _forToolbarView: P1): R;
    _firstLabelView<R = unknown>(): R;
    _setLabelViewCount<R = void, P0 = number>(__setLabelViewCount: P0): R;
    _labelFont<R = unknown>(): R;
    labelViewClass<R = unknown>(): R;
    _accessibilityConfigureToolbarItem<R = void>(): R;
    _accessibilityConfigureViewItemToolbarItem<R = void>(): R;
    element_hasOverriddenAttribute<R = boolean, P0 = unknown, P1 = unknown>(_element: P0, _hasOverriddenAttribute: P1): R;
    _accessibilityToolbarItemLabelAtIndex<R = unknown, P0 = number>(__accessibilityToolbarItemLabelAtIndex: P0): R;
    _accessibilityToolbarItemLabel<R = unknown>(): R;
    accessibilityIsValueAttributeSettable<R = boolean>(): R;
    accessibilityValueAttribute<R = unknown>(): R;
    accessibilityIsEnabledAttributeSettable<R = boolean>(): R;
    accessibilityEnabledAttribute<R = unknown>(): R;
    accessibilityIsDescriptionAttributeSettable<R = boolean>(): R;
    accessibilityDescriptionAttribute<R = unknown>(): R;
    accessibilityIsTitleAttributeSettable<R = boolean>(): R;
    accessibilityTitleAttribute<R = unknown>(): R;
    _accessibilityToolbarItemViewerHelperClass<R = unknown>(): R;
    _accessibilityToolbarItemViewerConfiguration<R = number>(): R;
    _accessibilityLabelElements<R = unknown>(): R;
    _accessibilityTitleElement<R = unknown>(): R;
    _accessibilityParentAdjustedFocusedUIElement<R = unknown, P0 = unknown>(__accessibilityParentAdjustedFocusedUIElement: P0): R;
    _accessibilityParentAdjustedHitTestElement_atLocation<R = unknown, P0 = unknown, P1 = unknown>(__accessibilityParentAdjustedHitTestElement: P0, _atLocation: P1): R;
    _accessibilityIsInCustomizationSheet<R = boolean>(): R;
    _accessibilityIsCommonToolbarButtonItem<R = boolean>(): R;
    _accessibilityIsSpaceOrSeparatorItem<R = boolean>(): R;
    _accessibilityTreatButtonAsToolbarButton<R = boolean, P0 = unknown>(__accessibilityTreatButtonAsToolbarButton: P0): R;
    _accessibilityTreatSegmentedControlAsToolbarButtons<R = boolean, P0 = unknown>(__accessibilityTreatSegmentedControlAsToolbarButtons: P0): R;
    description<R = NSString>(): R;
    preferredTrailingPosition<R = number>(): R;
    priorityIndex<R = number>(): R;
    setPriorityIndex<R = void, P0 = number>(_v: P0): R;
    isSpace<R = boolean>(): R;
    minSize<R = CGSize>(): R;
    maxSize<R = CGSize>(): R;
    contentClippingSize<R = CGSize>(): R;
    debugDescription<R = NSString>(): R;
    hash<R = number>(): R;
    itemPosition<R = number>(): R;
    preferredSize<R = CGSize>(): R;
    preferredZOrder<R = number>(): R;
    superclass<R = unknown>(): R;
  }
  namespace NSToolbarItemViewer {
    export interface CLASS<T0 = void, T1 = void, T2 = void> extends NSView, _NSTouchBarItemLayoutWrapperProtocol {
      alloc<R = NSToolbarItemViewer>(): R;
      new: <R = NSToolbarItemViewer>() => R;
    }
  }
}

declare const NSToolbarItemViewer: cocoa.NSToolbarItemViewer.CLASS;
