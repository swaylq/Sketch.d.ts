/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface NSTabView<T = any> extends cocoa.NSView {
    cxx_destruct<R = void>(): R;
    _doTestTabSwitchingPerformance<R = void>(): R;
    _testTabSwitchingPerformance<R = void>(): R;
    _setTabViewControllerAllowsPropertyChange<R = void, P0 = boolean>(__setTabViewControllerAllowsPropertyChange: P0): R;
    _tabViewControllerAllowsPropertyChange<R = boolean>(): R;
    _canMakePropertyChange<R = boolean>(): R;
    _tabViewController<R = unknown>(): R;
    _tabViewOwnedByTabViewController<R = boolean>(): R;
    _setTabViewItems<R = void, P0 = unknown>(__setTabViewItems: P0): R;
    _setEndTabWidth<R = void, P0 = number>(__setEndTabWidth: P0): R;
    _setNeedsLayout<R = void, P0 = boolean>(__setNeedsLayout: P0): R;
    _setCurrentTabHeight<R = void, P0 = number>(__setCurrentTabHeight: P0): R;
    _currentTabHeight<R = number>(): R;
    _setMaxOverlap<R = void, P0 = number>(__setMaxOverlap: P0): R;
    _maxOverlap<R = number>(): R;
    springLoadingExited<R = void, P0 = unknown>(_springLoadingExited: P0): R;
    springLoadingActivated_draggingInfo<R = void, P0 = boolean, P1 = unknown>(_springLoadingActivated: P0, _draggingInfo: P1): R;
    springLoadingHighlightChanged<R = void, P0 = unknown>(_springLoadingHighlightChanged: P0): R;
    springLoadingUpdated<R = number, P0 = unknown>(_springLoadingUpdated: P0): R;
    springLoadingEntered<R = number, P0 = unknown>(_springLoadingEntered: P0): R;
    _springLoadItem<R = void>(): R;
    _setTabViewItemForSpringLoading<R = void, P0 = unknown>(__setTabViewItemForSpringLoading: P0): R;
    _tabViewItemForSpringLoading<R = unknown>(): R;
    mouseTracker_didStopTrackingWithEvent<R = boolean, P0 = unknown, P1 = unknown>(_mouseTracker: P0, _didStopTrackingWithEvent: P1): R;
    mouseTracker_shouldContinueTrackingWithEvent<R = boolean, P0 = unknown, P1 = unknown>(_mouseTracker: P0, _shouldContinueTrackingWithEvent: P1): R;
    mouseTracker_shouldStartTrackingWithEvent<R = boolean, P0 = unknown, P1 = unknown>(_mouseTracker: P0, _shouldStartTrackingWithEvent: P1): R;
    _pressedTabViewItem<R = unknown>(): R;
    _setPressedTabViewItem<R = void, P0 = unknown>(__setPressedTabViewItem: P0): R;
    _systemColorChanged<R = void, P0 = unknown>(__systemColorChanged: P0): R;
    _invalidateTabsCache<R = void>(): R;
    _frameSizeForContentSize<R = cocoa.CGSize, P0 = cocoa.CGSize>(__frameSizeForContentSize: P0): R;
    _resizeSelectedTabViewItem<R = void>(): R;
    _layoutTabs<R = void>(): R;
    _doLayoutTabs<R = number, P0 = number>(__doLayoutTabs: P0): R;
    _tabHeight<R = number>(): R;
    _endTabWidth<R = number>(): R;
    _totalMinimumTabsLengthWithOverlap<R = number, P0 = number>(__totalMinimumTabsLengthWithOverlap: P0): R;
    _totalNominalTabsLengthWithOverlap<R = number, P0 = number>(__totalNominalTabsLengthWithOverlap: P0): R;
    _totalTabsLength_overlap<R = number, P0 = boolean, P1 = number>(__totalTabsLength: P0, _overlap: P1): R;
    _shouldUseSeparateLayoutEngineForItem<R = boolean, P0 = unknown>(__shouldUseSeparateLayoutEngineForItem: P0): R;
    _updateMinimumSizeConstraint<R = void>(): R;
    setTabViewMinimumSizeConstraint<R = void, P0 = unknown>(_setTabViewMinimumSizeConstraint: P0): R;
    tabViewMinimumSizeConstraint<R = unknown>(): R;
    _old_initWithCoder_NSTabView<R = unknown, P0 = unknown>(__old_initWithCoder_NSTabView: P0): R;
    _old_encodeWithCoder_NSTabView<R = void, P0 = unknown>(__old_encodeWithCoder_NSTabView: P0): R;
    _drawBackgroundAndBorderInRect<R = void, P0 = cocoa.CGRect>(__drawBackgroundAndBorderInRect: P0): R;
    _drawBezelBorderInBounds_clipRect<R = void, P0 = cocoa.CGRect, P1 = cocoa.CGRect>(__drawBezelBorderInBounds: P0, _clipRect: P1): R;
    _frameForBezelBorder<R = cocoa.CGRect>(): R;
    _coreUIDrawBezelInRect_withClip_flipped<R = boolean, P0 = cocoa.CGRect, P1 = cocoa.CGRect, P2 = boolean>(__coreUIDrawBezelInRect: P0, _withClip: P1, _flipped: P2): R;
    _createCoreUIMaskOnlyBezelOptionsForTabItem<R = cocoa.__CFDictionary, P0 = unknown>(__createCoreUIMaskOnlyBezelOptionsForTabItem: P0): R;
    _createCoreUIBezelOptionsFlipped<R = cocoa.__CFDictionary, P0 = boolean>(__createCoreUIBezelOptionsFlipped: P0): R;
    _hackFrameToMatchLegacyBezelRect<R = cocoa.CGRect, P0 = cocoa.CGRect>(__hackFrameToMatchLegacyBezelRect: P0): R;
    allowsVibrancy<R = boolean>(): R;
    _coreUIDrawTab_withState_inRect<R = boolean, P0 = unknown, P1 = number, P2 = cocoa.CGRect>(__coreUIDrawTab: P0, _withState: P1, _inRect: P2): R;
    _copyCoreUIOptionsForTabViewItem_withState_maskOnly_inRect<R = cocoa.__CFDictionary, P0 = unknown, P1 = number, P2 = boolean, P3 = cocoa.CGRect>(__copyCoreUIOptionsForTabViewItem: P0, _withState: P1, _maskOnly: P2, _inRect: P3): R;
    _tabRectForTabViewItem<R = cocoa.CGRect, P0 = unknown>(__tabRectForTabViewItem: P0): R;
    _themeTabAndBarArea<R = cocoa.CGRect>(): R;
    _themeContentRect<R = cocoa.CGRect>(): R;
    _minimumSizeNeedForTabItemLabel<R = cocoa.CGSize, P0 = unknown>(__minimumSizeNeedForTabItemLabel: P0): R;
    _nominalSizeNeedForTabItemLabel<R = cocoa.CGSize, P0 = unknown>(__nominalSizeNeedForTabItemLabel: P0): R;
    _titleRectForTabViewItem<R = cocoa.CGRect, P0 = unknown>(__titleRectForTabViewItem: P0): R;
    _labelRectForTabRect_forItem<R = cocoa.CGRect, P0 = cocoa.CGRect, P1 = unknown>(__labelRectForTabRect: P0, _forItem: P1): R;
    _drawTabViewItem_inRect<R = void, P0 = unknown, P1 = cocoa.CGRect>(__drawTabViewItem: P0, _inRect: P1): R;
    _drawThemeTab_withState_inRect<R = void, P0 = unknown, P1 = number, P2 = cocoa.CGRect>(__drawThemeTab: P0, _withState: P1, _inRect: P2): R;
    _drawTabsInDirtyRect<R = void, P0 = cocoa.CGRect>(__drawTabsInDirtyRect: P0): R;
    _removeTabButtonSubviewIfNeeded<R = void>(): R;
    _addTabViewButtonsIfNeeded<R = void>(): R;
    _updateTabViewButtons<R = void>(): R;
    _updateTabViewButtonsFrame<R = void>(): R;
    _tabViewButtonFrame<R = cocoa.CGRect>(): R;
    _setTabViewButtons<R = void, P0 = unknown>(__setTabViewButtons: P0): R;
    _tabViewButtons<R = unknown>(): R;
    _usesSubviewsForButtons<R = boolean>(): R;
    _removeBackgroundBezelLayer<R = void>(): R;
    _updateBackgroundBezelLayerIfRequired<R = void>(): R;
    _setBackgroundBezelMaskLayer<R = void, P0 = unknown>(__setBackgroundBezelMaskLayer: P0): R;
    _backgroundBezelMaskLayer<R = unknown>(): R;
    _setBackgroundBezelLayer<R = void, P0 = unknown>(__setBackgroundBezelLayer: P0): R;
    _backgroundBezelLayer<R = unknown>(): R;
    _bezelLayerFrame<R = cocoa.CGRect>(): R;
    _addAndUpdateBezelLayerIfNeeded<R = void>(): R;
    _performTabLayoutIfNeeded<R = void>(): R;
    _redisplayForStateChange<R = void>(): R;
    _shouldAppearActive<R = boolean>(): R;
    _currentBorderWidth<R = number>(): R;
    _currentBorderColor<R = unknown>(): R;
    _currentBackgroundColor<R = unknown>(): R;
    _setKeyboardFocusRingNeedsDisplayForTabViewItem<R = void, P0 = unknown>(__setKeyboardFocusRingNeedsDisplayForTabViewItem: P0): R;
    _setNeedsDisplayForTabViewItem<R = void, P0 = unknown>(__setNeedsDisplayForTabViewItem: P0): R;
    _tabRectAdjustedForOverlap<R = cocoa.CGRect, P0 = cocoa.CGRect>(__tabRectAdjustedForOverlap: P0): R;
    performClick<R = void, P0 = unknown>(_performClick: P0): R;
    moveDown<R = void, P0 = unknown>(_moveDown: P0): R;
    moveUp<R = void, P0 = unknown>(_moveUp: P0): R;
    moveLeft<R = void, P0 = unknown>(_moveLeft: P0): R;
    moveRight<R = void, P0 = unknown>(_moveRight: P0): R;
    _keyboardNavigateToTabByDelta<R = void, P0 = number>(__keyboardNavigateToTabByDelta: P0): R;
    _keyboardNavigateToTabAtIndex<R = void, P0 = number>(__keyboardNavigateToTabAtIndex: P0): R;
    _keyboardNavigateDoSelectOfFocusItem<R = void, P0 = unknown>(__keyboardNavigateDoSelectOfFocusItem: P0): R;
    _cancelDelayedKeyboardNavigationTabSwitch<R = void>(): R;
    _previousNextTab_loop<R = void, P0 = number, P1 = boolean>(__previousNextTab: P0, _loop: P1): R;
    _findPreviousNextTab_loop_invertForR2L_startingAtTabItem<R = number, P0 = number, P1 = boolean, P2 = boolean, P3 = unknown>(__findPreviousNextTab: P0, _loop: P1, _invertForR2L: P2, _startingAtTabItem: P3): R;
    mouseDownCanMoveWindow<R = boolean>(): R;
    tabViewItemAtPoint<R = unknown, P0 = cocoa.CGPoint>(_tabViewItemAtPoint: P0): R;
    selectPreviousTabViewItem<R = void, P0 = unknown>(_selectPreviousTabViewItem: P0): R;
    selectNextTabViewItem<R = void, P0 = unknown>(_selectNextTabViewItem: P0): R;
    selectLastTabViewItem<R = void, P0 = unknown>(_selectLastTabViewItem: P0): R;
    selectFirstTabViewItem<R = void, P0 = unknown>(_selectFirstTabViewItem: P0): R;
    selectTabViewItemWithIdentifier<R = void, P0 = unknown>(_selectTabViewItemWithIdentifier: P0): R;
    selectTabViewItemAtIndex<R = void, P0 = number>(_selectTabViewItemAtIndex: P0): R;
    takeSelectedTabViewItemFromSender<R = void, P0 = unknown>(_takeSelectedTabViewItemFromSender: P0): R;
    selectTabViewItem<R = void, P0 = unknown>(_selectTabViewItem: P0): R;
    _shouldSelectTabViewItem<R = boolean, P0 = unknown>(__shouldSelectTabViewItem: P0): R;
    _switchInitialFirstResponder_lastKeyView_forTabViewItem<R = void, P0 = unknown, P1 = unknown, P2 = unknown>(__switchInitialFirstResponder: P0, _lastKeyView: P1, _forTabViewItem: P2): R;
    _originalNextKeyView<R = unknown>(): R;
    _wiringNibConnections<R = boolean>(): R;
    instantiateWithObjectInstantiator<R = void, P0 = unknown>(_instantiateWithObjectInstantiator: P0): R;
    _isViewValidOriginalNextKeyView<R = boolean, P0 = unknown>(__isViewValidOriginalNextKeyView: P0): R;
    _setNextKeyViewFor_toNextKeyView<R = void, P0 = unknown, P1 = unknown>(__setNextKeyViewFor: P0, _toNextKeyView: P1): R;
    _setInteriorNextKeyView<R = void, P0 = unknown>(__setInteriorNextKeyView: P0): R;
    _switchTabViewItem_oldView_withTabViewItem_newView_initialFirstResponder_lastKeyView<R = void, P0 = unknown, P1 = unknown, P2 = unknown, P3 = unknown, P4 = unknown, P5 = unknown>(__switchTabViewItem: P0, _oldView: P1, _withTabViewItem: P2, _newView: P3, _initialFirstResponder: P4, _lastKeyView: P5): R;
    _findFirstValidKeyViewStartingFrom_inTabViewItem<R = unknown, P0 = unknown, P1 = unknown>(__findFirstValidKeyViewStartingFrom: P0, _inTabViewItem: P1): R;
    _hasKeyboardFocusInTabItem<R = boolean, P0 = unknown>(__hasKeyboardFocusInTabItem: P0): R;
    _hasKeyboardFocus<R = boolean>(): R;
    currentEditor<R = unknown>(): R;
    resignKeyWindow<R = void>(): R;
    becomeKeyWindow<R = void>(): R;
    needsPanelToBecomeKey<R = boolean>(): R;
    acceptsFirstResponder<R = boolean>(): R;
    _removeTabViewItems<R = void, P0 = unknown>(__removeTabViewItems: P0): R;
    removeTabViewItem<R = void, P0 = unknown>(_removeTabViewItem: P0): R;
    insertTabViewItem_atIndex<R = void, P0 = unknown, P1 = number>(_insertTabViewItem: P0, _atIndex: P1): R;
    addTabViewItem<R = void, P0 = unknown>(_addTabViewItem: P0): R;
    _addedTab_atIndex<R = void, P0 = unknown, P1 = number>(__addedTab: P0, _atIndex: P1): R;
    _didChangeTabViewType<R = void>(): R;
    _willChangeTabViewType<R = void>(): R;
    _setTabViewTypeFlags<R = void, P0 = number>(__setTabViewTypeFlags: P0): R;
    _tabEnumerationFromLeftToRight<R = unknown>(): R;
    _tabIndexIsRightOrBottom<R = boolean, P0 = number>(__tabIndexIsRightOrBottom: P0): R;
    _tabIndexIsLeftOrTop<R = boolean, P0 = number>(__tabIndexIsLeftOrTop: P0): R;
    _tabsAreR2L<R = boolean>(): R;
    isOpaque<R = boolean>(): R;
    _hasBezelBorder<R = boolean>(): R;
    _hasTabs<R = boolean>(): R;
    _hasHorizontalOrientation<R = boolean>(): R;
    _tabOrientation<R = number>(): R;
    isFlipped<R = boolean>(): R;
    indexOfTabViewItemWithIdentifier<R = number, P0 = unknown>(_indexOfTabViewItemWithIdentifier: P0): R;
    tabViewItemAtIndex<R = unknown, P0 = number>(_tabViewItemAtIndex: P0): R;
    indexOfTabViewItem<R = number, P0 = unknown>(_indexOfTabViewItem: P0): R;
    _commonInit<R = void>(): R;
    accessibilityIsContentsAttributeSettable<R = boolean>(): R;
    accessibilityContentsAttribute<R = unknown>(): R;
    accessibilityIsTabsAttributeSettable<R = boolean>(): R;
    accessibilityTabsAttribute<R = unknown>(): R;
    accessibilityIsValueAttributeSettable<R = boolean>(): R;
    accessibilityValueAttribute<R = unknown>(): R;
    contentRect<R = cocoa.CGRect>(): R;
    minimumSize<R = cocoa.CGSize>(): R;
    delegate<R = cocoa.NSTabViewDelegate>(): R;
    setDelegate<R = void, P0 = cocoa.NSTabViewDelegate>(_v: P0): R;
    controlSize<R = number>(): R;
    setControlSize<R = void, P0 = number>(_v: P0): R;
    controlTint<R = number>(): R;
    setControlTint<R = void, P0 = number>(_v: P0): R;
    tabViewBorderType<R = number>(): R;
    setTabViewBorderType<R = void, P0 = number>(_v: P0): R;
    tabPosition<R = number>(): R;
    setTabPosition<R = void, P0 = number>(_v: P0): R;
    tabViewType<R = number>(): R;
    setTabViewType<R = void, P0 = number>(_v: P0): R;
    font<R = cocoa.NSFont>(): R;
    setFont<R = void, P0 = cocoa.NSFont>(_v: P0): R;
    allowsTruncatedLabels<R = boolean>(): R;
    setAllowsTruncatedLabels<R = void, P0 = boolean>(_v: P0): R;
    drawsBackground<R = boolean>(): R;
    setDrawsBackground<R = void, P0 = boolean>(_v: P0): R;
    numberOfTabViewItems<R = number>(): R;
    selectedTabViewItem<R = cocoa.NSTabViewItem>(): R;
    tabViewItems<R = cocoa.NSArray>(): R;
    setTabViewItems<R = void, P0 = cocoa.NSArray>(_v: P0): R;
  }
  namespace classes {
    export interface NSTabView<T = any> extends cocoa.classes.NSView {
      alloc<R = NSTabView>(): R;
      new: <R = NSTabView>() => R;
      _setUsesToolTipsWhenTruncated<R = void, P0 = boolean>(__setUsesToolTipsWhenTruncated: P0): R;
      _usesToolTipsWhenTruncated<R = boolean>(): R;
    }
  }
}

declare const NSTabView: cocoa.classes.NSTabView;
