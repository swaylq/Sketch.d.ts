/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface NSMatrix<T = any> extends NSControl, NSUserInterfaceValidationsProtocol, NSViewToolTipOwnerProtocol {
    cxx_destruct<R = void>(): R;
    _resetBrowserClickedRowAndColumn<R = void>(): R;
    _menuDidEndTracking<R = void, P0 = unknown>(__menuDidEndTracking: P0): R;
    _doResetOfCursorRects_revealovers<R = void, P0 = boolean, P1 = boolean>(__doResetOfCursorRects: P0, _revealovers: P1): R;
    _selectCellIfRequired<R = void>(): R;
    _checkForSimpleTrackingMode<R = void>(): R;
    _setUseSimpleTrackingMode<R = void, P0 = boolean>(__setUseSimpleTrackingMode: P0): R;
    _useSimpleTrackingMode<R = boolean>(): R;
    toolTipForCell<R = unknown, P0 = unknown>(_toolTipForCell: P0): R;
    setToolTip_forCell<R = void, P0 = unknown, P1 = unknown>(_setToolTip: P0, _forCell: P1): R;
    selectTextAtRow_column<R = unknown, P0 = number, P1 = number>(_selectTextAtRow: P0, _column: P1): R;
    selectText<R = void, P0 = unknown>(_selectText: P0): R;
    _selectTextOfCell<R = unknown, P0 = unknown>(__selectTextOfCell: P0): R;
    textView_completions_forPartialWordRange_indexOfSelectedItem<R = unknown, P0 = unknown, P1 = unknown, P2 = _NSRange, P3 = number>(_textView: P0, _completions: P1, _forPartialWordRange: P2, _indexOfSelectedItem: P3): R;
    textView_doCommandBySelector<R = boolean, P0 = unknown, P1 = string>(_textView: P0, _doCommandBySelector: P1): R;
    textDidChange<R = void, P0 = unknown>(_textDidChange: P0): R;
    textDidBeginEditing<R = void, P0 = unknown>(_textDidBeginEditing: P0): R;
    textDidEndEditing<R = void, P0 = unknown>(_textDidEndEditing: P0): R;
    textShouldBeginEditing<R = boolean, P0 = unknown>(_textShouldBeginEditing: P0): R;
    textShouldEndEditing<R = boolean, P0 = unknown>(_textShouldEndEditing: P0): R;
    textView_shouldChangeTextInRange_replacementString<R = boolean, P0 = unknown, P1 = _NSRange, P2 = unknown>(_textView: P0, _shouldChangeTextInRange: P1, _replacementString: P2): R;
    stopSpeaking<R = void, P0 = unknown>(_stopSpeaking: P0): R;
    startSpeaking<R = void, P0 = unknown>(_startSpeaking: P0): R;
    sendDoubleAction<R = void>(): R;
    _sendDoubleActionToCellAt<R = void, P0 = CGPoint>(__sendDoubleActionToCellAt: P0): R;
    sendAction<R = boolean>(): R;
    _keyEquivalentModifierMask_matchesModifierFlags<R = boolean, P0 = number, P1 = number>(__keyEquivalentModifierMask: P0, _matchesModifierFlags: P1): R;
    _allowAnimationInCells<R = void, P0 = boolean>(__allowAnimationInCells: P0): R;
    _mouseLoop<R = void, P0 = unknown>(__mouseLoop: P0): R;
    _normalListmodeDown<R = unknown, P0 = unknown>(__normalListmodeDown: P0): R;
    _alternateDown<R = unknown, P0 = unknown>(__alternateDown: P0): R;
    _shiftDown<R = unknown, P0 = unknown>(__shiftDown: P0): R;
    _cellFurthestFrom_andCol<R = number, P0 = number, P1 = number>(__cellFurthestFrom: P0, _andCol: P1): R;
    _firstHighlightedCell<R = unknown>(): R;
    _selectRowRange<R = unknown, P0 = _SelectionAnchor>(__selectRowRange: P0): R;
    _selectRectRange<R = unknown, P0 = _SelectionAnchor>(__selectRectRange: P0): R;
    _selectRange_oldArea_lit_includeX<R = unknown, P0 = _SelectionAnchor, P1 = _SelectionAnchor, P2 = boolean, P3 = boolean>(__selectRange: P0, _oldArea: P1, _lit: P2, _includeX: P3): R;
    _setSelectionRange<R = unknown, P0 = _SelectionAnchor>(__setSelectionRange: P0): R;
    setSelectionFrom_to_anchor_highlight<R = void, P0 = number, P1 = number, P2 = number, P3 = boolean>(_setSelectionFrom: P0, _to: P1, _anchor: P2, _highlight: P3): R;
    _mouseDownSimpleTrackingMode<R = unknown, P0 = unknown>(__mouseDownSimpleTrackingMode: P0): R;
    _mouseDownNonListmode<R = unknown, P0 = unknown>(__mouseDownNonListmode: P0): R;
    _mouseDownListmode<R = void, P0 = unknown>(__mouseDownListmode: P0): R;
    _performDragFromMouseDown<R = boolean, P0 = unknown>(__performDragFromMouseDown: P0): R;
    altModifySelection<R = void, P0 = unknown>(_altModifySelection: P0): R;
    shiftModifySelection<R = void, P0 = unknown>(_shiftModifySelection: P0): R;
    _makeEditable<R = unknown, P0 = unknown>(__makeEditable: P0): R;
    _setAllowsNonVisibleCellsToBecomeFirstResponder<R = void, P0 = boolean>(__setAllowsNonVisibleCellsToBecomeFirstResponder: P0): R;
    _browserOptimizationsEnabled<R = boolean>(): R;
    _setBrowserOptimizationsEnabled<R = void, P0 = boolean>(__setBrowserOptimizationsEnabled: P0): R;
    _pageUpWithEvent<R = void, P0 = unknown>(__pageUpWithEvent: P0): R;
    _pageDownWithEvent<R = void, P0 = unknown>(__pageDownWithEvent: P0): R;
    _keyboardModifyRow_column_withEvent<R = void, P0 = number, P1 = number, P2 = unknown>(__keyboardModifyRow: P0, _column: P1, _withEvent: P2): R;
    _acceptableRowAboveRow_tryBelowPoint<R = number, P0 = number, P1 = CGPoint>(__acceptableRowAboveRow: P0, _tryBelowPoint: P1): R;
    _acceptableRowBelowRow_tryAbovePoint<R = number, P0 = number, P1 = CGPoint>(__acceptableRowBelowRow: P0, _tryAbovePoint: P1): R;
    _acceptableRowAboveKeyInVisibleRect<R = number, P0 = CGRect>(__acceptableRowAboveKeyInVisibleRect: P0): R;
    _acceptableRowBelowKeyInVisibleRect<R = number, P0 = CGRect>(__acceptableRowBelowKeyInVisibleRect: P0): R;
    _acceptableRowBelowRow_maxRow<R = number, P0 = number, P1 = number>(__acceptableRowBelowRow: P0, _maxRow: P1): R;
    _acceptableRowAboveRow_minRow<R = number, P0 = number, P1 = number>(__acceptableRowAboveRow: P0, _minRow: P1): R;
    _cellForRow_browser_browserColumn<R = unknown, P0 = number, P1 = unknown, P2 = number>(__cellForRow: P0, _browser: P1, _browserColumn: P2): R;
    _browserColumnController<R = unknown>(): R;
    _getBrowser_browserColumn<R = void, P0 = unknown, P1 = number>(__getBrowser: P0, _browserColumn: P1): R;
    _setKeyCellFromBottom<R = void>(): R;
    _setKeyCellFromTop<R = void>(): R;
    _moveLeftWithEvent<R = void, P0 = unknown>(__moveLeftWithEvent: P0): R;
    _moveRightWithEvent<R = void, P0 = unknown>(__moveRightWithEvent: P0): R;
    _moveUpWithEvent<R = void, P0 = unknown>(__moveUpWithEvent: P0): R;
    _moveDownWithEvent<R = void, P0 = unknown>(__moveDownWithEvent: P0): R;
    _changeSelectionWithEvent<R = void, P0 = unknown>(__changeSelectionWithEvent: P0): R;
    _changingSelectionWithKeyboard<R = boolean>(): R;
    moveDown<R = void, P0 = unknown>(_moveDown: P0): R;
    moveUp<R = void, P0 = unknown>(_moveUp: P0): R;
    moveRight<R = void, P0 = unknown>(_moveRight: P0): R;
    moveLeft<R = void, P0 = unknown>(_moveLeft: P0): R;
    selectPreviousKeyView<R = void, P0 = unknown>(_selectPreviousKeyView: P0): R;
    selectNextKeyView<R = void, P0 = unknown>(_selectNextKeyView: P0): R;
    _makeDownCellKey<R = void>(): R;
    _makeUpCellKey<R = void>(): R;
    _makeRightCellKey<R = void>(): R;
    _makeLeftCellKey<R = void>(): R;
    _makePreviousCellOrViewKey<R = void>(): R;
    _makePreviousCellKey<R = boolean>(): R;
    _makeNextCellOrViewKey<R = void>(): R;
    _makeNextCellKey<R = boolean>(): R;
    _selectNextCellKeyStartingAtRow_column<R = boolean, P0 = number, P1 = number>(__selectNextCellKeyStartingAtRow: P0, _column: P1): R;
    _selectKeyCellAtRow_column<R = void, P0 = number, P1 = number>(__selectKeyCellAtRow: P0, _column: P1): R;
    keyCell<R = unknown>(): R;
    __keyCol<R = number>(): R;
    __keyRow<R = number>(): R;
    setKeyCell<R = void, P0 = unknown>(_setKeyCell: P0): R;
    _clearKeyCell<R = void>(): R;
    _setKeyCellAtRow_column<R = void, P0 = number, P1 = number>(__setKeyCellAtRow: P0, _column: P1): R;
    _setKeyCellNeedsDisplay<R = void>(): R;
    setTabKeyTraversesCells<R = void, P0 = boolean>(_setTabKeyTraversesCells: P0): R;
    tabKeyTraversesCells<R = boolean>(): R;
    refusesFirstResponder<R = boolean>(): R;
    setRefusesFirstResponder<R = void, P0 = boolean>(_setRefusesFirstResponder: P0): R;
    _shouldShowFirstResponderAtRow_column_ignoringWindowKeyState<R = boolean, P0 = number, P1 = number, P2 = boolean>(__shouldShowFirstResponderAtRow: P0, _column: P1, _ignoringWindowKeyState: P2): R;
    _deselectAllExcept_andDraw<R = void, P0 = number, P1 = boolean>(__deselectAllExcept: P0, _andDraw: P1): R;
    _radioHit_row_col<R = boolean, P0 = CGPoint, P1 = number, P2 = number>(__radioHit: P0, _row: P1, _col: P2): R;
    _loopHit_row_col<R = boolean, P0 = CGPoint, P1 = number, P2 = number>(__loopHit: P0, _row: P1, _col: P2): R;
    _mouseHit_row_col<R = boolean, P0 = CGPoint, P1 = number, P2 = number>(__mouseHit: P0, _row: P1, _col: P2): R;
    scrollCellToVisibleAtRow_column<R = void, P0 = number, P1 = number>(_scrollCellToVisibleAtRow: P0, _column: P1): R;
    _scrollRowToCenter<R = unknown, P0 = number>(__scrollRowToCenter: P0): R;
    drawContextMenuHighlightForCellIndexes<R = void, P0 = unknown>(_drawContextMenuHighlightForCellIndexes: P0): R;
    _shouldDrawContextMenuHighlightForRow_column<R = boolean, P0 = number, P1 = number>(__shouldDrawContextMenuHighlightForRow: P0, _column: P1): R;
    _drawCellAtRow_column_inFrame<R = void, P0 = number, P1 = number, P2 = CGRect>(__drawCellAtRow: P0, _column: P1, _inFrame: P2): R;
    _getRowRange_andColumnRange_intersectingRect<R = void, P0 = _NSRange, P1 = _NSRange, P2 = CGRect>(__getRowRange: P0, _andColumnRange: P1, _intersectingRect: P2): R;
    _selectFirstEnabledCell<R = boolean>(): R;
    _firstSelectableRow<R = number>(): R;
    highlightCell_atRow_column<R = void, P0 = boolean, P1 = number, P2 = number>(_highlightCell: P0, _atRow: P1, _column: P2): R;
    _highlightCell_atRow_column_andDraw<R = void, P0 = boolean, P1 = number, P2 = number, P3 = boolean>(__highlightCell: P0, _atRow: P1, _column: P2, _andDraw: P3): R;
    drawCellAtRow_column<R = void, P0 = number, P1 = number>(_drawCellAtRow: P0, _column: P1): R;
    _drawCellAt_col_insideOnly<R = void, P0 = number, P1 = number, P2 = boolean>(__drawCellAt: P0, _col: P1, _insideOnly: P2): R;
    _setNeedsDisplayForSelectedCells<R = void>(): R;
    _getVisibleRowRange_columnRange<R = void, P0 = _NSRange, P1 = _NSRange>(__getVisibleRowRange: P0, _columnRange: P1): R;
    _setNeedsDisplayInRow_column<R = void, P0 = number, P1 = number>(__setNeedsDisplayInRow: P0, _column: P1): R;
    setValidateSize<R = void, P0 = boolean>(_setValidateSize: P0): R;
    sizeToCells<R = void>(): R;
    _autorecalculateCellSize<R = void>(): R;
    _computeAllRevealovers<R = void>(): R;
    setTag_target_action_atRow_column<R = void, P0 = number, P1 = unknown, P2 = string, P3 = number, P4 = number>(_setTag: P0, _target: P1, _action: P2, _atRow: P3, _column: P4): R;
    setAction_atRow_column<R = void, P0 = string, P1 = number, P2 = number>(_setAction: P0, _atRow: P1, _column: P2): R;
    setTarget_atRow_column<R = void, P0 = unknown, P1 = number, P2 = number>(_setTarget: P0, _atRow: P1, _column: P2): R;
    setTag_atRow_column<R = void, P0 = number, P1 = number, P2 = number>(_setTag: P0, _atRow: P1, _column: P2): R;
    cellWithTag<R = unknown, P0 = number>(_cellWithTag: P0): R;
    removeColumn<R = void, P0 = number>(_removeColumn: P0): R;
    insertColumn_withCells<R = void, P0 = number, P1 = unknown>(_insertColumn: P0, _withCells: P1): R;
    _needsDisplayfromColumn<R = void, P0 = number>(__needsDisplayfromColumn: P0): R;
    insertColumn<R = void, P0 = number>(_insertColumn: P0): R;
    addColumnWithCells<R = void, P0 = unknown>(_addColumnWithCells: P0): R;
    addColumn<R = void>(): R;
    removeRow<R = void, P0 = number>(_removeRow: P0): R;
    insertRow_withCells<R = void, P0 = number, P1 = unknown>(_insertRow: P0, _withCells: P1): R;
    _needsDisplayfromRow<R = void, P0 = number>(__needsDisplayfromRow: P0): R;
    insertRow<R = void, P0 = number>(_insertRow: P0): R;
    addRowWithCells<R = void, P0 = unknown>(_addRowWithCells: P0): R;
    addRow<R = void>(): R;
    putCell_atRow_column<R = void, P0 = unknown, P1 = number, P2 = number>(_putCell: P0, _atRow: P1, _column: P2): R;
    renewRows_columns<R = void, P0 = number, P1 = number>(_renewRows: P0, _columns: P1): R;
    _getRow_column_nearPoint<R = void, P0 = number, P1 = number, P2 = CGPoint>(__getRow: P0, _column: P1, _nearPoint: P2): R;
    getRow_column_forPoint<R = boolean, P0 = number, P1 = number, P2 = CGPoint>(_getRow: P0, _column: P1, _forPoint: P2): R;
    getRow_column_ofCell<R = boolean, P0 = number, P1 = number, P2 = unknown>(_getRow: P0, _column: P1, _ofCell: P2): R;
    _getRow_andCol_ofCell_atRect<R = boolean, P0 = number, P1 = number, P2 = unknown, P3 = CGRect>(__getRow: P0, _andCol: P1, _ofCell: P2, _atRect: P3): R;
    _getDrawingRow_andCol<R = unknown, P0 = number, P1 = number>(__getDrawingRow: P0, _andCol: P1): R;
    _boundsRectOccupiedByCells<R = CGRect>(): R;
    cellFrameAtRow_column<R = CGRect, P0 = number, P1 = number>(_cellFrameAtRow: P0, _column: P1): R;
    cellAtRow_column<R = unknown, P0 = number, P1 = number>(_cellAtRow: P0, _column: P1): R;
    getNumberOfRows_columns<R = void, P0 = number, P1 = number>(_getNumberOfRows: P0, _columns: P1): R;
    setState_atRow_column<R = void, P0 = number, P1 = number, P2 = number>(_setState: P0, _atRow: P1, _column: P2): R;
    setScrollable<R = void, P0 = boolean>(_setScrollable: P0): R;
    setEnabled<R = void, P0 = boolean>(_setEnabled: P0): R;
    selectCellWithTag<R = boolean, P0 = number>(_selectCellWithTag: P0): R;
    selectAll<R = void, P0 = unknown>(_selectAll: P0): R;
    _selectAllNoRecurse<R = void, P0 = unknown>(__selectAllNoRecurse: P0): R;
    selectCellAtRow_column<R = void, P0 = number, P1 = number>(_selectCellAtRow: P0, _column: P1): R;
    deselectAllCells<R = void>(): R;
    deselectSelectedCell<R = void>(): R;
    _clearSelectedCell<R = boolean>(): R;
    sortUsingSelector<R = void, P0 = string>(_sortUsingSelector: P0): R;
    sortUsingFunction_context<R = void, P0 = CDUnknownFunctionPointerType, P1 = void>(_sortUsingFunction: P0, _context: P1): R;
    sendAction_to_forAllCells<R = void, P0 = string, P1 = unknown, P2 = boolean>(_sendAction: P0, _to: P1, _forAllCells: P2): R;
    allowEmptySel<R = unknown, P0 = boolean>(_allowEmptySel: P0): R;
    _isRTL<R = boolean>(): R;
    isFlipped<R = boolean>(): R;
    makeCellAtRow_column<R = unknown, P0 = number, P1 = number>(_makeCellAtRow: P0, _column: P1): R;
    _containedInSingleColumnClipView<R = boolean>(): R;
    initWithFrame_mode_cellClass_numberOfRows_numberOfColumns<R = unknown, P0 = CGRect, P1 = number, P2 = unknown, P3 = number, P4 = number>(_initWithFrame: P0, _mode: P1, _cellClass: P2, _numberOfRows: P3, _numberOfColumns: P4): R;
    initWithFrame_mode_prototype_numberOfRows_numberOfColumns<R = unknown, P0 = CGRect, P1 = number, P2 = unknown, P3 = number, P4 = number>(_initWithFrame: P0, _mode: P1, _prototype: P2, _numberOfRows: P3, _numberOfColumns: P4): R;
    _initialize<R = unknown, P0 = number>(__initialize: P0): R;
    _maintainCell<R = void>(): R;
    _setSelectedCell<R = void, P0 = unknown>(__setSelectedCell: P0): R;
    _setSelectedCell_atRow_column<R = void, P0 = unknown, P1 = number, P2 = number>(__setSelectedCell: P0, _atRow: P1, _column: P2): R;
    _setFont_forCell<R = void, P0 = unknown, P1 = unknown>(__setFont: P0, _forCell: P1): R;
    _allocAndInitPrivateIvars<R = void>(): R;
    setErrorAction<R = void, P0 = string>(_setErrorAction: P0): R;
    errorAction<R = string>(): R;
    _isAccessibilityTopLevelNavigatorSectionCandidate<R = boolean>(): R;
    _isAccessibilityContentNavigatorSectionCandidate<R = boolean>(): R;
    accessibilityIsVisibleChildrenAttributeSettable<R = boolean>(): R;
    accessibilityVisibleChildrenAttribute<R = unknown>(): R;
    accessibilityIsValueAttributeSettable<R = boolean>(): R;
    accessibilityValueAttribute<R = unknown>(): R;
    accessibilitySetSelectedChildrenAttribute<R = void, P0 = unknown>(_accessibilitySetSelectedChildrenAttribute: P0): R;
    accessibilityIsSelectedChildrenAttributeSettable<R = boolean>(): R;
    accessibilitySelectedChildrenAttribute<R = unknown>(): R;
    accessibilityArrayAttributeValues_index_maxCount<R = unknown, P0 = unknown, P1 = number, P2 = number>(_accessibilityArrayAttributeValues: P0, _index: P1, _maxCount: P2): R;
    accessibilityArrayAttributeCount<R = number, P0 = unknown>(_accessibilityArrayAttributeCount: P0): R;
    accessibilityIndexOfChild<R = number, P0 = unknown>(_accessibilityIndexOfChild: P0): R;
    accessibilityIsOrientationAttributeSettable<R = boolean>(): R;
    accessibilityOrientationAttribute<R = unknown>(): R;
    accessiblityChildCells<R = unknown>(): R;
    _accessibilityLoadBrowserCellsAtRow_count<R = void, P0 = number, P1 = number>(__accessibilityLoadBrowserCellsAtRow: P0, _count: P1): R;
    _accessibilityCorrectlyParentedCells<R = unknown, P0 = unknown>(__accessibilityCorrectlyParentedCells: P0): R;
    _accessibilityIsRadioGroup<R = boolean>(): R;
    accessibilityCurrentEditorForCell<R = unknown, P0 = unknown>(_accessibilityCurrentEditorForCell: P0): R;
    delegate<R = NSMatrixDelegate>(): R;
    setDelegate<R = void, P0 = NSMatrixDelegate>(_v: P0): R;
    mouseDownFlags<R = number>(): R;
    autoscroll<R = boolean>(): R;
    setAutoscroll<R = void, P0 = boolean>(_v: P0): R;
    autorecalculatesCellSize<R = boolean>(): R;
    setAutorecalculatesCellSize<R = void, P0 = boolean>(_v: P0): R;
    autosizesCells<R = boolean>(): R;
    setAutosizesCells<R = void, P0 = boolean>(_v: P0): R;
    doubleAction<R = string>(): R;
    setDoubleAction<R = void, P0 = string>(_v: P0): R;
    numberOfColumns<R = number>(): R;
    numberOfRows<R = number>(): R;
    drawsCellBackground<R = boolean>(): R;
    setDrawsCellBackground<R = void, P0 = boolean>(_v: P0): R;
    cellBackgroundColor<R = NSColor>(): R;
    setCellBackgroundColor<R = void, P0 = NSColor>(_v: P0): R;
    drawsBackground<R = boolean>(): R;
    setDrawsBackground<R = void, P0 = boolean>(_v: P0): R;
    backgroundColor<R = NSColor>(): R;
    setBackgroundColor<R = void, P0 = NSColor>(_v: P0): R;
    intercellSpacing<R = CGSize>(): R;
    setIntercellSpacing<R = void, P0 = CGSize>(_v: P0): R;
    cellSize<R = CGSize>(): R;
    setCellSize<R = void, P0 = CGSize>(_v: P0): R;
    selectionByRect<R = boolean>(): R;
    setSelectionByRect<R = void, P0 = boolean>(_v: P0): R;
    selectedColumn<R = number>(): R;
    selectedRow<R = number>(): R;
    selectedCells<R = NSArray>(): R;
    selectedCell<R = NSCell>(): R;
    cells<R = NSArray>(): R;
    allowsEmptySelection<R = boolean>(): R;
    setAllowsEmptySelection<R = void, P0 = boolean>(_v: P0): R;
    mode<R = number>(): R;
    setMode<R = void, P0 = number>(_v: P0): R;
    prototype<R = NSCell>(): R;
    setPrototype<R = void, P0 = NSCell>(_v: P0): R;
    cellClass<R = unknown>(): R;
    setCellClass<R = void, P0 = unknown>(_v: P0): R;
    debugDescription<R = NSString>(): R;
    description<R = NSString>(): R;
    hash<R = number>(): R;
    superclass<R = unknown>(): R;
  }
  namespace classes {
    export interface NSMatrix<T = any> extends NSControl, NSUserInterfaceValidationsProtocol, NSViewToolTipOwnerProtocol {
      alloc<R = NSMatrix>(): R;
      new: <R = NSMatrix>() => R;
      _dropHighlightColor<R = unknown>(): R;
    }
  }
}

declare const NSMatrix: cocoa.classes.NSMatrix;
