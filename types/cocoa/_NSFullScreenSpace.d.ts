/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface _NSFullScreenSpace<T = any> extends NSObject, NSAnimationDelegateProtocol {
    _showTileDividerWindows<R = void>(): R;
    _hideTileDividerWindows<R = void>(): R;
    _removeEastTileDividerWindow<R = void>(): R;
    _removeWestTileDividerWindow<R = void>(): R;
    _removeTileDividerWindows<R = void>(): R;
    _reshapeTileDividerWindows<R = void>(): R;
    _updateTileDividerWindows<R = void>(): R;
    _effectiveSpaceResizeDirections<R = number>(): R;
    replaceContentWithSnapshotForClose<R = void>(): R;
    isPerformingExternalCloseAnimation<R = boolean>(): R;
    beginSeparateExternalCloseAnimation<R = void>(): R;
    backgroundWindowIDs<R = unknown>(): R;
    windowIDsInTile<R = unknown>(): R;
    isLeftTile<R = boolean>(): R;
    siblingFullScreenSpaceFromThisApp<R = unknown>(): R;
    hasSiblingFromThisApp<R = boolean>(): R;
    updateTileShapeAndReshapeContentsUsingTileFrame_ackServer<R = void, P0 = CGRect, P1 = boolean>(_updateTileShapeAndReshapeContentsUsingTileFrame: P0, _ackServer: P1): R;
    updateTileShapeAndReshapeContentsUsingTileFrame<R = void, P0 = CGRect>(_updateTileShapeAndReshapeContentsUsingTileFrame: P0): R;
    _updateTileShapeAndReshapeContentsWithAckServer<R = void, P0 = boolean>(__updateTileShapeAndReshapeContentsWithAckServer: P0): R;
    updateTileShapeAndReshapeContents<R = void>(): R;
    updateTileShapeAndReshapeContentsWithoutNotifyingServer<R = void>(): R;
    tileContentRect<R = CGRect>(): R;
    tileToolbarContentRect<R = CGRect>(): R;
    availableWallSpaceSize<R = CGSize>(): R;
    tileFillsScreen<R = boolean>(): R;
    parentSpaceCGRect<R = CGRect>(): R;
    wallSpaceRect<R = CGRect>(): R;
    tileRect<R = CGRect>(): R;
    updateTileShape<R = void>(): R;
    _cacheTileRect<R = void, P0 = CGRect>(__cacheTileRect: P0): R;
    wallSpaceID<R = number>(): R;
    parentSpaceID<R = number>(): R;
    modelBackingIsValid<R = boolean>(): R;
    invalidateModelBacking<R = void>(): R;
    screen<R = unknown>(): R;
    displayChanged<R = void>(): R;
    parentSpaceRelocated<R = void>(): R;
    suppressImplicitFullScreenForOtherWindows<R = boolean>(): R;
    _spaceConsideredVisible<R = boolean>(): R;
    dealloc<R = void>(): R;
    resolveTileSpaceID<R = void, P0 = number>(_resolveTileSpaceID: P0): R;
    initWithTileSpaceID<R = unknown, P0 = number>(_initWithTileSpaceID: P0): R;
    interruptTransitions<R = void>(): R;
    removeTransition<R = void, P0 = unknown>(_removeTransition: P0): R;
    startTransition<R = void, P0 = unknown>(_startTransition: P0): R;
    _didBeginExitTransition<R = void>(): R;
    isExitingFullScreen<R = boolean>(): R;
    isEnteringFullScreen<R = boolean>(): R;
    isInFullScreen<R = boolean>(): R;
    isTransitioning<R = boolean>(): R;
    inLiveResize<R = boolean>(): R;
    endLiveResize<R = void>(): R;
    startLiveResize<R = void>(): R;
    cursorForResizeDirection<R = unknown, P0 = number>(_cursorForResizeDirection: P0): R;
    currentDividerResizeDirections<R = unknown>(): R;
    performDividerDragWithEvent_forResizeDirection<R = boolean, P0 = unknown, P1 = number>(_performDividerDragWithEvent: P0, _forResizeDirection: P1): R;
    tileOverlayWindow<R = unknown>(): R;
    updateOverlayWithBlur<R = void, P0 = boolean>(_updateOverlayWithBlur: P0): R;
    hideOverlayWindow<R = void>(): R;
    showOverlayWindowFromFrame_blurContent<R = void, P0 = CGRect, P1 = boolean>(_showOverlayWindowFromFrame: P0, _blurContent: P1): R;
    showingOverlayWindowFrame<R = boolean>(): R;
    _endOverlayPresentation<R = void, P0 = unknown>(__endOverlayPresentation: P0): R;
    _beginOverlayPresentation<R = void, P0 = unknown>(__beginOverlayPresentation: P0): R;
    cancelSiblingOverlayAnimations<R = void>(): R;
    removeSiblingOverlayWindow<R = void>(): R;
    updateSiblingOverlayWindow<R = void>(): R;
    beginSiblingOverlayPresentationIfNeeded<R = void>(): R;
    setupSiblingOverlayWindowImmediately_blurContent<R = void, P0 = boolean, P1 = boolean>(_setupSiblingOverlayWindowImmediately: P0, _blurContent: P1): R;
    showingSiblingTileOverlayWindow<R = boolean>(): R;
    performResizeCrossfadeIfNeeded<R = void>(): R;
    prepareResizeCrossfadeOverlayWithDuration_resize<R = void, P0 = number, P1 = boolean>(_prepareResizeCrossfadeOverlayWithDuration: P0, _resize: P1): R;
    _cancelResizeCrossfadeAnimation<R = void>(): R;
    suppressFetchingNewTileSize<R = void>(): R;
    perfTestResizeWindow<R = unknown>(): R;
    _menuBarRevealUpdated<R = void, P0 = number>(__menuBarRevealUpdated: P0): R;
    _animateMenuBarTo_startingAt_duration<R = void, P0 = number, P1 = number, P2 = number>(__animateMenuBarTo: P0, _startingAt: P1, _duration: P2): R;
    _cancelMenuRevealAnimationIfNeeded<R = void>(): R;
    captureSnapshotIncludingMenuBar_contentRect<R = CGImage, P0 = boolean, P1 = CGRect>(_captureSnapshotIncludingMenuBar: P0, _contentRect: P1): R;
    rightReservedSpace<R = number>(): R;
    setRightReservedSpace<R = void, P0 = number>(_v: P0): R;
    leftReservedSpace<R = number>(): R;
    setLeftReservedSpace<R = void, P0 = number>(_v: P0): R;
    bottomReservedSpace<R = number>(): R;
    setBottomReservedSpace<R = void, P0 = number>(_v: P0): R;
    exitReplacementWindowID<R = number>(): R;
    createTileDropTargetController<R = _NSFullScreenCreateTileDropTargetController>(): R;
    modalStackController<R = _NSFullScreenModalStackController>(): R;
    backdropController<R = _NSFullScreenBackdropController>(): R;
    contentController<R = _NSFullScreenContentController>(): R;
    setContentController<R = void, P0 = _NSFullScreenContentController>(_v: P0): R;
    tileSpaceID<R = number>(): R;
    debugDescription<R = NSString>(): R;
    description<R = NSString>(): R;
    hash<R = number>(): R;
    superclass<R = unknown>(): R;
  }
  namespace classes {
    export interface _NSFullScreenSpace<T = any> extends NSObject, NSAnimationDelegateProtocol {
      alloc<R = _NSFullScreenSpace>(): R;
      new: <R = _NSFullScreenSpace>() => R;
      tileRectForSpaceWithID<R = CGRect, P0 = number>(_tileRectForSpaceWithID: P0): R;
      spaceWithContentWindowID<R = unknown, P0 = number>(_spaceWithContentWindowID: P0): R;
      hasTransitionForWindowID_ofClass<R = boolean, P0 = number, P1 = unknown>(_hasTransitionForWindowID: P0, _ofClass: P1): R;
      hasTransitionForWindowID<R = boolean, P0 = number>(_hasTransitionForWindowID: P0): R;
      hasSpaceEnteringOrExitingFullScreen<R = boolean>(): R;
      fullScreenSpaceEnteringFullScreen<R = unknown>(): R;
      visibleFullScreenSpaceOnScreen<R = unknown, P0 = unknown>(_visibleFullScreenSpaceOnScreen: P0): R;
      visibleFullScreenSpaces<R = unknown>(): R;
      fullScreenSpaces<R = unknown>(): R;
      hasVisibleFullScreenSpaces<R = boolean>(): R;
      _unregisterCGSNotificationsForAllSpaces<R = void>(): R;
      _registerCGSNotificationsIfNeededForSpace<R = void, P0 = unknown>(__registerCGSNotificationsIfNeededForSpace: P0): R;
      placeholderFullScreenSpace<R = unknown>(): R;
      fullScreenSpaceWithTileID_createIfNeeded<R = unknown, P0 = number, P1 = boolean>(_fullScreenSpaceWithTileID: P0, _createIfNeeded: P1): R;
      fullScreenSpaceWithTileID<R = unknown, P0 = number>(_fullScreenSpaceWithTileID: P0): R;
      _placeholderFullScreenInstances<R = unknown>(): R;
      _fullScreenMapTable<R = unknown>(): R;
    }
  }
}
