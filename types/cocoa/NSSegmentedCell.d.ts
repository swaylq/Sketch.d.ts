/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface NSSegmentedCell<T = any> extends NSActionCell {
    _setSelectedSegmentBezelColor<R = void, P0 = unknown>(__setSelectedSegmentBezelColor: P0): R;
    _selectedSegmentBezelColor<R = unknown>(): R;
    _applicableTrackingModeForSegment<R = number, P0 = number>(__applicableTrackingModeForSegment: P0): R;
    _proRecalcToolTips<R = boolean>(): R;
    _proSetRecalcToolTips<R = void, P0 = boolean>(__proSetRecalcToolTips: P0): R;
    interiorBackgroundStyleForSegment<R = number, P0 = number>(_interiorBackgroundStyleForSegment: P0): R;
    _keyEquivalentUniquerCreatingIfNecessary<R = unknown, P0 = boolean>(__keyEquivalentUniquerCreatingIfNecessary: P0): R;
    _setMenuShouldBeUniquedAgainstMainMenu<R = void, P0 = boolean>(__setMenuShouldBeUniquedAgainstMainMenu: P0): R;
    _removeAllToolTips<R = void>(): R;
    _displayDelayedMenu<R = void>(): R;
    _trackSelectedItemMenu<R = void>(): R;
    _calculateSelectedSegmentForPoint<R = void, P0 = CGPoint>(__calculateSelectedSegmentForPoint: P0): R;
    indexOfSegmentContainingPoint_inCellFrame<R = number, P0 = CGPoint, P1 = CGRect>(_indexOfSegmentContainingPoint: P0, _inCellFrame: P1): R;
    _performClick_ignoreMenus<R = void, P0 = unknown, P1 = boolean>(__performClick: P0, _ignoreMenus: P1): R;
    _performClick_onSegment_ignoreMenus<R = void, P0 = unknown, P1 = number, P2 = boolean>(__performClick: P0, _onSegment: P1, _ignoreMenus: P2): R;
    _selectHighlightedSegment<R = void>(): R;
    _acceleratorTimerFired<R = void>(): R;
    _cleanupTracking<R = void>(): R;
    _setupForTackingAtLocation_inRect_ofView_latchingToSingleSegment<R = boolean, P0 = CGPoint, P1 = CGRect, P2 = unknown, P3 = boolean>(__setupForTackingAtLocation: P0, _inRect: P1, _ofView: P2, _latchingToSingleSegment: P3): R;
    _trackMouse_forSegment_inRects_count_inCellFrame_ofView_untilMouseUp<R = boolean, P0 = unknown, P1 = number, P2 = CGRect, P3 = number, P4 = CGRect, P5 = unknown, P6 = boolean>(__trackMouse: P0, _forSegment: P1, _inRects: P2, _count: P3, _inCellFrame: P4, _ofView: P5, _untilMouseUp: P6): R;
    _menuDelayTimeForSegment<R = number, P0 = number>(__menuDelayTimeForSegment: P0): R;
    _segmentedMenuDragSlopRect<R = number>(): R;
    _segmentedMenuDelayTime<R = number>(): R;
    drawSegment_inFrame_withView<R = void, P0 = number, P1 = CGRect, P2 = unknown>(_drawSegment: P0, _inFrame: P1, _withView: P2): R;
    _controlOrCellhasDrawingOverrides<R = boolean, P0 = unknown>(__controlOrCellhasDrawingOverrides: P0): R;
    _usesItemViews<R = boolean>(): R;
    _effectiveBackgroundStyleForSegment_inView_forSpecifiedStyle_isTemplate<R = number, P0 = number, P1 = unknown, P2 = number, P3 = boolean>(__effectiveBackgroundStyleForSegment: P0, _inView: P1, _forSpecifiedStyle: P2, _isTemplate: P3): R;
    _shouldDrawBezel<R = boolean>(): R;
    _shouldUseAlternateImageForSegment<R = boolean, P0 = number>(__shouldUseAlternateImageForSegment: P0): R;
    _copyCoreUIBackgroundDrawOptionsForSegment_inView_drawFlags<R = __CFDictionary, P0 = number, P1 = unknown, P2 = number>(__copyCoreUIBackgroundDrawOptionsForSegment: P0, _inView: P1, _drawFlags: P2): R;
    _segmentHighlightState<R = number, P0 = number>(__segmentHighlightState: P0): R;
    _getVisualStateForSegment_andTrackingMode_forApplicableStyle<R = number, P0 = number, P1 = number, P2 = number>(__getVisualStateForSegment: P0, _andTrackingMode: P1, _forApplicableStyle: P2): R;
    _applicableSegmentedCellStyle<R = number>(): R;
    _wantsMenuIndicatorForSegment<R = boolean, P0 = number>(__wantsMenuIndicatorForSegment: P0): R;
    rectForSegment_inFrame<R = CGRect, P0 = number, P1 = CGRect>(_rectForSegment: P0, _inFrame: P1): R;
    _labelRectForSegment_inFrame_withView<R = CGRect, P0 = number, P1 = CGRect, P2 = unknown>(__labelRectForSegment: P0, _inFrame: P1, _withView: P2): R;
    _rectForSegment_inFrame<R = CGRect, P0 = number, P1 = CGRect>(__rectForSegment: P0, _inFrame: P1): R;
    _adjustRectForR2L_inFrame<R = void, P0 = CGRect, P1 = CGRect>(__adjustRectForR2L: P0, _inFrame: P1): R;
    _boundsForCellFrame<R = CGRect, P0 = CGRect>(__boundsForCellFrame: P0): R;
    isOpaque<R = boolean>(): R;
    _setCompressibleOptions_forControlView<R = void, P0 = unknown, P1 = unknown>(__setCompressibleOptions: P0, _forControlView: P1): R;
    _compressibleOptionsForControlView<R = unknown, P0 = unknown>(__compressibleOptionsForControlView: P0): R;
    _minimumCellSizeWithOptions_forBounds<R = CGSize, P0 = unknown, P1 = CGRect>(__minimumCellSizeWithOptions: P0, _forBounds: P1): R;
    minimumCellSizeForBounds<R = CGSize, P0 = CGRect>(_minimumCellSizeForBounds: P0): R;
    _cellSizeForBounds_distribution<R = CGSize, P0 = CGRect, P1 = number>(__cellSizeForBounds: P0, _distribution: P1): R;
    _setHidesUnselectedLabelsWhenNecessary<R = void, P0 = boolean>(__setHidesUnselectedLabelsWhenNecessary: P0): R;
    _hidesUnselectedLabelsWhenNecessary<R = boolean>(): R;
    springLoadingExited<R = void, P0 = unknown>(_springLoadingExited: P0): R;
    springLoadingHighlightChanged<R = void, P0 = unknown>(_springLoadingHighlightChanged: P0): R;
    springLoadingActivated_draggingInfo<R = void, P0 = boolean, P1 = unknown>(_springLoadingActivated: P0, _draggingInfo: P1): R;
    springLoadingUpdated<R = number, P0 = unknown>(_springLoadingUpdated: P0): R;
    springLoadingEntered<R = number, P0 = unknown>(_springLoadingEntered: P0): R;
    _springLoadSegment<R = void, P0 = boolean>(__springLoadSegment: P0): R;
    _setSpringLoadingSegment<R = void, P0 = number>(__setSpringLoadingSegment: P0): R;
    _springLoadingSegment<R = number>(): R;
    _updateMouseTracking<R = void>(): R;
    _postRolloverNotification<R = void>(): R;
    _segmentShowingRollover<R = number>(): R;
    _invalidateSegmentSizes<R = void>(): R;
    setControlSize<R = void, P0 = number>(_setControlSize: P0): R;
    setFont<R = void, P0 = unknown>(_setFont: P0): R;
    _segmentAlignmentRectInsetsForControlView<R = NSEdgeInsets, P0 = unknown>(__segmentAlignmentRectInsetsForControlView: P0): R;
    _baselineOffsetFromBottomOfControlView<R = number, P0 = unknown>(__baselineOffsetFromBottomOfControlView: P0): R;
    setUserInterfaceLayoutDirection<R = void, P0 = number>(_setUserInterfaceLayoutDirection: P0): R;
    _isFlatOnEdge<R = boolean, P0 = number>(__isFlatOnEdge: P0): R;
    _setIsFlat_onEdge<R = void, P0 = boolean, P1 = number>(__setIsFlat: P0, _onEdge: P1): R;
    accessibilityLabelForSegment<R = unknown, P0 = number>(_accessibilityLabelForSegment: P0): R;
    setAccessibilityLabel_forSegment<R = void, P0 = unknown, P1 = number>(_setAccessibilityLabel: P0, _forSegment: P1): R;
    alignmentForSegment<R = number, P0 = number>(_alignmentForSegment: P0): R;
    setAlignment_forSegment<R = void, P0 = number, P1 = number>(_setAlignment: P0, _forSegment: P1): R;
    isMenuIndicatorShownForSegment<R = boolean, P0 = number>(_isMenuIndicatorShownForSegment: P0): R;
    setMenuIndicatorShown_forSegment<R = void, P0 = boolean, P1 = number>(_setMenuIndicatorShown: P0, _forSegment: P1): R;
    showsMenuIndicatorForSegment<R = boolean, P0 = number>(_showsMenuIndicatorForSegment: P0): R;
    setShowsMenuIndicator_forSegment<R = void, P0 = boolean, P1 = number>(_setShowsMenuIndicator: P0, _forSegment: P1): R;
    tagForSegment<R = number, P0 = number>(_tagForSegment: P0): R;
    setTag_forSegment<R = void, P0 = number, P1 = number>(_setTag: P0, _forSegment: P1): R;
    _hasItemTooltips<R = boolean>(): R;
    _setNeedsToolTipRecalc<R = void, P0 = boolean>(__setNeedsToolTipRecalc: P0): R;
    _needsToolTipRecalc<R = boolean>(): R;
    toolTipForSegment<R = unknown, P0 = number>(_toolTipForSegment: P0): R;
    setToolTip_forSegment<R = void, P0 = unknown, P1 = number>(_setToolTip: P0, _forSegment: P1): R;
    menuForSegment<R = unknown, P0 = number>(_menuForSegment: P0): R;
    setMenu_forSegment<R = void, P0 = unknown, P1 = number>(_setMenu: P0, _forSegment: P1): R;
    isEnabledForSegment<R = boolean, P0 = number>(_isEnabledForSegment: P0): R;
    setEnabled_forSegment<R = void, P0 = boolean, P1 = number>(_setEnabled: P0, _forSegment: P1): R;
    setEnabled<R = void, P0 = boolean>(_setEnabled: P0): R;
    isSelectedForSegment<R = boolean, P0 = number>(_isSelectedForSegment: P0): R;
    setSelected_forSegment<R = void, P0 = boolean, P1 = number>(_setSelected: P0, _forSegment: P1): R;
    labelForSegment<R = unknown, P0 = number>(_labelForSegment: P0): R;
    imageScalingForSegment<R = number, P0 = number>(_imageScalingForSegment: P0): R;
    setImageScaling_forSegment<R = void, P0 = number, P1 = number>(_setImageScaling: P0, _forSegment: P1): R;
    setLabel_forSegment<R = void, P0 = unknown, P1 = number>(_setLabel: P0, _forSegment: P1): R;
    alternateImageForSegment<R = unknown, P0 = number>(_alternateImageForSegment: P0): R;
    setAlternateImage_forSegment<R = void, P0 = unknown, P1 = number>(_setAlternateImage: P0, _forSegment: P1): R;
    setImage_forSegment<R = void, P0 = unknown, P1 = number>(_setImage: P0, _forSegment: P1): R;
    imageForSegment<R = unknown, P0 = number>(_imageForSegment: P0): R;
    widthForSegment<R = number, P0 = number>(_widthForSegment: P0): R;
    setWidth_forSegment<R = void, P0 = number, P1 = number>(_setWidth: P0, _forSegment: P1): R;
    setContinuous<R = void, P0 = boolean>(_setContinuous: P0): R;
    _segmentedCellStyle<R = number>(): R;
    _setSegmentedCellStyle<R = void, P0 = number>(__setSegmentedCellStyle: P0): R;
    setSegmentStyle_forceRecalc<R = void, P0 = number, P1 = boolean>(_setSegmentStyle: P0, _forceRecalc: P1): R;
    _setFlagsForStyle<R = void, P0 = number>(__setFlagsForStyle: P0): R;
    _controlViewDidMoveToWindow<R = void, P0 = unknown>(__controlViewDidMoveToWindow: P0): R;
    _inactiveStateShowsRolloversForSegment<R = boolean, P0 = number>(__inactiveStateShowsRolloversForSegment: P0): R;
    _setInactiveStateShowsRollovers_forSegment<R = void, P0 = boolean, P1 = number>(__setInactiveStateShowsRollovers: P0, _forSegment: P1): R;
    _needsGasPedalConfiguration<R = boolean>(): R;
    _needsRolloverTracking<R = boolean>(): R;
    setDoubleValue<R = void, P0 = number>(_setDoubleValue: P0): R;
    doubleValue<R = number>(): R;
    setFloatValue<R = void, P0 = number>(_setFloatValue: P0): R;
    floatValue<R = number>(): R;
    setIntegerValue<R = void, P0 = number>(_setIntegerValue: P0): R;
    integerValue<R = number>(): R;
    setIntValue<R = void, P0 = number>(_setIntValue: P0): R;
    intValue<R = number>(): R;
    objectValue<R = unknown>(): R;
    setObjectValue<R = void, P0 = unknown>(_setObjectValue: P0): R;
    _segmentsDeselectedBySegment<R = unknown, P0 = number>(__segmentsDeselectedBySegment: P0): R;
    makePreviousSegmentKey<R = void>(): R;
    makeNextSegmentKey<R = void>(): R;
    _setIndexOfHilightedSegment<R = void, P0 = number>(__setIndexOfHilightedSegment: P0): R;
    _indexOfHilightedSegment<R = number>(): R;
    setHighlighted<R = void, P0 = boolean>(_setHighlighted: P0): R;
    _setKeySegment<R = void, P0 = number>(__setKeySegment: P0): R;
    _keySegment<R = number>(): R;
    indexOfSelectedItem<R = number>(): R;
    selectSegmentWithTag<R = boolean, P0 = number>(_selectSegmentWithTag: P0): R;
    _trackingSegment<R = number>(): R;
    _mouseIsInsideSegmentAtIndex<R = boolean, P0 = number>(__mouseIsInsideSegmentAtIndex: P0): R;
    _haveSegmentAtIndex<R = boolean, P0 = number>(__haveSegmentAtIndex: P0): R;
    _segmentItemAtIndex<R = unknown, P0 = number>(__segmentItemAtIndex: P0): R;
    _segmentItems<R = unknown>(): R;
    segmentDistribution<R = number>(): R;
    setSegmentDistribution<R = void, P0 = number>(_setSegmentDistribution: P0): R;
    setBezeled<R = void, P0 = boolean>(_setBezeled: P0): R;
    setBordered<R = void, P0 = boolean>(_setBordered: P0): R;
    _auxiliaryStorage<R = unknown>(): R;
    _setDontShowSelectedAndPressedAppearance<R = void, P0 = boolean>(__setDontShowSelectedAndPressedAppearance: P0): R;
    _dontShowSelectedAndPressedAppearance<R = boolean>(): R;
    _setTrackingMode<R = void, P0 = number>(__setTrackingMode: P0): R;
    _trackingMode<R = number>(): R;
    _setSegmentedSeparated<R = void, P0 = boolean>(__setSegmentedSeparated: P0): R;
    _segmentedSeparatedStyle<R = boolean>(): R;
    _setUsesWindowsStyle<R = void, P0 = boolean>(__setUsesWindowsStyle: P0): R;
    _usesWindowsStyle<R = boolean>(): R;
    _setBaseStyle<R = void, P0 = number>(__setBaseStyle: P0): R;
    _baseStyle<R = number>(): R;
    _springLoadingHighlightForSegment<R = number, P0 = number>(__springLoadingHighlightForSegment: P0): R;
    _setSpringLoadingHighlightForSegment_toValue<R = void, P0 = number, P1 = number>(__setSpringLoadingHighlightForSegment: P0, _toValue: P1): R;
    _makeSegmentItemsPerformSelector<R = void, P0 = string>(__makeSegmentItemsPerformSelector: P0): R;
    _setItemAtIndex_isSelected<R = void, P0 = number, P1 = boolean>(__setItemAtIndex: P0, _isSelected: P1): R;
    _updateSeparatorState<R = void>(): R;
    _deselectAllButFirstSelectedSegment<R = void>(): R;
    _deselectAllSegments<R = void>(): R;
    _itemAtIndexIsSelected<R = boolean, P0 = number>(__itemAtIndexIsSelected: P0): R;
    _indexOfSelectedSegment<R = number>(): R;
    _subtractSegmentItemCount<R = void, P0 = number>(__subtractSegmentItemCount: P0): R;
    _addSegmentItemCount<R = void, P0 = number>(__addSegmentItemCount: P0): R;
    _removeNSSegmentItemViewsFromControlView<R = void, P0 = unknown>(__removeNSSegmentItemViewsFromControlView: P0): R;
    _addNSSegmentItemViewsToControlView<R = void, P0 = unknown>(__addNSSegmentItemViewsToControlView: P0): R;
    _setSegmentItems_updateSegmentItemViews<R = void, P0 = unknown, P1 = boolean>(__setSegmentItems: P0, _updateSegmentItemViews: P1): R;
    doubleValueForSelectedSegment<R = number>(): R;
    _badgeValueForSegment<R = number, P0 = number>(__badgeValueForSegment: P0): R;
    _setBadgeValue_forSegment_inView<R = void, P0 = number, P1 = number, P2 = unknown>(__setBadgeValue: P0, _forSegment: P1, _inView: P2): R;
    _showsBadgeForSegment<R = boolean, P0 = number>(__showsBadgeForSegment: P0): R;
    _anySegmentShowsBadge<R = boolean>(): R;
    _setShowsBadge_forSegment_inView<R = void, P0 = boolean, P1 = number, P2 = unknown>(__setShowsBadge: P0, _forSegment: P1, _inView: P2): R;
    _badgeRectForImage_inSegment_inFrame_inView_isFlipped_drawFlags<R = CGRect, P0 = unknown, P1 = number, P2 = CGRect, P3 = unknown, P4 = boolean, P5 = number>(__badgeRectForImage: P0, _inSegment: P1, _inFrame: P2, _inView: P3, _isFlipped: P4, _drawFlags: P5): R;
    _rectAdjustedForR2LForSegment_cellFrame_drawFlags<R = CGRect, P0 = number, P1 = CGRect, P2 = number>(__rectAdjustedForR2LForSegment: P0, _cellFrame: P1, _drawFlags: P2): R;
    _drawBackgroundWithFrame_inView<R = void, P0 = CGRect, P1 = unknown>(__drawBackgroundWithFrame: P0, _inView: P1): R;
    _coreUIDrawSegmentBackground_withCellFrame_inView_maskOnly<R = boolean, P0 = number, P1 = CGRect, P2 = unknown, P3 = boolean>(__coreUIDrawSegmentBackground: P0, _withCellFrame: P1, _inView: P2, _maskOnly: P3): R;
    _drawMenuIndicatorForSegment_withRect_inView<R = void, P0 = number, P1 = CGRect, P2 = unknown>(__drawMenuIndicatorForSegment: P0, _withRect: P1, _inView: P2): R;
    _configureLabelCell_forItem_controlView_imageState_backgroundStyle<R = void, P0 = unknown, P1 = unknown, P2 = unknown, P3 = number, P4 = number>(__configureLabelCell: P0, _forItem: P1, _controlView: P2, _imageState: P3, _backgroundStyle: P4): R;
    _resizeSegmentsForCellFrame<R = boolean, P0 = CGRect>(__resizeSegmentsForCellFrame: P0): R;
    _resizeSegmentsForCellFrame_animate<R = boolean, P0 = CGRect, P1 = boolean>(__resizeSegmentsForCellFrame: P0, _animate: P1): R;
    _updateLabelViewForSegmentItem_segmentContentRect_imageState_controlView<R = void, P0 = unknown, P1 = CGRect, P2 = number, P3 = unknown>(__updateLabelViewForSegmentItem: P0, _segmentContentRect: P1, _imageState: P2, _controlView: P3): R;
    _updateNSSegmentItemViewFramesForCellFrame<R = void, P0 = CGRect>(__updateNSSegmentItemViewFramesForCellFrame: P0): R;
    _legacy_labelRectForSegment_inFrame_withView<R = CGRect, P0 = number, P1 = CGRect, P2 = unknown>(__legacy_labelRectForSegment: P0, _inFrame: P1, _withView: P2): R;
    _legacy_rectForSegment_inFrame<R = CGRect, P0 = number, P1 = CGRect>(__legacy_rectForSegment: P0, _inFrame: P1): R;
    _legacy_minimumCellSizeForBounds<R = CGSize, P0 = CGRect>(__legacy_minimumCellSizeForBounds: P0): R;
    _legacy_cellSizeForBounds<R = CGSize, P0 = CGRect>(__legacy_cellSizeForBounds: P0): R;
    _legacy_segmentAlignmentRectInsetsForControlView<R = NSEdgeInsets, P0 = unknown>(__legacy_segmentAlignmentRectInsetsForControlView: P0): R;
    _edgeInset<R = number>(): R;
    _imageTextGap<R = number>(): R;
    accessibilityHelpStringForChild<R = unknown, P0 = unknown>(_accessibilityHelpStringForChild: P0): R;
    accessibilityFocusRingBounds<R = CGRect>(): R;
    accessibilitySizeOfChild<R = unknown, P0 = unknown>(_accessibilitySizeOfChild: P0): R;
    accessibilityPositionOfChild<R = unknown, P0 = unknown>(_accessibilityPositionOfChild: P0): R;
    accessibilitySetFocus_forChild<R = void, P0 = unknown, P1 = unknown>(_accessibilitySetFocus: P0, _forChild: P1): R;
    accessibilityIsChildFocusable<R = boolean, P0 = unknown>(_accessibilityIsChildFocusable: P0): R;
    accessibilityIsChildrenAttributeSettable<R = boolean>(): R;
    accessibilityChildrenAttribute<R = unknown>(): R;
    accessibilityChildrenInNavigationOrderAttribute<R = unknown>(): R;
    _accessibilityScreenRectForSegment<R = CGRect, P0 = number>(__accessibilityScreenRectForSegment: P0): R;
    _accessibilitySegmentAtIndex<R = unknown, P0 = number>(__accessibilitySegmentAtIndex: P0): R;
    segmentStyle<R = number>(): R;
    setSegmentStyle<R = void, P0 = number>(_v: P0): R;
    trackingMode<R = number>(): R;
    setTrackingMode<R = void, P0 = number>(_v: P0): R;
    selectedSegment<R = number>(): R;
    setSelectedSegment<R = void, P0 = number>(_v: P0): R;
    segmentCount<R = number>(): R;
    setSegmentCount<R = void, P0 = number>(_v: P0): R;
  }
  namespace classes {
    export interface NSSegmentedCell<T = any> extends NSActionCell {
      alloc<R = NSSegmentedCell>(): R;
      new: <R = NSSegmentedCell>() => R;
      _labelCell<R = unknown>(): R;
      _cuiPixelHeightForStyle_size_scale_currentAppearance_semanticContext<R = number, P0 = number, P1 = number, P2 = number, P3 = unknown, P4 = number>(__cuiPixelHeightForStyle: P0, _size: P1, _scale: P2, _currentAppearance: P3, _semanticContext: P4): R;
      _verticalScaleForControlView<R = number, P0 = unknown>(__verticalScaleForControlView: P0): R;
      _applicableStyleForBaseStyle_automaticStyle_usesWindowsStyle_segmentedSeparatedStyle_shouldUseTexturedToolbarStyle<R = number, P0 = number, P1 = boolean, P2 = boolean, P3 = boolean, P4 = boolean>(__applicableStyleForBaseStyle: P0, _automaticStyle: P1, _usesWindowsStyle: P2, _segmentedSeparatedStyle: P3, _shouldUseTexturedToolbarStyle: P4): R;
      _styleNeedsRolloverTracking<R = boolean, P0 = number>(__styleNeedsRolloverTracking: P0): R;
      _isTexturedStyle<R = boolean, P0 = number>(__isTexturedStyle: P0): R;
      _isStyleSeparated<R = boolean, P0 = number>(__isStyleSeparated: P0): R;
      _isStyleAutomatic<R = boolean, P0 = number>(__isStyleAutomatic: P0): R;
      _debugDrawOnePixelFrameRect_color_draw<R = void, P0 = CGRect, P1 = unknown, P2 = boolean>(__debugDrawOnePixelFrameRect: P0, _color: P1, _draw: P2): R;
      _segmentStyleShowsSelectedInBezelWithTracking_tracking<R = boolean, P0 = number, P1 = number>(__segmentStyleShowsSelectedInBezelWithTracking: P0, _tracking: P1): R;
      _segmentStyleWantsOnStateWhenPressedWithMomentaryTracking<R = boolean, P0 = number>(__segmentStyleWantsOnStateWhenPressedWithMomentaryTracking: P0): R;
      _image_state_for_visual_state_style_trackingMode<R = number, P0 = number, P1 = number, P2 = number>(__image_state_for_visual_state: P0, _style: P1, _trackingMode: P2): R;
      _givenState_hasState<R = boolean, P0 = number, P1 = number>(__givenState: P0, _hasState: P1): R;
      _segmentStyleIsFakedWithButtonArt<R = boolean, P0 = number>(__segmentStyleIsFakedWithButtonArt: P0): R;
      _cuiRectForProposedRect_style_controlSize_scale_currentAppearance_controlView<R = CGRect, P0 = CGRect, P1 = number, P2 = number, P3 = number, P4 = unknown, P5 = unknown>(__cuiRectForProposedRect: P0, _style: P1, _controlSize: P2, _scale: P3, _currentAppearance: P4, _controlView: P5): R;
      _menuIndicatorAdjustForStyle_size<R = number, P0 = number, P1 = number>(__menuIndicatorAdjustForStyle: P0, _size: P1): R;
      _bezelToDrawingRectInsetsForStyle_controlSize_scale_semanticContext<R = NSEdgeInsets, P0 = number, P1 = number, P2 = number, P3 = number>(__bezelToDrawingRectInsetsForStyle: P0, _controlSize: P1, _scale: P2, _semanticContext: P3): R;
      _alignmentRectInsetsForStyle_size_semanticContext<R = NSEdgeInsets, P0 = number, P1 = number, P2 = number>(__alignmentRectInsetsForStyle: P0, _size: P1, _semanticContext: P2): R;
      _textVerticalAdjustForStyle_controlSize_font<R = number, P0 = number, P1 = number, P2 = unknown>(__textVerticalAdjustForStyle: P0, _controlSize: P1, _font: P2): R;
      _additionalContentOffsetForStyle_controlSize<R = number, P0 = number, P1 = number>(__additionalContentOffsetForStyle: P0, _controlSize: P1): R;
      _endCapWidthForStyle_controlSize<R = number, P0 = number, P1 = number>(__endCapWidthForStyle: P0, _controlSize: P1): R;
      _preferredHeightForStyle_controlSize_controlView<R = number, P0 = number, P1 = number, P2 = unknown>(__preferredHeightForStyle: P0, _controlSize: P1, _controlView: P2): R;
      _coreUISizeForSegmentStyle_controlSize<R = __CFString, P0 = number, P1 = number>(__coreUISizeForSegmentStyle: P0, _controlSize: P1): R;
      _widgetTypeForSegmentStyleFull_semanticContext<R = __CFString, P0 = number, P1 = number>(__widgetTypeForSegmentStyleFull: P0, _semanticContext: P1): R;
      _widgetTypeForSegmentStyle_semanticContext<R = __CFString, P0 = number, P1 = number>(__widgetTypeForSegmentStyle: P0, _semanticContext: P1): R;
      _widgetTypeStyleCommon_semanticContext<R = __CFString, P0 = number, P1 = number>(__widgetTypeStyleCommon: P0, _semanticContext: P1): R;
      _validateControlSize<R = number, P0 = number>(__validateControlSize: P0): R;
    }
  }
}

declare const NSSegmentedCell: cocoa.classes.NSSegmentedCell;
