/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface NSControl<T0 = void, T1 = void, T2 = void> extends NSView {
    allowsVibrancy<R = boolean>(): R;
    setUsesSingleLineMode<R = void, P0 = boolean>(_setUsesSingleLineMode: P0): R;
    usesSingleLineMode<R = boolean>(): R;
    lineBreakMode<R = number>(): R;
    setLineBreakMode<R = void, P0 = number>(_setLineBreakMode: P0): R;
    setBaseWritingDirection<R = void, P0 = number>(_setBaseWritingDirection: P0): R;
    baseWritingDirection<R = number>(): R;
    backgroundStyle<R = number>(): R;
    _rightMouseUpOrDown<R = void, P0 = unknown>(__rightMouseUpOrDown: P0): R;
    setUserInterfaceLayoutDirection<R = void, P0 = number>(_setUserInterfaceLayoutDirection: P0): R;
    userInterfaceLayoutDirection<R = number>(): R;
    _shouldUseCellUserInterfaceLayoutDirection<R = boolean>(): R;
    _shouldAutoflipUnarchivedProperties<R = boolean>(): R;
    setAllowsLogicalLayoutDirection<R = void, P0 = boolean>(_setAllowsLogicalLayoutDirection: P0): R;
    allowsLogicalLayoutDirection<R = boolean>(): R;
    performClick<R = void, P0 = unknown>(_performClick: P0): R;
    _setControlTextDelegateFromOld_toNew<R = void, P0 = unknown, P1 = unknown>(__setControlTextDelegateFromOld: P0, _toNew: P1): R;
    endEditing<R = void, P0 = unknown>(_endEditing: P0): R;
    selectWithFrame_editor_delegate_start_length<R = void, P0 = CGRect, P1 = unknown, P2 = unknown, P3 = number, P4 = number>(_selectWithFrame: P0, _editor: P1, _delegate: P2, _start: P3, _length: P4): R;
    editWithFrame_editor_delegate_event<R = void, P0 = CGRect, P1 = unknown, P2 = unknown, P3 = unknown>(_editWithFrame: P0, _editor: P1, _delegate: P2, _event: P3): R;
    setSkipEditValidation<R = void, P0 = boolean>(_setSkipEditValidation: P0): R;
    skipEditValidation<R = boolean>(): R;
    validateEditing<R = void>(): R;
    _validateEditing<R = void, P0 = unknown>(__validateEditing: P0): R;
    abortEditing<R = boolean>(): R;
    currentEditor<R = unknown>(): R;
    textViewDidChangeSelection<R = void, P0 = unknown>(_textViewDidChangeSelection: P0): R;
    textView_willChangeSelectionFromCharacterRange_toCharacterRange<R = _NSRange, P0 = unknown, P1 = _NSRange, P2 = _NSRange>(_textView: P0, _willChangeSelectionFromCharacterRange: P1, _toCharacterRange: P2): R;
    _removeAllCellMouseTracking<R = void>(): R;
    _clearMouseTrackingForCell<R = void, P0 = unknown>(__clearMouseTrackingForCell: P0): R;
    _setMouseTrackingForCell<R = void, P0 = unknown>(__setMouseTrackingForCell: P0): R;
    _touchCancelled<R = void, P0 = unknown>(__touchCancelled: P0): R;
    _touchEnded<R = void, P0 = unknown>(__touchEnded: P0): R;
    _continueBeginTouch<R = void, P0 = unknown>(__continueBeginTouch: P0): R;
    setTouchBarInsetMitigation<R = void, P0 = number>(_setTouchBarInsetMitigation: P0): R;
    touchBarInsetMitigation<R = number>(): R;
    setTouchBarRestingMitigation<R = void, P0 = number>(_setTouchBarRestingMitigation: P0): R;
    touchBarRestingMitigation<R = number>(): R;
    _autoCancelIfTouchTooLong<R = boolean, P0 = unknown>(__autoCancelIfTouchTooLong: P0): R;
    _insetMitigationTreatment<R = unknown>(): R;
    _restingMitigationTreatment<R = unknown>(): R;
    _shouldTrackWithNonEditableCell<R = boolean>(): R;
    wantsUpdateLayer<R = boolean>(): R;
    _preferredLayerContentsRedrawPolicy<R = number>(): R;
    _shouldShowFirstResponderForCell<R = boolean, P0 = unknown>(__shouldShowFirstResponderForCell: P0): R;
    _findCurrentEditor<R = unknown>(): R;
    takeObjectValueFrom<R = void, P0 = unknown>(_takeObjectValueFrom: P0): R;
    takeStringValueFrom<R = void, P0 = unknown>(_takeStringValueFrom: P0): R;
    takeDoubleValueFrom<R = void, P0 = unknown>(_takeDoubleValueFrom: P0): R;
    takeFloatValueFrom<R = void, P0 = unknown>(_takeFloatValueFrom: P0): R;
    takeIntegerValueFrom<R = void, P0 = unknown>(_takeIntegerValueFrom: P0): R;
    takeIntValueFrom<R = void, P0 = unknown>(_takeIntValueFrom: P0): R;
    _stringSearchParametersForListingViews<R = unknown>(): R;
    _resetIncrementalSearchOnFailure<R = boolean>(): R;
    sendAction_to<R = boolean, P0 = string, P1 = unknown>(_sendAction: P0, _to: P1): R;
    selectCell<R = void, P0 = unknown>(_selectCell: P0): R;
    _hasEditableCell<R = boolean>(): R;
    resignKeyWindow<R = void>(): R;
    becomeKeyWindow<R = void>(): R;
    acceptsFirstResponder<R = boolean>(): R;
    needsPanelToBecomeKey<R = boolean>(): R;
    drawCell<R = void, P0 = unknown>(_drawCell: P0): R;
    drawCellInside<R = void, P0 = unknown>(_drawCellInside: P0): R;
    updateCellInside<R = void, P0 = unknown>(_updateCellInside: P0): R;
    _updateCellImage<R = void, P0 = unknown>(__updateCellImage: P0): R;
    updateCell<R = void, P0 = unknown>(_updateCell: P0): R;
    setNeedsDisplay<R = void>(): R;
    setFont<R = void, P0 = unknown>(_setFont: P0): R;
    font<R = unknown>(): R;
    setAlignment<R = void, P0 = number>(_setAlignment: P0): R;
    alignment<R = number>(): R;
    setFloatingPointFormat_left_right<R = void, P0 = boolean, P1 = number, P2 = number>(_setFloatingPointFormat: P0, _left: P1, _right: P2): R;
    sendActionOn<R = number, P0 = number>(_sendActionOn: P0): R;
    mouseDownFlags<R = number>(): R;
    setRepresentedObject<R = void, P0 = unknown>(_setRepresentedObject: P0): R;
    representedObject<R = unknown>(): R;
    selectedTag<R = number>(): R;
    _shouldDelegateTargetActionForSelector<R = boolean, P0 = string>(__shouldDelegateTargetActionForSelector: P0): R;
    selectedCell<R = unknown>(): R;
    setCell<R = void, P0 = unknown>(_setCell: P0): R;
    cell<R = unknown>(): R;
    _hasExtra10_11BordersInToolbars<R = boolean>(): R;
    _resetMaxLayoutWidthAtNextLayout<R = void>(): R;
    _hasSetMaxLayoutWidth<R = boolean>(): R;
    _setHasSetMaxLayoutWidth<R = void, P0 = boolean>(__setHasSetMaxLayoutWidth: P0): R;
    _setsMaxLayoutWidthAtFirstLayout<R = boolean>(): R;
    _setSetsMaxLayoutWidthAtFirstLayout<R = void, P0 = boolean>(__setSetsMaxLayoutWidthAtFirstLayout: P0): R;
    calcSize<R = void>(): R;
    sizeToFit<R = void>(): R;
    sizeThatFits<R = CGSize, P0 = CGSize>(_sizeThatFits: P0): R;
    mouseDownCanMoveWindow<R = boolean>(): R;
    drawWithExpansionFrame_inView<R = void, P0 = CGRect, P1 = unknown>(_drawWithExpansionFrame: P0, _inView: P1): R;
    expansionFrameWithFrame<R = CGRect, P0 = CGRect>(_expansionFrameWithFrame: P0): R;
    setAllowsExpansionToolTips<R = void, P0 = boolean>(_setAllowsExpansionToolTips: P0): R;
    allowsExpansionToolTips<R = boolean>(): R;
    isOpaque<R = boolean>(): R;
    _shouldRerouteCellAPIs<R = boolean>(): R;
    _commonEarlyInit<R = void>(): R;
    _commonControlInit<R = void>(): R;
    accessibilityIsEnabledAttributeSettable<R = boolean>(): R;
    accessibilityEnabledAttribute<R = unknown>(): R;
    accessibilitySizeOfChild<R = unknown, P0 = unknown>(_accessibilitySizeOfChild: P0): R;
    accessibilityPositionOfChild<R = unknown, P0 = unknown>(_accessibilityPositionOfChild: P0): R;
    accessibilitySetFocus_forChild<R = void, P0 = unknown, P1 = unknown>(_accessibilitySetFocus: P0, _forChild: P1): R;
    accessibilityIsChildFocusable<R = boolean, P0 = unknown>(_accessibilityIsChildFocusable: P0): R;
    accessibilityHelpStringForChild<R = unknown, P0 = unknown>(_accessibilityHelpStringForChild: P0): R;
    accessibilityPostNotification_context<R = void, P0 = unknown, P1 = unknown>(_accessibilityPostNotification: P0, _context: P1): R;
    refusesFirstResponder<R = boolean>(): R;
    setRefusesFirstResponder<R = void, P0 = boolean>(_v: P0): R;
    objectValue<R = unknown>(): R;
    setObjectValue<R = void, P0 = unknown>(_v: P0): R;
    doubleValue<R = number>(): R;
    setDoubleValue<R = void, P0 = number>(_v: P0): R;
    floatValue<R = number>(): R;
    setFloatValue<R = void, P0 = number>(_v: P0): R;
    integerValue<R = number>(): R;
    setIntegerValue<R = void, P0 = number>(_v: P0): R;
    intValue<R = number>(): R;
    setIntValue<R = void, P0 = number>(_v: P0): R;
    attributedStringValue<R = NSAttributedString>(): R;
    setAttributedStringValue<R = void, P0 = NSAttributedString>(_v: P0): R;
    stringValue<R = NSString>(): R;
    setStringValue<R = void, P0 = NSString>(_v: P0): R;
    formatter<R = NSFormatter>(): R;
    setFormatter<R = void, P0 = NSFormatter>(_v: P0): R;
    enabled<R = boolean>(): R;
    setEnabled<R = void, P0 = boolean>(_v: P0): R;
    continuous<R = boolean>(): R;
    setContinuous<R = void, P0 = boolean>(_v: P0): R;
    ignoresMultiClick<R = boolean>(): R;
    setIgnoresMultiClick<R = void, P0 = boolean>(_v: P0): R;
    tag<R = number>(): R;
    setTag<R = void, P0 = number>(_v: P0): R;
    action<R = string>(): R;
    setAction<R = void, P0 = string>(_v: P0): R;
    target<R = unknown>(): R;
    setTarget<R = void, P0 = unknown>(_v: P0): R;
    controlSize<R = number>(): R;
    setControlSize<R = void, P0 = number>(_v: P0): R;
    highlighted<R = boolean>(): R;
    setHighlighted<R = void, P0 = boolean>(_v: P0): R;
    // + NSControl(PopoverDismissal): 
    clickShouldDismissPopover<R = boolean, P0 = unknown>(_clickShouldDismissPopover: P0): R;
  }
  namespace NSControl {
    export interface CLASS<T0 = void, T1 = void, T2 = void> extends NSView {
      alloc<R = NSControl>(): R;
      new: <R = NSControl>() => R;
      _prefersCellUserInterfaceLayoutDirection<R = boolean>(): R;
      _controlTargetsAreWeak<R = boolean>(): R;
      cellClass<R = unknown>(): R;
      setCellClass<R = void, P0 = unknown>(_setCellClass: P0): R;
      accessibilityIsSingleCelled<R = boolean>(): R;
      // + NSControl(Inspector): 
      inpectorFocusRingPathForRect_borderRadius<R = unknown, P0 = CGRect, P1 = number>(_inpectorFocusRingPathForRect: P0, _borderRadius: P1): R;
      inpectorBorderPathForRect_borderRadius<R = unknown, P0 = CGRect, P1 = number>(_inpectorBorderPathForRect: P0, _borderRadius: P1): R;
      inpectorBorderPathForRectWithMaxRadius<R = unknown, P0 = CGRect>(_inpectorBorderPathForRectWithMaxRadius: P0): R;
      inpectorCheckmarkBorderPathForRect<R = unknown, P0 = CGRect>(_inpectorCheckmarkBorderPathForRect: P0): R;
      inpectorFocusRingPathForRect<R = unknown, P0 = CGRect>(_inpectorFocusRingPathForRect: P0): R;
      inpectorBorderPathForRect<R = unknown, P0 = CGRect>(_inpectorBorderPathForRect: P0): R;
    }
  }
}

declare const NSControl: cocoa.NSControl.CLASS;
