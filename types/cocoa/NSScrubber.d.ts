/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface NSScrubber<T = any> extends cocoa.NSView, cocoa.NSScrollViewDelegateProtocol, cocoa.NSGestureRecognizerDelegateProtocol {
    cxx_destruct<R = void>(): R;
    setEndcapCornerRadius<R = void, P0 = number>(_setEndcapCornerRadius: P0): R;
    endcapCornerRadius<R = number>(): R;
    setSelectionLensSize<R = void, P0 = cocoa.CGSize>(_setSelectionLensSize: P0): R;
    selectionLensSize<R = cocoa.CGSize>(): R;
    populatedItemViews<R = unknown>(): R;
    scrollView<R = unknown>(): R;
    visibleContentRectForLayout<R = cocoa.CGRect>(): R;
    proxyState<R = unknown>(): R;
    setProxyState<R = void, P0 = unknown>(_setProxyState: P0): R;
    accessibilityAutoScrollContentIntoView<R = boolean>(): R;
    accessibilityScrollChangesSelection<R = boolean>(): R;
    _indexForItemView<R = number, P0 = unknown>(__indexForItemView: P0): R;
    _scrollView_adjustScrollOffset_withVelocity_toItemWithAlignment_pinningTarget<R = void, P0 = unknown, P1 = cocoa.CGPoint, P2 = cocoa.CGPoint, P3 = number, P4 = boolean>(__scrollView: P0, _adjustScrollOffset: P1, _withVelocity: P2, _toItemWithAlignment: P3, _pinningTarget: P4): R;
    _animateAutoscrollLandingAnimation<R = void>(): R;
    _updateAutoscrollWithDisplayLink<R = void, P0 = unknown>(__updateAutoscrollWithDisplayLink: P0): R;
    _updateAutoscrollWithPointInScrollView_trackingStatus<R = void, P0 = cocoa.CGPoint, P1 = boolean>(__updateAutoscrollWithPointInScrollView: P0, _trackingStatus: P1): R;
    _tellDelegatePressedItemAtIndex<R = void, P0 = number>(__tellDelegatePressedItemAtIndex: P0): R;
    _tellDelegateVisibleRangeDidChange<R = void, P0 = cocoa._NSRange>(__tellDelegateVisibleRangeDidChange: P0): R;
    _tellDelegateInteractionCancelled<R = void>(): R;
    _tellDelegateInteractionFinished<R = void>(): R;
    _tellDelegateInteractionBeganIfNeeded<R = void>(): R;
    _tellDelegateSelectionIndexDidChange<R = void, P0 = number>(__tellDelegateSelectionIndexDidChange: P0): R;
    _tellDelegateHighlightIndexDidChange<R = void, P0 = number>(__tellDelegateHighlightIndexDidChange: P0): R;
    _interactiveSelectItemAtIndex_animated<R = void, P0 = number, P1 = boolean>(__interactiveSelectItemAtIndex: P0, _animated: P1): R;
    _interactiveHighlightItemAtIndex_animated<R = void, P0 = number, P1 = boolean>(__interactiveHighlightItemAtIndex: P0, _animated: P1): R;
    didPressArrowButton<R = void, P0 = unknown>(_didPressArrowButton: P0): R;
    _didWaitForSelectionLensPop<R = void, P0 = unknown>(__didWaitForSelectionLensPop: P0): R;
    _didTriggerPanGestureRecognizer<R = void, P0 = unknown>(__didTriggerPanGestureRecognizer: P0): R;
    _didTriggerPressGestureRecognizer<R = void, P0 = unknown>(__didTriggerPressGestureRecognizer: P0): R;
    _preferredAppearance<R = unknown>(): R;
    _updateArrowButtonStates<R = void>(): R;
    setUserInterfaceLayoutDirection<R = void, P0 = number>(_setUserInterfaceLayoutDirection: P0): R;
    makeItemWithIdentifier_owner<R = unknown, P0 = unknown, P1 = unknown>(_makeItemWithIdentifier: P0, _owner: P1): R;
    registerNib_forItemIdentifier<R = void, P0 = unknown, P1 = unknown>(_registerNib: P0, _forItemIdentifier: P1): R;
    registerClass_forItemIdentifier<R = void, P0 = unknown, P1 = unknown>(_registerClass: P0, _forItemIdentifier: P1): R;
    moveItemAtIndex_toIndex<R = void, P0 = number, P1 = number>(_moveItemAtIndex: P0, _toIndex: P1): R;
    reloadItemsAtIndexes<R = void, P0 = unknown>(_reloadItemsAtIndexes: P0): R;
    removeItemsAtIndexes<R = void, P0 = unknown>(_removeItemsAtIndexes: P0): R;
    insertItemsAtIndexes<R = void, P0 = unknown>(_insertItemsAtIndexes: P0): R;
    performSequentialBatchUpdates_completionHandler<R = void, P0 = cocoa.CDUnknownBlockType, P1 = cocoa.CDUnknownBlockType>(_performSequentialBatchUpdates: P0, _completionHandler: P1): R;
    performSequentialBatchUpdates<R = void, P0 = cocoa.CDUnknownBlockType>(_performSequentialBatchUpdates: P0): R;
    reloadData<R = void>(): R;
    _updateNumberOfItems<R = void>(): R;
    _numberOfItemsFromDataSource<R = number>(): R;
    observeValueForKeyPath_ofObject_change_context<R = void, P0 = unknown, P1 = unknown, P2 = unknown, P3 = void>(_observeValueForKeyPath: P0, _ofObject: P1, _change: P2, _context: P3): R;
    unregisterDependencyObservations<R = void>(): R;
    registerDependencyObservations<R = void>(): R;
    _setIgnoresTouches<R = void, P0 = boolean>(__setIgnoresTouches: P0): R;
    _ignoresTouches<R = boolean>(): R;
    _updateScrollViewCornerRadius<R = void>(): R;
    _updateBackground<R = void>(): R;
    itemViewForItemAtIndex<R = unknown, P0 = number>(_itemViewForItemAtIndex: P0): R;
    scrollItemAtIndex_toAlignment<R = void, P0 = number, P1 = number>(_scrollItemAtIndex: P0, _toAlignment: P1): R;
    setHighlightedIndex<R = void, P0 = number>(_setHighlightedIndex: P0): R;
    setSelectedIndex_animated<R = void, P0 = number, P1 = boolean>(_setSelectedIndex: P0, _animated: P1): R;
    documentView<R = unknown>(): R;
    _lateCommonInit<R = void>(): R;
    _earlyCommonInit<R = void>(): R;
    performBatchUpdates<R = void, P0 = cocoa.CDUnknownBlockType>(_performBatchUpdates: P0): R;
    initWithFrame_scrubberLayout<R = unknown, P0 = cocoa.CGRect, P1 = unknown>(_initWithFrame: P0, _scrubberLayout: P1): R;
    reloadItemAtIndex<R = void, P0 = number>(_reloadItemAtIndex: P0): R;
    removeItemAtIndex<R = void, P0 = number>(_removeItemAtIndex: P0): R;
    insertItemAtIndex<R = void, P0 = number>(_insertItemAtIndex: P0): R;
    _touchTargetViewForPressAndHoldBehavior<R = unknown>(): R;
    _gestureRecognizersForPressAndHoldBehavior<R = unknown>(): R;
    _accessibilityChildIsVisible<R = boolean, P0 = unknown>(__accessibilityChildIsVisible: P0): R;
    _accessibilityIndexOfChildBeforeVisible<R = number>(): R;
    _accessibilityIndexOfChildAfterVisible<R = number>(): R;
    _accessibilityNumberOfChildren<R = number>(): R;
    _accessibilityVisibleChildrenAtIndexes<R = unknown, P0 = unknown>(__accessibilityVisibleChildrenAtIndexes: P0): R;
    _accessibilityChildrenAtIndexes<R = unknown, P0 = unknown>(__accessibilityChildrenAtIndexes: P0): R;
    _accessibilityVisibleChildren<R = unknown>(): R;
    accessibilityArrayAttributeValues_index_maxCount<R = unknown, P0 = unknown, P1 = number, P2 = number>(_accessibilityArrayAttributeValues: P0, _index: P1, _maxCount: P2): R;
    accessibilityArrayAttributeCount<R = number, P0 = unknown>(_accessibilityArrayAttributeCount: P0): R;
    accessibilityIndexOfChild<R = number, P0 = unknown>(_accessibilityIndexOfChild: P0): R;
    accessibilityScrollToShowDescendantAttributeForParameter<R = unknown, P0 = unknown>(_accessibilityScrollToShowDescendantAttributeForParameter: P0): R;
    accessibilityVisibleChildrenAttribute<R = unknown>(): R;
    accessibilitySelectedChildrenAttribute<R = unknown>(): R;
    accessibilityParameterizedAttributeNames<R = unknown>(): R;
    pendingChanges<R = cocoa.NSScrubberPendingChanges>(): R;
    setPendingChanges<R = void, P0 = cocoa.NSScrubberPendingChanges>(_v: P0): R;
    itemAlignment<R = number>(): R;
    setItemAlignment<R = void, P0 = number>(_v: P0): R;
    selectionLensPopTimer<R = cocoa.NSTimer>(): R;
    setSelectionLensPopTimer<R = void, P0 = cocoa.NSTimer>(_v: P0): R;
    numberOfItems<R = number>(): R;
    backgroundView<R = cocoa.NSView>(): R;
    setBackgroundView<R = void, P0 = cocoa.NSView>(_v: P0): R;
    backgroundColor<R = cocoa.NSColor>(): R;
    setBackgroundColor<R = void, P0 = cocoa.NSColor>(_v: P0): R;
    highlightedIndex<R = number>(): R;
    selectedIndex<R = number>(): R;
    setSelectedIndex<R = void, P0 = number>(_v: P0): R;
    showsAdditionalContentIndicators<R = boolean>(): R;
    setShowsAdditionalContentIndicators<R = void, P0 = boolean>(_v: P0): R;
    showsArrowButtons<R = boolean>(): R;
    setShowsArrowButtons<R = void, P0 = boolean>(_v: P0): R;
    floatsSelectionViews<R = boolean>(): R;
    setFloatsSelectionViews<R = void, P0 = boolean>(_v: P0): R;
    continuous<R = boolean>(): R;
    setContinuous<R = void, P0 = boolean>(_v: P0): R;
    mode<R = number>(): R;
    setMode<R = void, P0 = number>(_v: P0): R;
    selectionBackgroundStyle<R = cocoa.NSScrubberSelectionStyle>(): R;
    setSelectionBackgroundStyle<R = void, P0 = cocoa.NSScrubberSelectionStyle>(_v: P0): R;
    selectionOverlayStyle<R = cocoa.NSScrubberSelectionStyle>(): R;
    setSelectionOverlayStyle<R = void, P0 = cocoa.NSScrubberSelectionStyle>(_v: P0): R;
    scrubberLayout<R = cocoa.NSScrubberLayout>(): R;
    setScrubberLayout<R = void, P0 = cocoa.NSScrubberLayout>(_v: P0): R;
    dataSource<R = cocoa.NSScrubberDataSource>(): R;
    setDataSource<R = void, P0 = cocoa.NSScrubberDataSource>(_v: P0): R;
    delegate<R = cocoa.NSScrubberDelegate>(): R;
    setDelegate<R = void, P0 = cocoa.NSScrubberDelegate>(_v: P0): R;
    tag<R = number>(): R;
    setTag<R = void, P0 = number>(_v: P0): R;
    selectionStyle<R = cocoa.NSScrubberSelectionStyle>(): R;
    setSelectionStyle<R = void, P0 = cocoa.NSScrubberSelectionStyle>(_v: P0): R;
    selectionIndex<R = number>(): R;
    setSelectionIndex<R = void, P0 = number>(_v: P0): R;
    _wantsPageAlignedHorizontalAxis<R = boolean>(): R;
    set_wantsPageAlignedHorizontalAxis<R = void, P0 = boolean>(_v: P0): R;
    _wantsPageAlignedVerticalAxis<R = boolean>(): R;
    set_wantsPageAlignedVerticalAxis<R = void, P0 = boolean>(_v: P0): R;
    debugDescription<R = cocoa.NSString>(): R;
    description<R = cocoa.NSString>(): R;
    hash<R = number>(): R;
    superclass<R = unknown>(): R;
  }
  namespace classes {
    export interface NSScrubber<T = any> extends cocoa.classes.NSView, cocoa.classes.NSScrollViewDelegateProtocol, cocoa.classes.NSGestureRecognizerDelegateProtocol {
      alloc<R = NSScrubber>(): R;
      new: <R = NSScrubber>() => R;
      texturedBackgroundColor<R = unknown>(): R;
      keyPathsForValuesInvalidatingSelectionLayout<R = unknown>(): R;
      keyPathsForValuesInvalidatingItemLayout<R = unknown>(): R;
      outlineSelectionOverlayView<R = unknown>(): R;
      roundedSelectionBackgroundView<R = unknown>(): R;
      touchBarColorListPickerScrubberWithDataSource_delegate<R = unknown, P0 = unknown, P1 = unknown>(_touchBarColorListPickerScrubberWithDataSource: P0, _delegate: P1): R;
    }
  }
}

declare const NSScrubber: cocoa.classes.NSScrubber;
