/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface MSEventHandler<T0 = void, T1 = void, T2 = void> extends NSResponder, NSDraggingDestinationProtocol, NSTouchBarDelegateProtocol {
    cxx_destruct<R = void>(): R;
    willStartExporting<R = void>(): R;
    documentWindow<R = unknown>(): R;
    mayShowResizingInspectorView<R = boolean>(): R;
    touchBarTextColorAction<R = void, P0 = unknown>(_touchBarTextColorAction: P0): R;
    refreshStylePreviewTouchBarButton_forIdentifier<R = void, P0 = unknown, P1 = unknown>(_refreshStylePreviewTouchBarButton: P0, _forIdentifier: P1): R;
    documentColorSpace<R = unknown>(): R;
    openInnerShadowAction<R = void, P0 = unknown>(_openInnerShadowAction: P0): R;
    openShadowAction<R = void, P0 = unknown>(_openShadowAction: P0): R;
    openBorderAction<R = void, P0 = unknown>(_openBorderAction: P0): R;
    openFillAction<R = void, P0 = unknown>(_openFillAction: P0): R;
    refreshTouchBarItemWithIdentifier<R = void, P0 = unknown>(_refreshTouchBarItemWithIdentifier: P0): R;
    touchBarWithIdentifiers<R = unknown, P0 = unknown>(_touchBarWithIdentifiers: P0): R;
    selectionTouchBarIdentifiers<R = unknown>(): R;
    noSelectionTouchbarIdentifiers<R = unknown>(): R;
    allowsSwitchToInsertAction<R = boolean>(): R;
    shouldFitToPixelBounds<R = boolean>(): R;
    nudgeDistanceForFlags<R = number, P0 = number>(_nudgeDistanceForFlags: P0): R;
    canDuplicate<R = boolean>(): R;
    inspectorViewController<R = unknown>(): R;
    inspectorLocation<R = number>(): R;
    shouldShowSharedStyles<R = boolean>(): R;
    shouldShowFlowView<R = boolean>(): R;
    shouldShowResizingView<R = boolean>(): R;
    styleViewControllersForLayers_fromStyleInspectorSection<R = unknown, P0 = unknown, P1 = unknown>(_styleViewControllersForLayers: P0, _fromStyleInspectorSection: P1): R;
    inspectorViewControllersForLayers_standardControllers<R = unknown, P0 = unknown, P1 = unknown>(_inspectorViewControllersForLayers: P0, _standardControllers: P1): R;
    configureInspector<R = void, P0 = unknown>(_configureInspector: P0): R;
    layerPositionPossiblyChanged<R = void>(): R;
    willResignFirstResponder<R = void>(): R;
    handleSymbolInstanceDoubleClick<R = void, P0 = unknown>(_handleSymbolInstanceDoubleClick: P0): R;
    handleForeignSymbolInstanceDoubleClick<R = void, P0 = unknown>(_handleForeignSymbolInstanceDoubleClick: P0): R;
    editLayer<R = void, P0 = unknown>(_editLayer: P0): R;
    insertBacktab<R = void, P0 = unknown>(_insertBacktab: P0): R;
    insertTab<R = void, P0 = unknown>(_insertTab: P0): R;
    handlesHandToolItself<R = boolean>(): R;
    rulerGuidesRectAroundPoint<R = CGRect, P0 = CGPoint>(_rulerGuidesRectAroundPoint: P0): R;
    horizontalRulerGuidesForGridAlign<R = unknown, P0 = CGPoint>(_horizontalRulerGuidesForGridAlign: P0): R;
    verticalRulerGuidesForGridAlign<R = unknown, P0 = CGPoint>(_verticalRulerGuidesForGridAlign: P0): R;
    currentPageDidChange<R = void>(): R;
    layerRulerOriginChanged<R = void>(): R;
    selectionDidChangeTo<R = void, P0 = unknown>(_selectionDidChangeTo: P0): R;
    layerListSelectionDidChange<R = void, P0 = unknown>(_layerListSelectionDidChange: P0): R;
    zoomValueDidChange<R = void>(): R;
    zoomValueWillChangeTo<R = void, P0 = number>(_zoomValueWillChangeTo: P0): R;
    zoomValue<R = number>(): R;
    dragDropHintForDropOnPoint<R = unknown, P0 = CGPoint>(_dragDropHintForDropOnPoint: P0): R;
    replaceArtboardWithLayerGroupInPasteBoardData<R = void, P0 = unknown>(_replaceArtboardWithLayerGroupInPasteBoardData: P0): R;
    imageName<R = unknown>(): R;
    toolbarIdentifier<R = unknown>(): R;
    selectLayer_extendSelection<R = void, P0 = unknown, P1 = boolean>(_selectLayer: P0, _extendSelection: P1): R;
    selectedLayers<R = unknown>(): R;
    changeColor<R = void, P0 = unknown>(_changeColor: P0): R;
    drawHandles<R = void>(): R;
    arrowKeyIsPressed<R = boolean, P0 = number>(_arrowKeyIsPressed: P0): R;
    escapeKeyIsPressed<R = boolean, P0 = number>(_escapeKeyIsPressed: P0): R;
    enterKeyIsPressed<R = boolean, P0 = number>(_enterKeyIsPressed: P0): R;
    deleteKeyIsPressed<R = boolean, P0 = number>(_deleteKeyIsPressed: P0): R;
    hitTestingOptions<R = number>(): R;
    itemAtPoint_modifierFlags<R = unknown, P0 = CGPoint, P1 = number>(_itemAtPoint: P0, _modifierFlags: P1): R;
    valueForUndefinedKey<R = unknown, P0 = unknown>(_valueForUndefinedKey: P0): R;
    delete<R = void, P0 = unknown>(_delete: P0): R;
    duplicate<R = void, P0 = unknown>(_duplicate: P0): R;
    focusOnMainWindow<R = void>(): R;
    duplicateLayer_toIndex_offset<R = unknown, P0 = unknown, P1 = number, P2 = CGVector>(_duplicateLayer: P0, _toIndex: P1, _offset: P2): R;
    duplicateSelectedLayersInGroup_withOffset<R = unknown, P0 = unknown, P1 = CGVector>(_duplicateSelectedLayersInGroup: P0, _withOffset: P1): R;
    layersSeparatedByGroups<R = unknown, P0 = unknown>(_layersSeparatedByGroups: P0): R;
    duplicateSelectedLayersWithOffset<R = unknown, P0 = CGVector>(_duplicateSelectedLayersWithOffset: P0): R;
    currentMousePointInCanvasCoordinates<R = CGPoint>(): R;
    pasteHere<R = void, P0 = unknown>(_pasteHere: P0): R;
    pasteOverSelection<R = void, P0 = unknown>(_pasteOverSelection: P0): R;
    pasteWithOptions<R = void, P0 = number>(_pasteWithOptions: P0): R;
    pasteWithStyle<R = void, P0 = unknown>(_pasteWithStyle: P0): R;
    paste<R = void, P0 = unknown>(_paste: P0): R;
    layersToCopy<R = unknown>(): R;
    copy<R = void, P0 = unknown>(_copy: P0): R;
    doCut<R = void, P0 = unknown>(_doCut: P0): R;
    cut<R = void, P0 = unknown>(_cut: P0): R;
    pastingViewPort<R = unknown>(): R;
    readFromPasteboard_options<R = void, P0 = unknown, P1 = number>(_readFromPasteboard: P0, _options: P1): R;
    currentPage<R = unknown>(): R;
    writeLayers_toPasteboard<R = void, P0 = unknown, P1 = unknown>(_writeLayers: P0, _toPasteboard: P1): R;
    menuForEvent<R = unknown, P0 = unknown>(_menuForEvent: P0): R;
    returnToDefaultHandlerByClickingOutside<R = void>(): R;
    returnToDefaultHandler<R = void>(): R;
    centerPointForZooming<R = CGPoint>(): R;
    selectedRect<R = CGRect>(): R;
    zoomToArtboard<R = void>(): R;
    zoomToSelection<R = void>(): R;
    reloadFollowingBackgroundChangesToDocument<R = void>(): R;
    commitPendingEdits<R = void>(): R;
    didMoveThroughHistory<R = void, P0 = unknown>(_didMoveThroughHistory: P0): R;
    willMoveThroughHistory<R = void, P0 = unknown>(_willMoveThroughHistory: P0): R;
    selectAll<R = void, P0 = unknown>(_selectAll: P0): R;
    drawDragSelection<R = void>(): R;
    handlerDidLoseFocus<R = void>(): R;
    handlerWillLoseFocus<R = void>(): R;
    selectToolbarItemWithIdentifier<R = void, P0 = unknown>(_selectToolbarItemWithIdentifier: P0): R;
    handlerGotFocus<R = void>(): R;
    handlerName<R = unknown>(): R;
    cancelOperation<R = void, P0 = unknown>(_cancelOperation: P0): R;
    keyUp_flags<R = void, P0 = number, P1 = number>(_keyUp: P0, _flags: P1): R;
    prepareGraphicsStateForGroup_drawingBlock<R = void, P0 = unknown, P1 = CDUnknownBlockType>(_prepareGraphicsStateForGroup: P0, _drawingBlock: P1): R;
    drawMeasurementLabel<R = void>(): R;
    drawGuidesAndMeasurementsInRect<R = void, P0 = CGRect>(_drawGuidesAndMeasurementsInRect: P0): R;
    drawInRect_context<R = void, P0 = CGRect, P1 = unknown>(_drawInRect: P0, _context: P1): R;
    addOverlayRenderer<R = void, P0 = unknown>(_addOverlayRenderer: P0): R;
    setMeasurementLabelNeedsDisplay<R = void>(): R;
    locationForMeasurementLabel<R = CGPoint>(): R;
    measurementLabelAttributes<R = unknown>(): R;
    setMeasurementTextWithDegrees<R = void, P0 = number>(_setMeasurementTextWithDegrees: P0): R;
    setMeasurementTextWithSize<R = void, P0 = CGSize>(_setMeasurementTextWithSize: P0): R;
    addGestureRecognizer<R = void, P0 = unknown>(_addGestureRecognizer: P0): R;
    viewDidScroll<R = void, P0 = unknown>(_viewDidScroll: P0): R;
    mouseDraggedOutsideViewShouldMoveScrollOrigin<R = boolean>(): R;
    absoluteMouseMoved_flags<R = boolean, P0 = CGPoint, P1 = number>(_absoluteMouseMoved: P0, _flags: P1): R;
    absoluteMouseUp_flags<R = boolean, P0 = CGPoint, P1 = number>(_absoluteMouseUp: P0, _flags: P1): R;
    absoluteMouseDragged_flags<R = boolean, P0 = CGPoint, P1 = number>(_absoluteMouseDragged: P0, _flags: P1): R;
    absoluteMouseDown_clickCount_flags<R = boolean, P0 = CGPoint, P1 = number, P2 = number>(_absoluteMouseDown: P0, _clickCount: P1, _flags: P2): R;
    setNeedsUpdateCursor<R = void>(): R;
    updateCursor<R = boolean>(): R;
    trackMouse<R = void, P0 = unknown>(_trackMouse: P0): R;
    mouseMovedEvent<R = boolean, P0 = unknown>(_mouseMovedEvent: P0): R;
    mouseUpEvent<R = boolean, P0 = unknown>(_mouseUpEvent: P0): R;
    mouseDraggedEvent<R = boolean, P0 = unknown>(_mouseDraggedEvent: P0): R;
    mouseDownEvent<R = boolean, P0 = unknown>(_mouseDownEvent: P0): R;
    parentForInsertingLayer<R = unknown, P0 = unknown>(_parentForInsertingLayer: P0): R;
    currentGroup<R = unknown>(): R;
    refreshOverlay<R = void>(): R;
    document<R = unknown>(): R;
    contentDrawView<R = unknown>(): R;
    initWithManager<R = unknown, P0 = unknown>(_initWithManager: P0): R;
    measurementLabelSize<R = CGSize>(): R;
    setMeasurementLabelSize<R = void, P0 = CGSize>(_v: P0): R;
    activeGestureRecognizers<R = NSArray>(): R;
    setActiveGestureRecognizers<R = void, P0 = NSArray>(_v: P0): R;
    selectionRect<R = CGRect>(): R;
    setSelectionRect<R = void, P0 = CGRect>(_v: P0): R;
    overlayRenderers<R = NSArray>(): R;
    measurementText<R = NSString>(): R;
    setMeasurementText<R = void, P0 = NSString>(_v: P0): R;
    cursor<R = NSCursor>(): R;
    setCursor<R = void, P0 = NSCursor>(_v: P0): R;
    selectionTouchBar<R = NSTouchBar>(): R;
    setSelectionTouchBar<R = void, P0 = NSTouchBar>(_v: P0): R;
    noSelectionTouchBar<R = NSTouchBar>(): R;
    setNoSelectionTouchBar<R = void, P0 = NSTouchBar>(_v: P0): R;
    viewCoordinateMouse<R = CGPoint>(): R;
    setViewCoordinateMouse<R = void, P0 = CGPoint>(_v: P0): R;
    pressedKeys<R = NSString>(): R;
    setPressedKeys<R = void, P0 = NSString>(_v: P0): R;
    offsetTracker<R = MSDuplicateOffsetTracker>(): R;
    setOffsetTracker<R = void, P0 = MSDuplicateOffsetTracker>(_v: P0): R;
    manager<R = MSEventHandlerManager>(): R;
    setManager<R = void, P0 = MSEventHandlerManager>(_v: P0): R;
    wantsLayerHighlight<R = boolean>(): R;
    wantsStandardSelectionControls<R = boolean>(): R;
    applicableActionItemIdentifier<R = NSString>(): R;
    shouldExitOnContentViewResize<R = boolean>(): R;
    handlesHistoryCoalescing<R = boolean>(): R;
    measurementBackgroundRect<R = CGRect>(): R;
    gestureRecognizers<R = NSArray>(): R;
    scrollOrigin<R = CGPoint>(): R;
    setScrollOrigin<R = void, P0 = CGPoint>(_v: P0): R;
    undoManager<R = NSUndoManager>(): R;
    debugDescription<R = NSString>(): R;
    description<R = NSString>(): R;
    hash<R = number>(): R;
    superclass<R = unknown>(): R;
  }
  namespace MSEventHandler {
    export interface CLASS<T0 = void, T1 = void, T2 = void> extends NSResponder, NSDraggingDestinationProtocol, NSTouchBarDelegateProtocol {
      alloc<R = MSEventHandler>(): R;
      new: <R = MSEventHandler>() => R;
      eventHandlerWithManager<R = unknown, P0 = unknown>(_eventHandlerWithManager: P0): R;
    }
  }
}

declare const MSEventHandler: cocoa.MSEventHandler.CLASS;
