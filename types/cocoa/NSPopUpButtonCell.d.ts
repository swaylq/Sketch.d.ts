/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface NSPopUpButtonCell<T0 = void, T1 = void, T2 = void> extends NSMenuItemCell, NSMenuItemValidationProtocol {
    _highlightTextColor<R = unknown>(): R;
    _highlightColor<R = unknown>(): R;
    _drawCircumscribedFocusRingMaskWithFrame_inView<R = void, P0 = CGRect, P1 = unknown>(__drawCircumscribedFocusRingMaskWithFrame: P0, _inView: P1): R;
    _setIndicatorImageView<R = void, P0 = unknown>(__setIndicatorImageView: P0): R;
    _indicatorImageView<R = unknown>(): R;
    _removeIndicatorImageView<R = void>(): R;
    _updateIndicatorViewImageInView<R = void, P0 = unknown>(__updateIndicatorViewImageInView: P0): R;
    _updateIndicatorImageViewWithFrame_inView<R = void, P0 = CGRect, P1 = unknown>(__updateIndicatorImageViewWithFrame: P0, _inView: P1): R;
    _wantsToDrawSeparateIndicator<R = boolean>(): R;
    _indicatorImage<R = unknown>(): R;
    _defaultIndicatorImage<R = unknown>(): R;
    _coreUIDefaultIndicatorImage<R = unknown>(): R;
    _effectiveAlignment<R = number>(): R;
    _shouldDrawIndicatorOnlyForFrame<R = boolean, P0 = CGRect>(__shouldDrawIndicatorOnlyForFrame: P0): R;
    _drawIndicatorWithFrame_inView<R = void, P0 = CGRect, P1 = unknown>(__drawIndicatorWithFrame: P0, _inView: P1): R;
    _popupImageSizeForCellFrame<R = CGSize, P0 = CGRect>(__popupImageSizeForCellFrame: P0): R;
    _imageToTitleHorizontalOffset<R = number>(): R;
    _popupPaddingInsets<R = NSEdgeInsets>(): R;
    _popupIndicatorToContentPaddingOffset<R = number>(): R;
    _popupBezelToContentPaddingOffset<R = number>(): R;
    _indicatorInsets<R = NSEdgeInsets>(): R;
    _bezelToIndicatorInsets<R = NSEdgeInsets>(): R;
    _bezelToIndicatorOffsets<R = CGPoint>(): R;
    _popupBezelInsetsForCellFrame<R = NSEdgeInsets, P0 = CGRect>(__popupBezelInsetsForCellFrame: P0): R;
    _popupBezelInsets<R = NSEdgeInsets>(): R;
    _pulldownExtraBezelInsets<R = NSEdgeInsets>(): R;
    _useTigerMetricsForHorizontalUnborderedOffset<R = boolean>(): R;
    _imageToBezelOrIndicatorPadding<R = number>(): R;
    _bezelBottomPadding<R = number>(): R;
    _bezelTopPadding<R = number>(): R;
    _bezelBottomOffset<R = number>(): R;
    _bezelTopOffset<R = number>(): R;
    _effectiveImagePosition<R = number>(): R;
    _extraWidthForCellHeight<R = number, P0 = number>(__extraWidthForCellHeight: P0): R;
    _menuLocationHorizontalOffset<R = number>(): R;
    _indicatorFrameForCellFrame_inView<R = CGRect, P0 = CGRect, P1 = unknown>(__indicatorFrameForCellFrame: P0, _inView: P1): R;
    _indicatorFrameForCellFrame_isFlipped<R = CGRect, P0 = CGRect, P1 = boolean>(__indicatorFrameForCellFrame: P0, _isFlipped: P1): R;
    _applicableArrowLocation<R = number>(): R;
    _defaultIndicatorSize<R = CGSize>(): R;
    _popupHeightIsFlexible<R = boolean>(): R;
    _maxItemsToMeasureForCellSize<R = number>(): R;
    _autolayout_preferredSmallPopupToolbarMinimumWidth<R = number>(): R;
    _autolayout_preferredPopupToolbarMinimumWidth<R = number>(): R;
    _autolayout_preferredPopupHeight<R = number>(): R;
    _preferredPopupHeight<R = number>(): R;
    _availableContentRectForCellFrame_isFlipped<R = CGRect, P0 = CGRect, P1 = boolean>(__availableContentRectForCellFrame: P0, _isFlipped: P1): R;
    _menuWillSendAction<R = void, P0 = unknown>(__menuWillSendAction: P0): R;
    _menuItemSelected<R = void, P0 = unknown>(__menuItemSelected: P0): R;
    _popUpItemAction<R = void, P0 = unknown>(__popUpItemAction: P0): R;
    dismissPopUp<R = void>(): R;
    attachPopUpWithFrame_inView<R = void, P0 = CGRect, P1 = unknown>(_attachPopUpWithFrame: P0, _inView: P1): R;
    performClickWithFrame_inView<R = void, P0 = CGRect, P1 = unknown>(_performClickWithFrame: P0, _inView: P1): R;
    _doPopupSearchString<R = void>(): R;
    _handleWillPopUpNotification<R = void>(): R;
    _locationForPopUpMenuWithFrame<R = CGPoint, P0 = CGRect>(__locationForPopUpMenuWithFrame: P0): R;
    _createAndPopulateKeyEquivalentUniquerIfNecessary<R = void>(): R;
    _setMenuShouldBeUniquedAgainstMainMenu<R = void, P0 = boolean>(__setMenuShouldBeUniquedAgainstMainMenu: P0): R;
    _popUpMenuOptionsForFlags_inRect_ofView<R = unknown, P0 = number, P1 = CGRect, P2 = unknown>(__popUpMenuOptionsForFlags: P0, _inRect: P1, _ofView: P2): R;
    _labelOffsetInCellFrame_ofView<R = CGSize, P0 = CGRect, P1 = unknown>(__labelOffsetInCellFrame: P0, _ofView: P1): R;
    _popUpMenuFlags<R = number, P0 = boolean>(__popUpMenuFlags: P0): R;
    _menuMinimumWidthForEvent_inCellFrame_ofView<R = number, P0 = unknown, P1 = CGRect, P2 = unknown>(__menuMinimumWidthForEvent: P0, _inCellFrame: P1, _ofView: P2): R;
    _menuLocationForEvent_inCellFrame_ofView<R = CGPoint, P0 = unknown, P1 = CGRect, P2 = unknown>(__menuLocationForEvent: P0, _inCellFrame: P1, _ofView: P2): R;
    _horzOffsetForTitleInFrame_withAlignment_direction_font<R = number, P0 = CGRect, P1 = number, P2 = number, P3 = unknown>(__horzOffsetForTitleInFrame: P0, _withAlignment: P1, _direction: P2, _font: P3): R;
    _positionsMenuRelativeToRightEdge<R = boolean>(): R;
    _positionsMenuAsPullDown<R = boolean>(): R;
    _selectItemAtIndex_alteringState<R = void, P0 = number, P1 = boolean>(__selectItemAtIndex: P0, _alteringState: P1): R;
    _previousItemIfExists<R = number>(): R;
    _removePreviousItem<R = void>(): R;
    _setPreviousItem<R = void, P0 = number>(__setPreviousItem: P0): R;
    _rawSetSelectedIndex<R = void, P0 = number>(__rawSetSelectedIndex: P0): R;
    _itemChanged<R = void, P0 = unknown>(__itemChanged: P0): R;
    _allItemsRemoved<R = void, P0 = unknown>(__allItemsRemoved: P0): R;
    _itemRemoved<R = void, P0 = unknown>(__itemRemoved: P0): R;
    _itemAdded<R = void, P0 = unknown>(__itemAdded: P0): R;
    _unsubscribeFromNotificationsForMenu<R = void, P0 = unknown>(__unsubscribeFromNotificationsForMenu: P0): R;
    _subscribeToNotificationsForMenu<R = void, P0 = unknown>(__subscribeToNotificationsForMenu: P0): R;
    _clearTargetsFromMenuPointingAtSelf<R = void, P0 = unknown>(__clearTargetsFromMenuPointingAtSelf: P0): R;
    _fixTargetsForMenu<R = void, P0 = unknown>(__fixTargetsForMenu: P0): R;
    observeValueForKeyPath_ofObject_change_context<R = void, P0 = unknown, P1 = unknown, P2 = unknown, P3 = void>(_observeValueForKeyPath: P0, _ofObject: P1, _change: P2, _context: P3): R;
    unobserveMenuItemProperties<R = void>(): R;
    observeMenuItemProperties<R = void>(): R;
    selectItemAtIndex<R = void, P0 = number>(_selectItemAtIndex: P0): R;
    selectItem<R = void, P0 = unknown>(_selectItem: P0): R;
    itemTitleAtIndex<R = unknown, P0 = number>(_itemTitleAtIndex: P0): R;
    setTitle<R = void, P0 = unknown>(_setTitle: P0): R;
    synchronizeTitleAndSelectedItem<R = void>(): R;
    selectItemWithTag<R = boolean, P0 = number>(_selectItemWithTag: P0): R;
    selectItemWithTitle<R = void, P0 = unknown>(_selectItemWithTitle: P0): R;
    itemWithTitle<R = unknown, P0 = unknown>(_itemWithTitle: P0): R;
    itemAtIndex<R = unknown, P0 = number>(_itemAtIndex: P0): R;
    indexOfItemWithTarget_andAction<R = number, P0 = unknown, P1 = string>(_indexOfItemWithTarget: P0, _andAction: P1): R;
    indexOfItemWithRepresentedObject<R = number, P0 = unknown>(_indexOfItemWithRepresentedObject: P0): R;
    indexOfItemWithTag<R = number, P0 = number>(_indexOfItemWithTag: P0): R;
    indexOfItemWithTitle<R = number, P0 = unknown>(_indexOfItemWithTitle: P0): R;
    indexOfItem<R = number, P0 = unknown>(_indexOfItem: P0): R;
    removeAllItems<R = void>(): R;
    removeItemAtIndex<R = void, P0 = number>(_removeItemAtIndex: P0): R;
    removeItemWithTitle<R = void, P0 = unknown>(_removeItemWithTitle: P0): R;
    insertItemWithTitle_atIndex<R = void, P0 = unknown, P1 = number>(_insertItemWithTitle: P0, _atIndex: P1): R;
    addItemsWithTitles<R = void, P0 = unknown>(_addItemsWithTitles: P0): R;
    addItemWithTitle<R = void, P0 = unknown>(_addItemWithTitle: P0): R;
    setMenuItem<R = void, P0 = unknown>(_setMenuItem: P0): R;
    _copyWithoutMenu<R = unknown>(): R;
    initTextCell_pullsDown<R = unknown, P0 = unknown, P1 = boolean>(_initTextCell: P0, _pullsDown: P1): R;
    _accessibilityPressAction<R = void, P0 = unknown>(__accessibilityPressAction: P0): R;
    accessibilityIsChildrenAttributeSettable<R = boolean>(): R;
    accessibilityChildrenAttribute<R = unknown>(): R;
    titleOfSelectedItem<R = NSString>(): R;
    itemTitles<R = NSArray>(): R;
    indexOfSelectedItem<R = number>(): R;
    selectedItem<R = NSMenuItem>(): R;
    lastItem<R = NSMenuItem>(): R;
    numberOfItems<R = number>(): R;
    itemArray<R = NSArray>(): R;
    menu<R = NSMenu>(): R;
    setMenu<R = void, P0 = NSMenu>(_v: P0): R;
    arrowPosition<R = number>(): R;
    setArrowPosition<R = void, P0 = number>(_v: P0): R;
    altersStateOfSelectedItem<R = boolean>(): R;
    setAltersStateOfSelectedItem<R = void, P0 = boolean>(_v: P0): R;
    usesItemFromMenu<R = boolean>(): R;
    setUsesItemFromMenu<R = void, P0 = boolean>(_v: P0): R;
    preferredEdge<R = number>(): R;
    setPreferredEdge<R = void, P0 = number>(_v: P0): R;
    autoenablesItems<R = boolean>(): R;
    setAutoenablesItems<R = void, P0 = boolean>(_v: P0): R;
    pullsDown<R = boolean>(): R;
    setPullsDown<R = void, P0 = boolean>(_v: P0): R;
    debugDescription<R = NSString>(): R;
    description<R = NSString>(): R;
    hash<R = number>(): R;
    superclass<R = unknown>(): R;
  }
  namespace NSPopUpButtonCell {
    export interface CLASS<T0 = void, T1 = void, T2 = void> extends NSMenuItemCell, NSMenuItemValidationProtocol {
      alloc<R = NSPopUpButtonCell>(): R;
      new: <R = NSPopUpButtonCell>() => R;
      _attachedCell<R = unknown>(): R;
    }
  }
}

declare const NSPopUpButtonCell: cocoa.NSPopUpButtonCell.CLASS;
