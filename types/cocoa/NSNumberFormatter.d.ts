/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface NSNumberFormatter<T0 = void, T1 = void, T2 = void> extends NSFormatter, NSObservableProtocol, NSObserverProtocol {
    _setUsesCharacterDirection<R = void, P0 = boolean>(__setUsesCharacterDirection: P0): R;
    _usesCharacterDirection<R = boolean>(): R;
    _hasSetInternationalCurrencySymbol<R = boolean>(): R;
    _hasSetCurrencySymbol<R = boolean>(): R;
    _hasSetCurrencyCode<R = boolean>(): R;
    numberFromString<R = unknown, P0 = unknown>(_numberFromString: P0): R;
    stringFromNumber<R = unknown, P0 = unknown>(_stringFromNumber: P0): R;
    dealloc<R = void>(): R;
    _reset<R = void>(): R;
    __Keynote_NOOP<R = void>(): R;
    _regenerateFormatter<R = void>(): R;
    _clearFormatter<R = void>(): R;
    checkLocaleChange<R = boolean>(): R;
    resetCheckLocaleChange<R = void>(): R;
    resetCheckModify<R = void>(): R;
    checkModify<R = boolean>(): R;
    clearPropertyBit<R = void>(): R;
    setPropertyBit<R = void>(): R;
    getFormatter<R = void>(): R;
    setLocalizationFromDefaults<R = void>(): R;
    _removeInternalRedFromTextAttributesOfNegativeValues<R = void>(): R;
    _containsColorForTextAttributesOfNegativeValues<R = boolean>(): R;
    _addInternalRedToTextAttributesOfNegativeValues<R = void>(): R;
    __oldnf_getObjectValue_forString_errorDescription<R = boolean, P0 = unknown, P1 = unknown, P2 = unknown>(___oldnf_getObjectValue: P0, _forString: P1, _errorDescription: P2): R;
    __oldnf_stringForObjectValue<R = unknown, P0 = unknown>(___oldnf_stringForObjectValue: P0): R;
    __oldnf_decimalIsNotANumber<R = boolean, P0 = unknown>(___oldnf_decimalIsNotANumber: P0): R;
    __oldnf_numberStringForValueObject_withBuffer_andNegativeFlag<R = unknown, P0 = unknown, P1 = unknown, P2 = boolean>(___oldnf_numberStringForValueObject: P0, _withBuffer: P1, _andNegativeFlag: P2): R;
    __oldnf_surroundValueInString_withLength_andBuffer<R = void, P0 = number, P1 = number, P2 = unknown>(___oldnf_surroundValueInString: P0, _withLength: P1, _andBuffer: P2): R;
    __oldnf_setLocalizationFromDefaults<R = void>(): R;
    __oldnf_removeInternalRedFromTextAttributesOfNegativeValues<R = void>(): R;
    __oldnf_containsColorForTextAttributesOfNegativeValues<R = boolean>(): R;
    __oldnf_addInternalRedToTextAttributesOfNegativeValues<R = void>(): R;
    __oldnf_addThousandSeparatorsToFormat_withBuffer<R = unknown, P0 = unknown, P1 = unknown>(___oldnf_addThousandSeparatorsToFormat: P0, _withBuffer: P1): R;
    __oldnf_addThousandSeparators_withBuffer<R = void, P0 = unknown, P1 = unknown>(___oldnf_addThousandSeparators: P0, _withBuffer: P1): R;
    partialStringValidationEnabled<R = boolean>(): R;
    setPartialStringValidationEnabled<R = void, P0 = boolean>(_v: P0): R;
    maximumSignificantDigits<R = number>(): R;
    setMaximumSignificantDigits<R = void, P0 = number>(_v: P0): R;
    minimumSignificantDigits<R = number>(): R;
    setMinimumSignificantDigits<R = void, P0 = number>(_v: P0): R;
    usesSignificantDigits<R = boolean>(): R;
    setUsesSignificantDigits<R = void, P0 = boolean>(_v: P0): R;
    lenient<R = boolean>(): R;
    setLenient<R = void, P0 = boolean>(_v: P0): R;
    currencyGroupingSeparator<R = NSString>(): R;
    setCurrencyGroupingSeparator<R = void, P0 = NSString>(_v: P0): R;
    maximum<R = NSNumber>(): R;
    setMaximum<R = void, P0 = NSNumber>(_v: P0): R;
    minimum<R = NSNumber>(): R;
    setMinimum<R = void, P0 = NSNumber>(_v: P0): R;
    maximumFractionDigits<R = number>(): R;
    setMaximumFractionDigits<R = void, P0 = number>(_v: P0): R;
    minimumFractionDigits<R = number>(): R;
    setMinimumFractionDigits<R = void, P0 = number>(_v: P0): R;
    maximumIntegerDigits<R = number>(): R;
    setMaximumIntegerDigits<R = void, P0 = number>(_v: P0): R;
    minimumIntegerDigits<R = number>(): R;
    setMinimumIntegerDigits<R = void, P0 = number>(_v: P0): R;
    roundingIncrement<R = NSNumber>(): R;
    setRoundingIncrement<R = void, P0 = NSNumber>(_v: P0): R;
    roundingMode<R = number>(): R;
    setRoundingMode<R = void, P0 = number>(_v: P0): R;
    paddingPosition<R = number>(): R;
    setPaddingPosition<R = void, P0 = number>(_v: P0): R;
    paddingCharacter<R = NSString>(): R;
    setPaddingCharacter<R = void, P0 = NSString>(_v: P0): R;
    multiplier<R = NSNumber>(): R;
    setMultiplier<R = void, P0 = NSNumber>(_v: P0): R;
    formatWidth<R = number>(): R;
    setFormatWidth<R = void, P0 = number>(_v: P0): R;
    secondaryGroupingSize<R = number>(): R;
    setSecondaryGroupingSize<R = void, P0 = number>(_v: P0): R;
    groupingSize<R = number>(): R;
    setGroupingSize<R = void, P0 = number>(_v: P0): R;
    exponentSymbol<R = NSString>(): R;
    setExponentSymbol<R = void, P0 = NSString>(_v: P0): R;
    plusSign<R = NSString>(): R;
    setPlusSign<R = void, P0 = NSString>(_v: P0): R;
    minusSign<R = NSString>(): R;
    setMinusSign<R = void, P0 = NSString>(_v: P0): R;
    perMillSymbol<R = NSString>(): R;
    setPerMillSymbol<R = void, P0 = NSString>(_v: P0): R;
    percentSymbol<R = NSString>(): R;
    setPercentSymbol<R = void, P0 = NSString>(_v: P0): R;
    internationalCurrencySymbol<R = NSString>(): R;
    setInternationalCurrencySymbol<R = void, P0 = NSString>(_v: P0): R;
    currencySymbol<R = NSString>(): R;
    setCurrencySymbol<R = void, P0 = NSString>(_v: P0): R;
    currencyCode<R = NSString>(): R;
    setCurrencyCode<R = void, P0 = NSString>(_v: P0): R;
    negativeSuffix<R = NSString>(): R;
    setNegativeSuffix<R = void, P0 = NSString>(_v: P0): R;
    negativePrefix<R = NSString>(): R;
    setNegativePrefix<R = void, P0 = NSString>(_v: P0): R;
    positiveSuffix<R = NSString>(): R;
    setPositiveSuffix<R = void, P0 = NSString>(_v: P0): R;
    positivePrefix<R = NSString>(): R;
    setPositivePrefix<R = void, P0 = NSString>(_v: P0): R;
    textAttributesForNegativeInfinity<R = NSDictionary>(): R;
    setTextAttributesForNegativeInfinity<R = void, P0 = NSDictionary>(_v: P0): R;
    negativeInfinitySymbol<R = NSString>(): R;
    setNegativeInfinitySymbol<R = void, P0 = NSString>(_v: P0): R;
    textAttributesForPositiveInfinity<R = NSDictionary>(): R;
    setTextAttributesForPositiveInfinity<R = void, P0 = NSDictionary>(_v: P0): R;
    positiveInfinitySymbol<R = NSString>(): R;
    setPositiveInfinitySymbol<R = void, P0 = NSString>(_v: P0): R;
    textAttributesForNotANumber<R = NSDictionary>(): R;
    setTextAttributesForNotANumber<R = void, P0 = NSDictionary>(_v: P0): R;
    notANumberSymbol<R = NSString>(): R;
    setNotANumberSymbol<R = void, P0 = NSString>(_v: P0): R;
    textAttributesForNil<R = NSDictionary>(): R;
    setTextAttributesForNil<R = void, P0 = NSDictionary>(_v: P0): R;
    nilSymbol<R = NSString>(): R;
    setNilSymbol<R = void, P0 = NSString>(_v: P0): R;
    textAttributesForZero<R = NSDictionary>(): R;
    setTextAttributesForZero<R = void, P0 = NSDictionary>(_v: P0): R;
    zeroSymbol<R = NSString>(): R;
    setZeroSymbol<R = void, P0 = NSString>(_v: P0): R;
    groupingSeparator<R = NSString>(): R;
    setGroupingSeparator<R = void, P0 = NSString>(_v: P0): R;
    usesGroupingSeparator<R = boolean>(): R;
    setUsesGroupingSeparator<R = void, P0 = boolean>(_v: P0): R;
    currencyDecimalSeparator<R = NSString>(): R;
    setCurrencyDecimalSeparator<R = void, P0 = NSString>(_v: P0): R;
    alwaysShowsDecimalSeparator<R = boolean>(): R;
    setAlwaysShowsDecimalSeparator<R = void, P0 = boolean>(_v: P0): R;
    decimalSeparator<R = NSString>(): R;
    setDecimalSeparator<R = void, P0 = NSString>(_v: P0): R;
    allowsFloats<R = boolean>(): R;
    setAllowsFloats<R = void, P0 = boolean>(_v: P0): R;
    textAttributesForPositiveValues<R = NSDictionary>(): R;
    setTextAttributesForPositiveValues<R = void, P0 = NSDictionary>(_v: P0): R;
    positiveFormat<R = NSString>(): R;
    setPositiveFormat<R = void, P0 = NSString>(_v: P0): R;
    textAttributesForNegativeValues<R = NSDictionary>(): R;
    setTextAttributesForNegativeValues<R = void, P0 = NSDictionary>(_v: P0): R;
    negativeFormat<R = NSString>(): R;
    setNegativeFormat<R = void, P0 = NSString>(_v: P0): R;
    formatterBehavior<R = number>(): R;
    setFormatterBehavior<R = void, P0 = number>(_v: P0): R;
    generatesDecimalNumbers<R = boolean>(): R;
    setGeneratesDecimalNumbers<R = void, P0 = boolean>(_v: P0): R;
    locale<R = NSLocale>(): R;
    setLocale<R = void, P0 = NSLocale>(_v: P0): R;
    numberStyle<R = number>(): R;
    setNumberStyle<R = void, P0 = number>(_v: P0): R;
    formattingContext<R = number>(): R;
    setFormattingContext<R = void, P0 = number>(_v: P0): R;
    roundingBehavior<R = NSDecimalNumberHandler>(): R;
    setRoundingBehavior<R = void, P0 = NSDecimalNumberHandler>(_v: P0): R;
    attributedStringForNotANumber<R = NSAttributedString>(): R;
    setAttributedStringForNotANumber<R = void, P0 = NSAttributedString>(_v: P0): R;
    attributedStringForNil<R = NSAttributedString>(): R;
    setAttributedStringForNil<R = void, P0 = NSAttributedString>(_v: P0): R;
    attributedStringForZero<R = NSAttributedString>(): R;
    setAttributedStringForZero<R = void, P0 = NSAttributedString>(_v: P0): R;
    format<R = NSString>(): R;
    setFormat<R = void, P0 = NSString>(_v: P0): R;
    localizesFormat<R = boolean>(): R;
    setLocalizesFormat<R = void, P0 = boolean>(_v: P0): R;
    thousandSeparator<R = NSString>(): R;
    setThousandSeparator<R = void, P0 = NSString>(_v: P0): R;
    hasThousandSeparators<R = boolean>(): R;
    setHasThousandSeparators<R = void, P0 = boolean>(_v: P0): R;
    debugDescription<R = NSString>(): R;
    description<R = NSString>(): R;
    hash<R = number>(): R;
    superclass<R = unknown>(): R;
  
}
  namespace NSNumberFormatter {
    export interface CLASS<T0 = void, T1 = void, T2 = void> extends NSFormatter, NSObservableProtocol, NSObserverProtocol {
      alloc<R = NSNumberFormatter>(): R;
      new: <R = NSNumberFormatter>() => R;
      localizedStringFromNumber_numberStyle<R = unknown, P0 = unknown, P1 = number>(_localizedStringFromNumber: P0, _numberStyle: P1): R;
      initialize<R = void>(): R;
      setDefaultFormatterBehavior<R = void, P0 = number>(_setDefaultFormatterBehavior: P0): R;
      defaultFormatterBehavior<R = number>(): R;
      _setDefaultRedColor<R = void, P0 = unknown>(__setDefaultRedColor: P0): R;
      // + NSNumberFormatter(NSColorPickerAdditions): 
      _percentageColorValueTransformer<R = unknown>(): R;
      _hueColorValueFormatter<R = unknown>(): R;
    }
  }
}

declare const NSNumberFormatter: cocoa.NSNumberFormatter.CLASS;
