/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface NSEvent<T = any> extends cocoa.NSObject, cocoa.NSCopyingProtocol, cocoa.NSCodingProtocol {
    cxx_destruct<R = void>(): R;
    _isTouchesEnded<R = boolean>(): R;
    coalescedTouchesForTouch<R = unknown, P0 = unknown>(_coalescedTouchesForTouch: P0): R;
    touchesForView<R = unknown, P0 = unknown>(_touchesForView: P0): R;
    allTouches<R = unknown>(): R;
    _touchesMatchingIdentities<R = unknown, P0 = unknown>(__touchesMatchingIdentities: P0): R;
    touchesMatchingPhase_inView<R = unknown, P0 = number, P1 = unknown>(_touchesMatchingPhase: P0, _inView: P1): R;
    _touchesMatchingPhase_inView_includeResting<R = unknown, P0 = number, P1 = unknown, P2 = boolean>(__touchesMatchingPhase: P0, _inView: P1, _includeResting: P2): R;
    _eventWithOnlyTouchIdentities<R = unknown, P0 = unknown>(__eventWithOnlyTouchIdentities: P0): R;
    _eventRemovingTouchIdentities<R = unknown, P0 = unknown>(__eventRemovingTouchIdentities: P0): R;
    _eventCancellingTouchIdentities<R = unknown, P0 = unknown>(__eventCancellingTouchIdentities: P0): R;
    _eventCancellingTouches<R = unknown>(): R;
    _currentEventWithLocationInWindow_modifiers<R = unknown, P0 = cocoa.CGPoint, P1 = number>(__currentEventWithLocationInWindow: P0, _modifiers: P1): R;
    _eventRelativeToWindow<R = unknown, P0 = unknown>(__eventRelativeToWindow: P0): R;
    _velocity<R = cocoa.CGSize>(): R;
    velocity<R = cocoa.CGSize>(): R;
    _gestureAxis<R = number>(): R;
    trackSwipeEventWithOptions_dampenAmountThresholdMin_max_usingHandler<R = void, P0 = number, P1 = number, P2 = number, P3 = cocoa.CDUnknownBlockType>(_trackSwipeEventWithOptions: P0, _dampenAmountThresholdMin: P1, _max: P2, _usingHandler: P3): R;
    _trackSwipeEventWithOptions_dampenAmountThresholdMin_max_trackingDistance_axis_velocityFilterClass_usingHandler<R = void, P0 = number, P1 = number, P2 = number, P3 = number, P4 = number, P5 = unknown, P6 = cocoa.CDUnknownBlockType>(__trackSwipeEventWithOptions: P0, _dampenAmountThresholdMin: P1, _max: P2, _trackingDistance: P3, _axis: P4, _velocityFilterClass: P5, _usingHandler: P6): R;
    gestureAxis<R = number>(): R;
    progress<R = number>(): R;
    gestureAmount<R = number>(): R;
    deviceDeltaZ<R = number>(): R;
    deviceDeltaY<R = number>(): R;
    deviceDeltaX<R = number>(): R;
    _continuousScroll<R = boolean>(): R;
    _cgsEventTime<R = number>(): R;
    _nxeventTime<R = number>(): R;
    dealloc<R = void>(): R;
    copy<R = unknown>(): R;
    _eventWithModifiers<R = unknown, P0 = number>(__eventWithModifiers: P0): R;
    description<R = unknown>(): R;
    _scrollPhase<R = number>(): R;
    _eventRef<R = void>(): R;
    isGesture<R = boolean>(): R;
    _postDelayed<R = void>(): R;
    _postAtStart<R = void, P0 = boolean>(__postAtStart: P0): R;
    _postFromSubthread<R = void, P0 = boolean>(__postFromSubthread: P0): R;
    _setTouches<R = void, P0 = unknown>(__setTouches: P0): R;
    _setEventRef<R = void, P0 = void>(__setEventRef: P0): R;
    _isDeadkey<R = boolean>(): R;
    _matchesKeyEquivalent_modifierMask<R = boolean, P0 = unknown, P1 = number>(__matchesKeyEquivalent: P0, _modifierMask: P1): R;
    _scrollCount<R = number>(): R;
    _resetScrollAcceleration<R = void>(): R;
    _unacceleratedScrollingDeltaY<R = number>(): R;
    _unacceleratedScrollingDeltaX<R = number>(): R;
    _hasAcceleratedScrollingDeltas<R = boolean>(): R;
    _eventRecordDelta<R = number, P0 = number>(__eventRecordDelta: P0): R;
    _cgsEventRecord<R = unknown>(): R;
    _initWithCGEvent_eventRef<R = unknown, P0 = cocoa.__CGEvent, P1 = void>(__initWithCGEvent: P0, _eventRef: P1): R;
    _initDigitizerTouchesFromIOHidEvent_window_contextID<R = void, P0 = cocoa.__IOHIDEvent, P1 = unknown, P2 = number>(__initDigitizerTouchesFromIOHidEvent: P0, _window: P1, _contextID: P2): R;
    _initCoalescingTouchEvents<R = unknown, P0 = unknown>(__initCoalescingTouchEvents: P0): R;
    _initMTTouchesFromIOHidEvent<R = void, P0 = cocoa.__IOHIDEvent>(__initMTTouchesFromIOHidEvent: P0): R;
    _initAuxiliaryData<R = void>(): R;
    _eventRefInternal<R = void>(): R;
    _initWithEventRefInternal<R = unknown, P0 = void>(__initWithEventRefInternal: P0): R;
    _setSynthesizedKeyEvent<R = void, P0 = boolean>(__setSynthesizedKeyEvent: P0): R;
    _isSynthesizedKeyEvent<R = boolean>(): R;
    _fixCommandAlphaShifts<R = void>(): R;
    command<R = number>(): R;
    _hasOptionKeyModifier<R = boolean>(): R;
    _isVerticalWheelEvent<R = boolean>(): R;
    _isWheelEvent<R = boolean>(): R;
    _isMiddleButtonEvent<R = boolean>(): R;
    _isSpaceKeyEvent<R = boolean>(): R;
    _isEscapeKeyEvent<R = boolean>(): R;
    _safari_isKeyEvent<R = boolean, P0 = number>(__safari_isKeyEvent: P0): R;
    associatedEventsMask<R = number>(): R;
    enteringProximity<R = boolean>(): R;
    pointingDeviceType<R = number>(): R;
    capabilityMask<R = number>(): R;
    uniqueID<R = number>(): R;
    pointingDeviceSerialNumber<R = number>(): R;
    vendorPointingDeviceType<R = number>(): R;
    systemTabletID<R = number>(): R;
    pointingDeviceID<R = number>(): R;
    tabletID<R = number>(): R;
    vendorID<R = number>(): R;
    vendorDefined<R = unknown>(): R;
    tangentialPressure<R = number>(): R;
    rotation<R = number>(): R;
    tilt<R = cocoa.CGPoint>(): R;
    buttonMask<R = number>(): R;
    absoluteZ<R = number>(): R;
    absoluteY<R = number>(): R;
    absoluteX<R = number>(): R;
    deviceID<R = number>(): R;
    pressureBehavior<R = number>(): R;
    stage<R = number>(): R;
    stageTransition<R = number>(): R;
    phase<R = number>(): R;
    directionInvertedFromDevice<R = boolean>(): R;
    data2<R = number>(): R;
    data1<R = number>(): R;
    subtype<R = number>(): R;
    userData<R = void>(): R;
    trackingArea<R = cocoa.NSTrackingArea>(): R;
    trackingNumber<R = number>(): R;
    keyCode<R = number>(): R;
    ARepeat<R = boolean>(): R;
    charactersIgnoringModifiers<R = cocoa.NSString>(): R;
    characters<R = cocoa.NSString>(): R;
    magnification<R = number>(): R;
    momentumPhase<R = number>(): R;
    scrollingDeltaY<R = number>(): R;
    scrollingDeltaX<R = number>(): R;
    hasPreciseScrollingDeltas<R = boolean>(): R;
    deltaZ<R = number>(): R;
    deltaX<R = number>(): R;
    deltaY<R = number>(): R;
    buttonNumber<R = number>(): R;
    pressure<R = number>(): R;
    clickCount<R = number>(): R;
    eventNumber<R = number>(): R;
    context<R = cocoa.NSGraphicsContext>(): R;
    windowNumber<R = number>(): R;
    window<R = cocoa.NSWindow>(): R;
    timestamp<R = number>(): R;
    modifierFlags<R = number>(): R;
    locationInWindow<R = cocoa.CGPoint>(): R;
    type<R = number>(): R;
    CGEvent<R = cocoa.__CGEvent>(): R;
    eventRef<R = void>(): R;
    // + NSEvent(EventShouldDrag):
    isRightClick<R = boolean>(): R;
    isDoubleClick<R = boolean>(): R;
    shouldStartDrag<R = boolean>(): R;
  }
  namespace classes {
    export interface NSEvent<T = any> extends cocoa.classes.NSObject, cocoa.classes.NSCopyingProtocol, cocoa.classes.NSCodingProtocol {
      alloc<R = NSEvent>(): R;
      new: <R = NSEvent>() => R;
      _touchesFromSet_matchingPhase_inView_includeResting<R = unknown, P0 = unknown, P1 = number, P2 = unknown, P3 = boolean>(__touchesFromSet: P0, _matchingPhase: P1, _inView: P2, _includeResting: P3): R;
      stopPeriodicEvents<R = void>(): R;
      _stopPeriodicEventsForSource<R = void, P0 = unknown>(__stopPeriodicEventsForSource: P0): R;
      startPeriodicEventsAfterDelay_withPeriod<R = void, P0 = number, P1 = number>(_startPeriodicEventsAfterDelay: P0, _withPeriod: P1): R;
      isSwipeTrackingFromScrollEventsEnabled<R = boolean>(): R;
      _fluidSwipeTrackingBehaviorChanged<R = void>(): R;
      _delayedEventMatchingMask_pull<R = unknown, P0 = number, P1 = boolean>(__delayedEventMatchingMask: P0, _pull: P1): R;
      _discardCursorEventsForWindowNumber_criteria<R = void, P0 = number, P1 = number>(__discardCursorEventsForWindowNumber: P0, _criteria: P1): R;
      _discardEventsForTrackingArea_window<R = void, P0 = unknown, P1 = unknown>(__discardEventsForTrackingArea: P0, _window: P1): R;
      _discardEventsForTrackingArea<R = void, P0 = unknown>(__discardEventsForTrackingArea: P0): R;
      _discardEventsWithMask_eventTime<R = void, P0 = number, P1 = number>(__discardEventsWithMask: P0, _eventTime: P1): R;
      _discardEventsFromSubthread<R = void, P0 = unknown>(__discardEventsFromSubthread: P0): R;
      _discardEventsMatchingMask_beforeTime_inQueue<R = void, P0 = number, P1 = number, P2 = number>(__discardEventsMatchingMask: P0, _beforeTime: P1, _inQueue: P2): R;
      _resetDiscardMask<R = void>(): R;
      standardRotationThreshold<R = number>(): R;
      standardMagnificationThreshold<R = number>(): R;
      _resetDeviceCapabilityCaches<R = void>(): R;
      _resetDefaults<R = void>(): R;
      isMouseCoalescingEnabled<R = boolean>(): R;
      setMouseCoalescingEnabled<R = void, P0 = boolean>(_setMouseCoalescingEnabled: P0): R;
      eventWithCGEvent<R = unknown, P0 = cocoa.__CGEvent>(_eventWithCGEvent: P0): R;
      eventWithEventRef<R = unknown, P0 = void>(_eventWithEventRef: P0): R;
      _eventWithEventRefInternal<R = unknown, P0 = void>(__eventWithEventRefInternal: P0): R;
      _eventWithCGSEvent<R = unknown, P0 = void>(__eventWithCGSEvent: P0): R;
      removeMonitor<R = void, P0 = unknown>(_removeMonitor: P0): R;
      _sendEventToObservers<R = unknown, P0 = unknown>(__sendEventToObservers: P0): R;
      addLocalMonitorForEventsMatchingMask_handler<R = unknown, P0 = number, P1 = cocoa.CDUnknownBlockType>(_addLocalMonitorForEventsMatchingMask: P0, _handler: P1): R;
      addLocalMonitorForEventsMatchingMask_placement_handler<R = unknown, P0 = number, P1 = number, P2 = cocoa.CDUnknownBlockType>(_addLocalMonitorForEventsMatchingMask: P0, _placement: P1, _handler: P2): R;
      addGlobalMonitorForEventsMatchingMask_handler<R = unknown, P0 = number, P1 = cocoa.CDUnknownBlockType>(_addGlobalMonitorForEventsMatchingMask: P0, _handler: P1): R;
      keyRepeatInterval<R = number>(): R;
      keyRepeatDelay<R = number>(): R;
      doubleClickInterval<R = number>(): R;
      pressedMouseButtons<R = number>(): R;
      modifierFlags<R = number>(): R;
      mouseLocation<R = cocoa.CGPoint>(): R;
      _clearCancelledTouches<R = void>(): R;
      _setSuppressesDirectTouchRouting<R = void, P0 = boolean>(__setSuppressesDirectTouchRouting: P0): R;
      _clearDFRTouches<R = void>(): R;
      _eventWithTouches<R = unknown, P0 = unknown>(__eventWithTouches: P0): R;
      _eventsCancellingTouchesForWindow<R = unknown, P0 = unknown>(__eventsCancellingTouchesForWindow: P0): R;
      otherEventWithType_location_modifierFlags_timestamp_windowNumber_context_subtype_data1_data2<R = unknown, P0 = number, P1 = cocoa.CGPoint, P2 = number, P3 = number, P4 = number, P5 = unknown, P6 = number, P7 = number, P8 = number>(_otherEventWithType: P0, _location: P1, _modifierFlags: P2, _timestamp: P3, _windowNumber: P4, _context: P5, _subtype: P6, _data1: P7, _data2: P8): R;
      enterExitEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_trackingNumber_userData<R = unknown, P0 = number, P1 = cocoa.CGPoint, P2 = number, P3 = number, P4 = number, P5 = unknown, P6 = number, P7 = number, P8 = void>(_enterExitEventWithType: P0, _location: P1, _modifierFlags: P2, _timestamp: P3, _windowNumber: P4, _context: P5, _eventNumber: P6, _trackingNumber: P7, _userData: P8): R;
      keyEventWithType_location_modifierFlags_timestamp_windowNumber_context_characters_charactersIgnoringModifiers_isARepeat_keyCode<R = unknown, P0 = number, P1 = cocoa.CGPoint, P2 = number, P3 = number, P4 = number, P5 = unknown, P6 = unknown, P7 = unknown, P8 = boolean, P9 = number>(_keyEventWithType: P0, _location: P1, _modifierFlags: P2, _timestamp: P3, _windowNumber: P4, _context: P5, _characters: P6, _charactersIgnoringModifiers: P7, _isARepeat: P8, _keyCode: P9): R;
      _quickLookEventWithLocation_modifierFlags_timestamp_windowNumber_context_eventNumber<R = unknown, P0 = cocoa.CGPoint, P1 = number, P2 = number, P3 = number, P4 = unknown, P5 = number>(__quickLookEventWithLocation: P0, _modifierFlags: P1, _timestamp: P2, _windowNumber: P3, _context: P4, _eventNumber: P5): R;
      mouseEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_clickCount_pressure<R = unknown, P0 = number, P1 = cocoa.CGPoint, P2 = number, P3 = number, P4 = number, P5 = unknown, P6 = number, P7 = number, P8 = number>(_mouseEventWithType: P0, _location: P1, _modifierFlags: P2, _timestamp: P3, _windowNumber: P4, _context: P5, _eventNumber: P6, _clickCount: P7, _pressure: P8): R;
      initialize<R = void>(): R;
      _navigationEventWithCommand_data_windowNumber<R = unknown, P0 = number, P1 = number, P2 = number>(__navigationEventWithCommand: P0, _data: P1, _windowNumber: P2): R;
      _nextConcurrentEventMatchingMask<R = unknown, P0 = number>(__nextConcurrentEventMatchingMask: P0): R;
      _removeConcurrentEventMonitor<R = void, P0 = unknown>(__removeConcurrentEventMonitor: P0): R;
      _addConcurrentEventMonitorMatchingMask_identifier_handler<R = unknown, P0 = number, P1 = unknown, P2 = cocoa.CDUnknownBlockType>(__addConcurrentEventMonitorMatchingMask: P0, _identifier: P1, _handler: P2): R;
      _isConcurrentEventProcessingOn<R = boolean>(): R;
      _updateMainThreadEventFilter<R = void>(): R;
      _registerForConcurrentEventProcessing<R = void>(): R;
      _startConcurrentEventProcessing<R = void>(): R;
      _isConcurrentEventProcessingSupported<R = boolean, P0 = unknown>(__isConcurrentEventProcessingSupported: P0): R;
      _mouseButtonIsDown<R = boolean>(): R;
      // + NSEvent(EventShouldDrag):
      
    }
  }
}

declare const NSEvent: cocoa.classes.NSEvent;
