/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface NSTableRowData<T = any> extends NSObject, NSAnimationDelegateProtocol {
    cxx_destruct<R = void>(): R;
    _animateSwipeToDeleteWithGestureAmount_velocity_stiffness<R = void, P0 = number, P1 = number, P2 = number>(__animateSwipeToDeleteWithGestureAmount: P0, _velocity: P1, _stiffness: P2): R;
    _trackSwipeToDeleteFromEvent<R = void, P0 = unknown>(__trackSwipeToDeleteFromEvent: P0): R;
    _rubberBandGestureAmount<R = number, P0 = number>(__rubberBandGestureAmount: P0): R;
    _doSwipeToDeleteConsumeAnimationWithRowAction_fromSwipe<R = void, P0 = unknown, P1 = boolean>(__doSwipeToDeleteConsumeAnimationWithRowAction: P0, _fromSwipe: P1): R;
    _releaseSwipeToDeleteScaneLineView<R = void>(): R;
    _animateSwipeToDeleteScanLineView<R = void>(): R;
    _setupDeleteScanLineViewWithRowAction<R = void, P0 = unknown>(__setupDeleteScanLineViewWithRowAction: P0): R;
    _fullRowSwipeToDeletePercentage<R = number>(): R;
    _maxSwipeToDeletePercentage<R = number>(): R;
    _trackSwipeWithScrollEvent_usingHandler<R = void, P0 = unknown, P1 = CDUnknownBlockType>(__trackSwipeWithScrollEvent: P0, _usingHandler: P1): R;
    _setSwipeToDeleteRow_editActions_edge<R = void, P0 = number, P1 = unknown, P2 = number>(__setSwipeToDeleteRow: P0, _editActions: P1, _edge: P2): R;
    _actionButtonClicked<R = void, P0 = unknown>(__actionButtonClicked: P0): R;
    _updateActionButtonPositionsForRowView_edge_exposedPercentage<R = void, P0 = unknown, P1 = number, P2 = number>(__updateActionButtonPositionsForRowView: P0, _edge: P1, _exposedPercentage: P2): R;
    _getSwipeButtonPercentageForRowView_exposedPercentage_consumingPercentage<R = unknown, P0 = unknown, P1 = number, P2 = number>(__getSwipeButtonPercentageForRowView: P0, _exposedPercentage: P1, _consumingPercentage: P2): R;
    _consumeButtonPercentageForExposedCellPercentage_consumingPercentage<R = number, P0 = number, P1 = number>(__consumeButtonPercentageForExposedCellPercentage: P0, _consumingPercentage: P1): R;
    _setupEditActionsButtonsForActions_edge<R = void, P0 = unknown, P1 = number>(__setupEditActionsButtonsForActions: P0, _edge: P1): R;
    _updateSwipeToDeleteRowButtonsIfNeeded<R = void>(): R;
    _setSwipeToDeleteAmount_fromSwipe<R = void, P0 = number, P1 = boolean>(__setSwipeToDeleteAmount: P0, _fromSwipe: P1): R;
    _swipeToDeleteRowIsConsuming<R = boolean>(): R;
    _swipeToDeleteIsConsumingValue<R = boolean, P0 = number>(__swipeToDeleteIsConsumingValue: P0): R;
    _releaseSwipeToDeleteFinishAnimation<R = void>(): R;
    _startSwipeToDeleteConsumeAnimationFromPercentage_targetPercentage_velocity<R = void, P0 = number, P1 = number, P2 = number>(__startSwipeToDeleteConsumeAnimationFromPercentage: P0, _targetPercentage: P1, _velocity: P2): R;
    _makeSwipeAnimationFromPercentage_targetPercentage_velocity_stiffness<R = unknown, P0 = number, P1 = number, P2 = number, P3 = number>(__makeSwipeAnimationFromPercentage: P0, _targetPercentage: P1, _velocity: P2, _stiffness: P3): R;
    _releaseSwipeToDeleteConsumeAnimation<R = void>(): R;
    _setSwipeToDeleteCellOffset<R = void, P0 = number>(__setSwipeToDeleteCellOffset: P0): R;
    _resetSwipeToDeleteRow<R = void>(): R;
    _runAnimationGroupWithDuration_disableInteraction_work<R = void, P0 = number, P1 = boolean, P2 = CDUnknownBlockType>(__runAnimationGroupWithDuration: P0, _disableInteraction: P1, _work: P2): R;
    _defaultShouldAnimateValue<R = boolean>(): R;
    handleSwipeOnRow_withEvent<R = boolean, P0 = number, P1 = unknown>(_handleSwipeOnRow: P0, _withEvent: P1): R;
    _startSwipeOnRow_withEvent<R = boolean, P0 = number, P1 = unknown>(__startSwipeOnRow: P0, _withEvent: P1): R;
    endSwipeToDeleteIfNeeded<R = boolean>(): R;
    prepareContentInRect<R = void, P0 = CGRect>(_prepareContentInRect: P0): R;
    hideFloatingHeaderViewAnimated<R = void, P0 = boolean>(_hideFloatingHeaderViewAnimated: P0): R;
    showFloatingHeaderViewAnimated<R = void, P0 = boolean>(_showFloatingHeaderViewAnimated: P0): R;
    _updateFloatingHeaderViewFrame<R = void>(): R;
    _isFloatingHeaderView<R = boolean>(): R;
    updateRowViewSelectionBlendingMode<R = void>(): R;
    updateRowViewBackgroundColors<R = void>(): R;
    removeContextualMenuHighlighting<R = void>(): R;
    setupContextualMenuHighlightingForRow<R = void, P0 = number>(_setupContextualMenuHighlightingForRow: P0): R;
    delayMakeFirstResponder<R = void, P0 = unknown>(_delayMakeFirstResponder: P0): R;
    cancelDelayMakeFirstResponder<R = void>(): R;
    _delayMakeFirstResponder<R = void, P0 = unknown>(__delayMakeFirstResponder: P0): R;
    _addDropFeedbackViews<R = void>(): R;
    _removeDropFeedbackViewsFromOldRow<R = void, P0 = number>(__removeDropFeedbackViewsFromOldRow: P0): R;
    insertedRowIndexes<R = unknown>(): R;
    deletedRowIndexes<R = unknown>(): R;
    moveRowsInRange_toIndex<R = void, P0 = _NSRange, P1 = number>(_moveRowsInRange: P0, _toIndex: P1): R;
    moveRowAtIndex_toIndex<R = void, P0 = number, P1 = number>(_moveRowAtIndex: P0, _toIndex: P1): R;
    unhideRowsAtIndexes_withRowAnimation<R = void, P0 = unknown, P1 = number>(_unhideRowsAtIndexes: P0, _withRowAnimation: P1): R;
    hideRowsAtIndexes_withRowAnimation<R = void, P0 = unknown, P1 = number>(_hideRowsAtIndexes: P0, _withRowAnimation: P1): R;
    removeRowsAtIndexes_withRowAnimation<R = void, P0 = unknown, P1 = number>(_removeRowsAtIndexes: P0, _withRowAnimation: P1): R;
    insertRowsAtIndexes_withRowAnimation<R = void, P0 = unknown, P1 = number>(_insertRowsAtIndexes: P0, _withRowAnimation: P1): R;
    _removeRowsAtIndexes_withRowAnimation<R = void, P0 = unknown, P1 = number>(__removeRowsAtIndexes: P0, _withRowAnimation: P1): R;
    _resetSwipeToDeleteRowWithNoAnimation<R = void>(): R;
    _resetCanDrawSubviewsForView<R = void, P0 = unknown>(__resetCanDrawSubviewsForView: P0): R;
    _validateRowIndexesForRemoveOrHide<R = void, P0 = unknown>(__validateRowIndexesForRemoveOrHide: P0): R;
    _ensureAllRowsToDelete<R = unknown>(): R;
    _extractExistingViewForRow<R = unknown, P0 = number>(__extractExistingViewForRow: P0): R;
    _addRowView_toDeleteForOldRow_animation<R = void, P0 = unknown, P1 = number, P2 = number>(__addRowView: P0, _toDeleteForOldRow: P1, _animation: P2): R;
    _insertUpdateItem_atIndexes<R = void, P0 = unknown, P1 = unknown>(__insertUpdateItem: P0, _atIndexes: P1): R;
    _insertAtIndexes_addItemToArrayFromRange<R = void, P0 = unknown, P1 = CDUnknownBlockType>(__insertAtIndexes: P0, _addItemToArrayFromRange: P1): R;
    _validateInsertUpdateData<R = void>(): R;
    _createAllRowstoInsertIfNecessary<R = void>(): R;
    _validateRowForInsertion<R = void, P0 = number>(__validateRowForInsertion: P0): R;
    _validateIndexesForInsertion<R = void, P0 = unknown>(__validateIndexesForInsertion: P0): R;
    _cacheViewsIfNecessary<R = void>(): R;
    updateDropFeedbackFromPriorRow_operation_mask<R = void, P0 = number, P1 = number, P2 = number>(_updateDropFeedbackFromPriorRow: P0, _operation: P1, _mask: P2): R;
    markDragAsTemporary<R = void>(): R;
    _ensureDropFeedbackData<R = void>(): R;
    draggingAccepted<R = void>(): R;
    draggingExited<R = void>(): R;
    draggingSessionEndedAtPoint_operation<R = void, P0 = CGPoint, P1 = number>(_draggingSessionEndedAtPoint: P0, _operation: P1): R;
    _doDraggingEndedForGapStyleWithFeedbackData<R = void, P0 = unknown>(__doDraggingEndedForGapStyleWithFeedbackData: P0): R;
    draggingBeginWithRowIndexes_startRow<R = void, P0 = unknown, P1 = number>(_draggingBeginWithRowIndexes: P0, _startRow: P1): R;
    draggingDestinationFeedbackStyleChanged<R = void>(): R;
    _setGapRow<R = boolean, P0 = number>(__setGapRow: P0): R;
    _invalidateTableForLastRowChangedWhenLayerBacked<R = void>(): R;
    viewWillStartLiveResize<R = void>(): R;
    viewDidEndLiveResize<R = void>(): R;
    removeFromReuseQueue<R = void, P0 = unknown>(_removeFromReuseQueue: P0): R;
    reuseQueueContainsView<R = boolean, P0 = unknown>(_reuseQueueContainsView: P0): R;
    clearReusueQueue<R = void>(): R;
    _cacheReusableView<R = void, P0 = unknown>(__cacheReusableView: P0): R;
    cacheReusableView<R = void, P0 = unknown>(_cacheReusableView: P0): R;
    makeViewWithIdentifier_owner<R = unknown, P0 = unknown, P1 = unknown>(_makeViewWithIdentifier: P0, _owner: P1): R;
    _prepareViewForReuse<R = void, P0 = unknown>(__prepareViewForReuse: P0): R;
    _unarchiveViewWithIdentifier_owner<R = unknown, P0 = unknown, P1 = unknown>(__unarchiveViewWithIdentifier: P0, _owner: P1): R;
    columnForView<R = number, P0 = unknown>(_columnForView: P0): R;
    rowForView<R = number, P0 = unknown>(_rowForView: P0): R;
    updateGroupRowStyle<R = void>(): R;
    updateRowViewFrames<R = void>(): R;
    noteHeightOfRowsWithIndexesChanged<R = void, P0 = unknown>(_noteHeightOfRowsWithIndexesChanged: P0): R;
    _shouldDelayUpdatingFrames<R = boolean>(): R;
    _updateFrameRowView_row<R = void, P0 = unknown, P1 = number>(__updateFrameRowView: P0, _row: P1): R;
    _updateFloatingGroupRowView_row<R = void, P0 = unknown, P1 = number>(__updateFloatingGroupRowView: P0, _row: P1): R;
    _frameForFloatingGroupRowIsFloating<R = CGRect, P0 = string>(__frameForFloatingGroupRowIsFloating: P0): R;
    _updateClipView_forRowView_row<R = void, P0 = unknown, P1 = unknown, P2 = number>(__updateClipView: P0, _forRowView: P1, _row: P2): R;
    endUpdatingColumnWidths<R = void>(): R;
    beginUpdatingColumnWidths<R = void>(): R;
    tableHeaderViewDraggedDistanceChanged<R = void>(): R;
    endDraggingColumn<R = void, P0 = number>(_endDraggingColumn: P0): R;
    beginDraggingColumn<R = void, P0 = number>(_beginDraggingColumn: P0): R;
    _draggedColumnViewFrameForColumn<R = CGRect, P0 = number>(__draggedColumnViewFrameForColumn: P0): R;
    concludeDragOperation<R = void, P0 = unknown>(_concludeDragOperation: P0): R;
    didMoveFromColumn_toColumn<R = void, P0 = number, P1 = number>(_didMoveFromColumn: P0, _toColumn: P1): R;
    _animatedUpdateViewPositionsForRow_rowView<R = void, P0 = number, P1 = unknown>(__animatedUpdateViewPositionsForRow: P0, _rowView: P1): R;
    updateViewWidthsFromColumn<R = void, P0 = number>(_updateViewWidthsFromColumn: P0): R;
    _shouldAnimateHeaderView<R = boolean>(): R;
    _updateColumnWidthsForRowView_atRow<R = void, P0 = unknown, P1 = number>(__updateColumnWidthsForRowView: P0, _atRow: P1): R;
    updateColumnWidthsForRowView_atRow<R = void, P0 = unknown, P1 = number>(_updateColumnWidthsForRowView: P0, _atRow: P1): R;
    _rtlUpdateColumnWidthsRelativeToOldWidths_animated_towardsOriginal<R = void, P0 = unknown, P1 = boolean, P2 = boolean>(__rtlUpdateColumnWidthsRelativeToOldWidths: P0, _animated: P1, _towardsOriginal: P2): R;
    _ltrUpdateColumnWidthsRelativeToOldWidths_animated_towardsOriginal<R = void, P0 = unknown, P1 = boolean, P2 = boolean>(__ltrUpdateColumnWidthsRelativeToOldWidths: P0, _animated: P1, _towardsOriginal: P2): R;
    _shouldFlipForRTL<R = boolean>(): R;
    _updateColumnWidthsRelativeToOldWidths_animated_towardsOriginal<R = void, P0 = unknown, P1 = boolean, P2 = boolean>(__updateColumnWidthsRelativeToOldWidths: P0, _animated: P1, _towardsOriginal: P2): R;
    _firstChangedColumn<R = number>(): R;
    _updateOutlineColumnWidthForRowView_atRow<R = void, P0 = unknown, P1 = number>(__updateOutlineColumnWidthForRowView: P0, _atRow: P1): R;
    _columnWidthsNeedUpdate<R = boolean>(): R;
    selectionColorChanged<R = void>(): R;
    selectionShouldUsePrimaryColorChanged<R = void>(): R;
    setSelectionShouldUsePrimaryColor<R = void, P0 = boolean>(_setSelectionShouldUsePrimaryColor: P0): R;
    enumerateAvailableRowViewsUsingBlock<R = void, P0 = CDUnknownBlockType>(_enumerateAvailableRowViewsUsingBlock: P0): R;
    deselectRowIndexes<R = void, P0 = unknown>(_deselectRowIndexes: P0): R;
    didDeselectRow<R = void, P0 = number>(_didDeselectRow: P0): R;
    didSelectRow<R = void, P0 = number>(_didSelectRow: P0): R;
    _setRow_toSelected<R = void, P0 = number, P1 = boolean>(__setRow: P0, _toSelected: P1): R;
    forceUpdateSelectedRows<R = void>(): R;
    changeSelectedRowIndexesTo<R = void, P0 = unknown>(_changeSelectedRowIndexesTo: P0): R;
    _setRowView_atRow_toSelected<R = void, P0 = unknown, P1 = number, P2 = boolean>(__setRowView: P0, _atRow: P1, _toSelected: P2): R;
    _recacheAllCellsForRowView_row<R = void, P0 = unknown, P1 = number>(__recacheAllCellsForRowView: P0, _row: P1): R;
    setFirstResponderRowView_atRow<R = void, P0 = unknown, P1 = number>(_setFirstResponderRowView: P0, _atRow: P1): R;
    _shouldSetBackgroundForTextView<R = boolean, P0 = unknown>(__shouldSetBackgroundForTextView: P0): R;
    _unregisterForTextDidEndEditingNote<R = void>(): R;
    _registerForTextDidEndEditingNote<R = void>(): R;
    _tableTextDidEndEditing<R = void, P0 = unknown>(__tableTextDidEndEditing: P0): R;
    _updateVisibleRowEntriesAnimated<R = void>(): R;
    _updateVisibleRowFrames<R = void>(): R;
    didRemoveTableColumnAtIndex<R = void, P0 = number>(_didRemoveTableColumnAtIndex: P0): R;
    didAddTableColumn<R = void, P0 = unknown>(_didAddTableColumn: P0): R;
    _updateConstraintsForRowView_atRow<R = void, P0 = unknown, P1 = number>(__updateConstraintsForRowView: P0, _atRow: P1): R;
    _updateConstraintsAtColumn_row_rowView<R = void, P0 = number, P1 = number, P2 = unknown>(__updateConstraintsAtColumn: P0, _row: P1, _rowView: P2): R;
    _makeCellConstraintsAtColumn_row_rowView_cellView<R = unknown, P0 = number, P1 = number, P2 = unknown, P3 = unknown>(__makeCellConstraintsAtColumn: P0, _row: P1, _rowView: P2, _cellView: P3): R;
    _cellOffsetConstraintConstantsForColumn_row<R = CGRect, P0 = number, P1 = number>(__cellOffsetConstraintConstantsForColumn: P0, _row: P1): R;
    setColumnHidden_atColumnIndex<R = void, P0 = boolean, P1 = number>(_setColumnHidden: P0, _atColumnIndex: P1): R;
    updateVisibleRowViews<R = void>(): R;
    _automaticRowHeightsUpdateVisibleRowViews<R = void>(): R;
    _handleChangedAutomaticRowHeights<R = void>(): R;
    _keepTopRowStable_andDoWorkUntilDone<R = void, P0 = boolean, P1 = CDUnknownBlockType>(__keepTopRowStable: P0, _andDoWorkUntilDone: P1): R;
    cacheExistingSubviews<R = void>(): R;
    removePluckedRowView<R = void, P0 = unknown>(_removePluckedRowView: P0): R;
    verifyAttachedRowEntries<R = void>(): R;
    _updateVisibleRowEntries<R = void>(): R;
    _updatePreparedContentRect<R = void>(): R;
    _currentPreparedContentRect<R = CGRect>(): R;
    _updateFloatingGroupRowView<R = void>(): R;
    _updateGroupViewBackgrounds<R = void>(): R;
    _floatsGroupRows<R = boolean>(): R;
    _removeGroupViewBackgrounds<R = void>(): R;
    _updateGroupRowFinderStyleBackgrounds<R = void>(): R;
    _separatorColorForParentGroupRowView_withChildren<R = unknown, P0 = unknown, P1 = boolean>(__separatorColorForParentGroupRowView: P0, _withChildren: P1): R;
    _groupRowSeparatorColor<R = unknown>(): R;
    _backgroundViewWithFrame<R = unknown, P0 = CGRect>(__backgroundViewWithFrame: P0): R;
    _backgroundViewGradient<R = unknown>(): R;
    _frameForBackgroundGroupViewInRange<R = CGRect, P0 = _NSRange>(__frameForBackgroundGroupViewInRange: P0): R;
    _removeAndCacheValuesInDictionary<R = void, P0 = unknown>(__removeAndCacheValuesInDictionary: P0): R;
    _setFloatingGroupRow<R = void, P0 = number>(__setFloatingGroupRow: P0): R;
    _addFloatingGroupRowView<R = void>(): R;
    updateFloatingGroupRowFrame<R = void>(): R;
    _computeCurrentFloatingGroupRow<R = number>(): R;
    _computeFloatingGroupRowFromIndex_inVisibleRange<R = number, P0 = number, P1 = _NSRange>(__computeFloatingGroupRowFromIndex: P0, _inVisibleRange: P1): R;
    _updateClipPathIfNeeded<R = void>(): R;
    needsClipPath<R = boolean>(): R;
    ensureGroupRowIndexes<R = void>(): R;
    _dumpRowEntries<R = unknown>(): R;
    reloadDataForRowIndexes_columnIndexes<R = void, P0 = unknown, P1 = unknown>(_reloadDataForRowIndexes: P0, _columnIndexes: P1): R;
    reloadData<R = void>(): R;
    removeAllKnownSubviews<R = void>(): R;
    _removeReuseViewsIfNecessary<R = void>(): R;
    _clearUpdateData<R = void>(): R;
    _removeBackgroundView<R = void>(): R;
    _removeFloatingGroupRowView<R = void>(): R;
    _removeDropFeedbackData<R = void>(): R;
    _removeHiddenRowIndexes<R = void>(): R;
    _removeFirstResponderRowView<R = void>(): R;
    _removeRowsBeingAnimatedOff<R = void>(): R;
    _removeNonVisibleViewsInDictionary<R = void, P0 = unknown>(__removeNonVisibleViewsInDictionary: P0): R;
    rowViewAtRow_createIfNeeded<R = unknown, P0 = number, P1 = boolean>(_rowViewAtRow: P0, _createIfNeeded: P1): R;
    _availableRowViewWhileUpdatingAtRow<R = unknown, P0 = number>(__availableRowViewWhileUpdatingAtRow: P0): R;
    _removeVisibleRows<R = void>(): R;
    _clearVisibleRows<R = void>(): R;
    _addRowViewForVisibleRow<R = void, P0 = number>(__addRowViewForVisibleRow: P0): R;
    _addRowViewForVisibleRow_withPriorRowIndex_inDictionary_withRowAnimation<R = unknown, P0 = number, P1 = number, P2 = unknown, P3 = number>(__addRowViewForVisibleRow: P0, _withPriorRowIndex: P1, _inDictionary: P2, _withRowAnimation: P3): R;
    _setFrameForAddedRowView_row_withRowAnimation_priorFrameHandler<R = void, P0 = unknown, P1 = number, P2 = number, P3 = CDUnknownBlockType>(__setFrameForAddedRowView: P0, _row: P1, _withRowAnimation: P2, _priorFrameHandler: P3): R;
    _rowView_updateAssociatedViewsByOffset_inColumn<R = void, P0 = unknown, P1 = number, P2 = number>(__rowView: P0, _updateAssociatedViewsByOffset: P1, _inColumn: P2): R;
    _addRowViewForVisibleRow_withPriorView<R = unknown, P0 = number, P1 = unknown>(__addRowViewForVisibleRow: P0, _withPriorView: P1): R;
    _initializeRowView_atRow<R = void, P0 = unknown, P1 = number>(__initializeRowView: P0, _atRow: P1): R;
    _staticTableViewCellReintialize_atRow<R = void, P0 = unknown, P1 = number>(__staticTableViewCellReintialize: P0, _atRow: P1): R;
    _numberOfColumnsForRowView_atRow<R = number, P0 = unknown, P1 = number>(__numberOfColumnsForRowView: P0, _atRow: P1): R;
    _makeTemporaryPreparedRowViewForRow<R = unknown, P0 = number>(__makeTemporaryPreparedRowViewForRow: P0): R;
    preparedRowViewForOutlineView<R = unknown>(): R;
    _preparedRowViewForRow_storageHandler<R = unknown, P0 = number, P1 = CDUnknownBlockType>(__preparedRowViewForRow: P0, _storageHandler: P1): R;
    _setPropertiesForRowView_atRow<R = void, P0 = unknown, P1 = number>(__setPropertiesForRowView: P0, _atRow: P1): R;
    _setupLayoutPropertiesForCellView<R = void, P0 = unknown>(__setupLayoutPropertiesForCellView: P0): R;
    _setupLayoutHostingEngineForView<R = void, P0 = unknown>(__setupLayoutHostingEngineForView: P0): R;
    _needsIndividualLayoutEngine<R = boolean>(): R;
    _gridStyleMaskForRow_isGroupRow<R = number, P0 = number, P1 = boolean>(__gridStyleMaskForRow: P0, _isGroupRow: P1): R;
    _isVisibleRow<R = boolean, P0 = number>(__isVisibleRow: P0): R;
    _removeRowViewForRow<R = void, P0 = number>(__removeRowViewForRow: P0): R;
    _isAvailableRow<R = boolean, P0 = number>(__isAvailableRow: P0): R;
    _isSpecialRow<R = boolean, P0 = number>(__isSpecialRow: P0): R;
    _addRowView_toAnimatedOffListForRow_ignoringVisibleRows<R = void, P0 = unknown, P1 = number, P2 = boolean>(__addRowView: P0, _toAnimatedOffListForRow: P1, _ignoringVisibleRows: P2): R;
    _addRowView_toAnimatedOffListForRow<R = void, P0 = unknown, P1 = number>(__addRowView: P0, _toAnimatedOffListForRow: P1): R;
    _addViewBeingAnimatedAway<R = void, P0 = unknown>(__addViewBeingAnimatedAway: P0): R;
    _updateVisibleViewsBasedOnUpdateItemsAnimated<R = void>(): R;
    tile<R = void>(): R;
    _endAnimationGrouping<R = void>(): R;
    _beginAnimationGroupingWithDuration<R = void, P0 = number>(__beginAnimationGroupingWithDuration: P0): R;
    beginAnimationGroupingIfNeeded<R = void>(): R;
    _animationGroupAnimationDuration<R = number>(): R;
    _removeViewsBeingAnimatedAwayForReuse<R = void>(): R;
    _cullAllReusableViews<R = void>(): R;
    _cullReusableViewsArray<R = void, P0 = unknown>(__cullReusableViewsArray: P0): R;
    _reuseQueueSize<R = number>(): R;
    _cancelAnimationCleanup<R = void>(): R;
    _scheduleAnimationCleanup<R = void>(): R;
    _animatingCleanup<R = void>(): R;
    _shouldAnimateFrames<R = boolean>(): R;
    _tableIsVisible<R = boolean>(): R;
    _scheduleCleanupOfViewsBeingAnimatedOff<R = void>(): R;
    _scheduleCleanupOfRowsBeingAnimatedOffAfterDelay<R = void, P0 = number>(__scheduleCleanupOfRowsBeingAnimatedOffAfterDelay: P0): R;
    _scheduleCleanupOfRowsBeingAnimatedOff<R = void>(): R;
    removeTemporaryViews<R = void>(): R;
    _currentAnimationDuration<R = number>(): R;
    _removeViewAndAddToReuse_forRow<R = void, P0 = unknown, P1 = number>(__removeViewAndAddToReuse: P0, _forRow: P1): R;
    _removeOrHideView<R = void, P0 = unknown>(__removeOrHideView: P0): R;
    _addViewsToRowView_atRow<R = void, P0 = unknown, P1 = number>(__addViewsToRowView: P0, _atRow: P1): R;
    updateKeyViewLoopIfNeeded<R = void>(): R;
    _markUpdateKeyViewLoopDirtyForRowView<R = void, P0 = unknown>(__markUpdateKeyViewLoopDirtyForRowView: P0): R;
    _doLayoutIfNeededToRowView_row<R = void, P0 = unknown, P1 = number>(__doLayoutIfNeededToRowView: P0, _row: P1): R;
    _doAutomaticRowHeightsForRows<R = boolean, P0 = unknown>(__doAutomaticRowHeightsForRows: P0): R;
    _doAutomaticRowHeightForRowView_row<R = boolean, P0 = unknown, P1 = number>(__doAutomaticRowHeightForRowView: P0, _row: P1): R;
    _addTemporaryConstraintsForView_toParentColumnView<R = void, P0 = unknown, P1 = unknown>(__addTemporaryConstraintsForView: P0, _toParentColumnView: P1): R;
    _reactivateConstraintsForColumn_rowView<R = void, P0 = number, P1 = unknown>(__reactivateConstraintsForColumn: P0, _rowView: P1): R;
    _ensureConstraintsAtColumn_row_rowView<R = void, P0 = number, P1 = number, P2 = unknown>(__ensureConstraintsAtColumn: P0, _row: P1, _rowView: P2): R;
    _setupAndActivateConstraintsForRowView_row<R = void, P0 = unknown, P1 = number>(__setupAndActivateConstraintsForRowView: P0, _row: P1): R;
    _setupAndActivateConstraintsAtColumn_row_rowView<R = void, P0 = number, P1 = number, P2 = unknown>(__setupAndActivateConstraintsAtColumn: P0, _row: P1, _rowView: P2): R;
    automaticRowHeightMinWidthForColumn<R = number, P0 = number>(_automaticRowHeightMinWidthForColumn: P0): R;
    _doAutomaticRowHeightForRow<R = boolean, P0 = number>(__doAutomaticRowHeightForRow: P0): R;
    automaticRowHeightForRow<R = number, P0 = number>(_automaticRowHeightForRow: P0): R;
    _invalidateCachedRowHeightForRowView<R = void, P0 = unknown>(__invalidateCachedRowHeightForRowView: P0): R;
    _isFullWidthRowView_atRow<R = boolean, P0 = unknown, P1 = number>(__isFullWidthRowView: P0, _atRow: P1): R;
    _updateKeyViewLoopforRowView<R = void, P0 = unknown>(__updateKeyViewLoopforRowView: P0): R;
    ensureValidKeyViewLoopForRowView<R = void, P0 = unknown>(_ensureValidKeyViewLoopForRowView: P0): R;
    updateKeyViewLoopForAllRows<R = void>(): R;
    _addViewToRowView_atColumn_row<R = unknown, P0 = unknown, P1 = number, P2 = number>(__addViewToRowView: P0, _atColumn: P1, _row: P2): R;
    _effectiveRowSizeStyleInRowView<R = number, P0 = unknown>(__effectiveRowSizeStyleInRowView: P0): R;
    setSizeModeUpdateNeeded<R = void>(): R;
    _cellFrameForRow_column_rowFrame<R = CGRect, P0 = number, P1 = number, P2 = CGRect>(__cellFrameForRow: P0, _column: P1, _rowFrame: P2): R;
    isReloadingData<R = boolean>(): R;
    endUpdates<R = void>(): R;
    _doWorkAfterEndUpdates<R = void>(): R;
    beginUpdates<R = void>(): R;
    _updateVisibleViewsBasedOnUpdateItems<R = void>(): R;
    _doAutomaticRowHeightsForInsertedAndVisibleRows<R = unknown>(): R;
    _updateItemsAnimateOffExtraViewsWithLastTop_lastClipView_colors<R = number, P0 = number, P1 = unknown, P2 = unknown>(__updateItemsAnimateOffExtraViewsWithLastTop: P0, _lastClipView: P1, _colors: P2): R;
    _updateFloatingGroupRowForUpdateItemsIfNeeded_priorFloatingGroupRow_colors<R = void, P0 = unknown, P1 = number, P2 = unknown>(__updateFloatingGroupRowForUpdateItemsIfNeeded: P0, _priorFloatingGroupRow: P1, _colors: P2): R;
    _cacheGroupRowsForUpdateItemsIfNeeded<R = void>(): R;
    _growVisibleRowsForUpdateItemsIfNeeded<R = void>(): R;
    _setFloating_forRowView_atRow<R = void, P0 = boolean, P1 = unknown, P2 = number>(__setFloating: P0, _forRowView: P1, _atRow: P2): R;
    _setupBackgroundFillerAnimationToLastTopY_bottomYOfSlideRemoveClipView<R = void, P0 = number, P1 = number>(__setupBackgroundFillerAnimationToLastTopY: P0, _bottomYOfSlideRemoveClipView: P1): R;
    _expandedVisibleRect<R = CGRect>(): R;
    _shouldExpandVisibleRect<R = boolean>(): R;
    _updateBackgroundColorForRowView_row_colors<R = void, P0 = unknown, P1 = number, P2 = unknown>(__updateBackgroundColorForRowView: P0, _row: P1, _colors: P2): R;
    _setBackgroundColorForRowView_row<R = void, P0 = unknown, P1 = number>(__setBackgroundColorForRowView: P0, _row: P1): R;
    _setBackgroundColorForRowView_row_colors_animated<R = void, P0 = unknown, P1 = number, P2 = unknown, P3 = boolean>(__setBackgroundColorForRowView: P0, _row: P1, _colors: P2, _animated: P3): R;
    _backgroundColorForGroupRowStyle<R = unknown, P0 = number>(__backgroundColorForGroupRowStyle: P0): R;
    _isSourceListBackgroundColor<R = boolean, P0 = unknown>(__isSourceListBackgroundColor: P0): R;
    alternatingBackgroundColorForRow_colors<R = unknown, P0 = number, P1 = unknown>(_alternatingBackgroundColorForRow: P0, _colors: P1): R;
    supportAlternatingGroupRows<R = boolean>(): R;
    computePriorGroupRowFromIndex<R = number, P0 = number>(_computePriorGroupRowFromIndex: P0): R;
    _commonUpdateFramesAndRemoveForRowView_row<R = void, P0 = unknown, P1 = number>(__commonUpdateFramesAndRemoveForRowView: P0, _row: P1): R;
    _commonUpdateFramesForRowView_row<R = void, P0 = unknown, P1 = number>(__commonUpdateFramesForRowView: P0, _row: P1): R;
    markNeedingFramesUpdated<R = void>(): R;
    _removeDeletedViews<R = number>(): R;
    _dropAllVisibleRows<R = void>(): R;
    _slideInsertRow_intoClipView_withPriorView<R = void, P0 = number, P1 = unknown, P2 = unknown>(__slideInsertRow: P0, _intoClipView: P1, _withPriorView: P2): R;
    _updateColumnWidthsForNewRow_rowView<R = void, P0 = number, P1 = unknown>(__updateColumnWidthsForNewRow: P0, _rowView: P1): R;
    _animateInsertingOfClipView_rowAnimation<R = void, P0 = unknown, P1 = number>(__animateInsertingOfClipView: P0, _rowAnimation: P1): R;
    _shouldFlipRowClipViewSubviews<R = boolean>(): R;
    _makeClipViewWithFrame_rowAnimation_fromRow<R = unknown, P0 = CGRect, P1 = number, P2 = number>(__makeClipViewWithFrame: P0, _rowAnimation: P1, _fromRow: P2): R;
    _cleanupAnimationClipView<R = void, P0 = unknown>(__cleanupAnimationClipView: P0): R;
    _slideRemoveRowViews_originalRow_withAnimation<R = unknown, P0 = unknown, P1 = number, P2 = number>(__slideRemoveRowViews: P0, _originalRow: P1, _withAnimation: P2): R;
    _doLayerPerformanceUpdates<R = boolean>(): R;
    updateFloatingGroupRows<R = void>(): R;
    isFloatingGroupRowAtPoint<R = boolean, P0 = CGPoint>(_isFloatingGroupRowAtPoint: P0): R;
    _flipAllSubviewsInView_toHeight<R = void, P0 = unknown, P1 = number>(__flipAllSubviewsInView: P0, _toHeight: P1): R;
    _frameInTableForView<R = CGRect, P0 = unknown>(__frameInTableForView: P0): R;
    _shouldDoSlideAnimation<R = boolean, P0 = number>(__shouldDoSlideAnimation: P0): R;
    _throwExceptionForUpdateErrorOnRow<R = void, P0 = number>(__throwExceptionForUpdateErrorOnRow: P0): R;
    _allChangesAsStringForRow<R = unknown, P0 = number>(__allChangesAsStringForRow: P0): R;
    _resetFirstResponderForOldFirstResponderRow<R = void, P0 = number>(__resetFirstResponderForOldFirstResponderRow: P0): R;
    _removeDeletedRowView<R = void, P0 = unknown>(__removeDeletedRowView: P0): R;
    _removeDeletedRowView_withRowAnimation_towardsRow<R = void, P0 = unknown, P1 = number, P2 = number>(__removeDeletedRowView: P0, _withRowAnimation: P1, _towardsRow: P2): R;
    _releaseUpdateData<R = unknown>(): R;
    priorNumberOfRows<R = number>(): R;
    saveCurrentColumnWidths<R = void>(): R;
    _saveCurrentRowHeightState<R = void>(): R;
    dealloc<R = void>(): R;
    removeAllObjects<R = void>(): R;
    _pullExistingSubviewsOnTopAnimated<R = void, P0 = boolean>(__pullExistingSubviewsOnTopAnimated: P0): R;
    _setExistingSubviews<R = void, P0 = unknown>(__setExistingSubviews: P0): R;
    _existingSubviews<R = unknown>(): R;
    _setAnimatingBackgroundView<R = void, P0 = unknown>(__setAnimatingBackgroundView: P0): R;
    _animatingBackgroundView<R = unknown>(): R;
    hasBackgroundView<R = boolean>(): R;
    initWithTableView<R = unknown, P0 = unknown>(_initWithTableView: P0): R;
    mutableHiddenRowIndexes<R = NSMutableIndexSet>(): R;
    animationCompletionHandler<R = CDUnknownBlockType>(): R;
    setAnimationCompletionHandler<R = void, P0 = CDUnknownBlockType>(_v: P0): R;
    preferredReuseView<R = NSView>(): R;
    setPreferredReuseView<R = void, P0 = NSView>(_v: P0): R;
    rowViewsBeingAnimatedOff<R = NSMutableDictionary>(): R;
    setRowViewsBeingAnimatedOff<R = void, P0 = NSMutableDictionary>(_v: P0): R;
    firstResponderRow<R = number>(): R;
    setFirstResponderRow<R = void, P0 = number>(_v: P0): R;
    dropFeedbackData<R = NSTableViewDropFeedbackData>(): R;
    tableView<R = NSTableView>(): R;
    setTableView<R = void, P0 = NSTableView>(_v: P0): R;
    swipeData<R = NSTableSwipeData>(): R;
    targetTableFrameSize<R = CGSize>(): R;
    setTargetTableFrameSize<R = void, P0 = CGSize>(_v: P0): R;
    delayEditBlock<R = CDUnknownBlockType>(): R;
    setDelayEditBlock<R = void, P0 = CDUnknownBlockType>(_v: P0): R;
    editing<R = boolean>(): R;
    setEditing<R = void, P0 = boolean>(_v: P0): R;
    ignoreTrackingAreas<R = boolean>(): R;
    setIgnoreTrackingAreas<R = void, P0 = boolean>(_v: P0): R;
    contextualHighlightView<R = NSView>(): R;
    setContextualHighlightView<R = void, P0 = NSView>(_v: P0): R;
    attemptingDrag<R = boolean>(): R;
    setAttemptingDrag<R = void, P0 = boolean>(_v: P0): R;
    dropFeedbackViews<R = NSMutableArray>(): R;
    setDropFeedbackViews<R = void, P0 = NSMutableArray>(_v: P0): R;
    dragActive<R = boolean>(): R;
    hiddenRowIndexes<R = NSIndexSet>(): R;
    setHiddenRowIndexes<R = void, P0 = NSIndexSet>(_v: P0): R;
    floatingGroupRowView<R = NSTableRowView>(): R;
    setFloatingGroupRowView<R = void, P0 = NSTableRowView>(_v: P0): R;
    floatingGroupRow<R = number>(): R;
    setFloatingGroupRow<R = void, P0 = number>(_v: P0): R;
    groupRowIndexes<R = NSMutableIndexSet>(): R;
    setGroupRowIndexes<R = void, P0 = NSMutableIndexSet>(_v: P0): R;
    description<R = NSString>(): R;
    goingToAnimate<R = boolean>(): R;
    animating<R = boolean>(): R;
    updating<R = boolean>(): R;
    setUpdating<R = void, P0 = boolean>(_v: P0): R;
    updatingVisibleRows<R = boolean>(): R;
    animateSelection<R = boolean>(): R;
    setAnimateSelection<R = void, P0 = boolean>(_v: P0): R;
    reorderingColumns<R = boolean>(): R;
    setReorderingColumns<R = void, P0 = boolean>(_v: P0): R;
    animateViewWidths<R = boolean>(): R;
    setAnimateViewWidths<R = void, P0 = boolean>(_v: P0): R;
    currentlyActive<R = boolean>(): R;
    updateData<R = NSTableUpdateData>(): R;
    callingHeightOfRow<R = boolean>(): R;
    setCallingHeightOfRow<R = void, P0 = boolean>(_v: P0): R;
    debugDescription<R = NSString>(): R;
    hash<R = number>(): R;
    superclass<R = unknown>(): R;
  }
  namespace classes {
    export interface NSTableRowData<T = any> extends NSObject, NSAnimationDelegateProtocol {
      alloc<R = NSTableRowData>(): R;
      new: <R = NSTableRowData>() => R;
    }
  }
}

declare const NSTableRowData: cocoa.classes.NSTableRowData;
