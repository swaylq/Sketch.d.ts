/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface NSGestureRecognizer<T0 = void, T1 = void, T2 = void> extends NSObject, NSCodingProtocol {
    locationInView<R = CGPoint, P0 = unknown>(_locationInView: P0): R;
    _affectedByGesture<R = boolean, P0 = unknown>(__affectedByGesture: P0): R;
    _invalidate<R = void>(): R;
    description<R = unknown>(): R;
    _appendDescriptionToString_atLevel_includingDependencies<R = void, P0 = unknown, P1 = number, P2 = boolean>(__appendDescriptionToString: P0, _atLevel: P1, _includingDependencies: P2): R;
    _appendDescription_forDependencies_toString_atLevel<R = void, P0 = unknown, P1 = unknown, P2 = unknown, P3 = number>(__appendDescription: P0, _forDependencies: P1, _toString: P2, _atLevel: P3): R;
    _appendSubclassDescription<R = void, P0 = unknown>(__appendSubclassDescription: P0): R;
    _briefDescription<R = unknown>(): R;
    _willBeginAfterSatisfyingFailureRequirements<R = void>(): R;
    _acceptsFailureRequirements<R = boolean>(): R;
    _setAcceptsFailureRequiments<R = void, P0 = boolean>(__setAcceptsFailureRequiments: P0): R;
    _failureRequirementCompleted_withEvent<R = void, P0 = unknown, P1 = unknown>(__failureRequirementCompleted: P0, _withEvent: P1): R;
    removeFailureRequirement<R = void, P0 = unknown>(_removeFailureRequirement: P0): R;
    requireOtherGestureToFail<R = void, P0 = unknown>(_requireOtherGestureToFail: P0): R;
    _addDynamicFailureRequirement<R = void, P0 = unknown>(__addDynamicFailureRequirement: P0): R;
    _removeFailureDependent<R = void, P0 = unknown>(__removeFailureDependent: P0): R;
    _addDynamicFailureDependent<R = void, P0 = unknown>(__addDynamicFailureDependent: P0): R;
    _addFailureDependent<R = void, P0 = unknown>(__addFailureDependent: P0): R;
    _clearReferencesToRelatedGesture<R = void, P0 = unknown>(__clearReferencesToRelatedGesture: P0): R;
    _exclude<R = void>(): R;
    _cancelRecognition<R = void>(): R;
    _isDirty<R = boolean>(): R;
    _setDirty<R = void>(): R;
    _isExcludedByGesture<R = boolean, P0 = unknown>(__isExcludedByGesture: P0): R;
    _delegateCanPreventGestureRecognizer<R = boolean, P0 = unknown>(__delegateCanPreventGestureRecognizer: P0): R;
    _isFriendWithGesture<R = boolean, P0 = unknown>(__isFriendWithGesture: P0): R;
    _addFriendGesture<R = void, P0 = unknown>(__addFriendGesture: P0): R;
    _shouldBegin<R = boolean>(): R;
    _delegateShouldSendActionWhenPossibleConcurrentlyWithRecognizer<R = boolean, P0 = unknown>(__delegateShouldSendActionWhenPossibleConcurrentlyWithRecognizer: P0): R;
    _delegateShouldReceiveTouch<R = boolean, P0 = unknown>(__delegateShouldReceiveTouch: P0): R;
    _delegateShouldAttemptToRecognizeWithEvent<R = boolean, P0 = unknown>(__delegateShouldAttemptToRecognizeWithEvent: P0): R;
    _depthFirstViewCompare<R = number, P0 = unknown>(__depthFirstViewCompare: P0): R;
    _isRecognized<R = boolean>(): R;
    _queueForResetIfFinished<R = void>(): R;
    _resetIfFinished<R = void>(): R;
    _updateGestureStateWithEvent_afterDelay<R = void, P0 = unknown, P1 = boolean>(__updateGestureStateWithEvent: P0, _afterDelay: P1): R;
    _didSendActions<R = void>(): R;
    _delayedUpdateGesture<R = void>(): R;
    _requiresGestureRecognizerToFail<R = boolean, P0 = unknown>(__requiresGestureRecognizerToFail: P0): R;
    _updateGestureWithEvent<R = void, P0 = unknown>(__updateGestureWithEvent: P0): R;
    _enqueueDelayedEventsToSend<R = void>(): R;
    _clearDelayedEvents<R = void>(): R;
    _eventWasCancelled<R = void, P0 = unknown>(__eventWasCancelled: P0): R;
    _hasDelayedEvents<R = boolean>(): R;
    _delayEvent<R = boolean, P0 = unknown>(__delayEvent: P0): R;
    shouldBeRequiredToFailByGestureRecognizer<R = boolean, P0 = unknown>(_shouldBeRequiredToFailByGestureRecognizer: P0): R;
    shouldRequireFailureOfGestureRecognizer<R = boolean, P0 = unknown>(_shouldRequireFailureOfGestureRecognizer: P0): R;
    _shouldBeRequiredToFailByGestureRecognizer<R = boolean, P0 = unknown>(__shouldBeRequiredToFailByGestureRecognizer: P0): R;
    _shouldRequireFailureOfGestureRecognizer<R = boolean, P0 = unknown>(__shouldRequireFailureOfGestureRecognizer: P0): R;
    canBePreventedByGestureRecognizer<R = boolean, P0 = unknown>(_canBePreventedByGestureRecognizer: P0): R;
    canPreventGestureRecognizer<R = boolean, P0 = unknown>(_canPreventGestureRecognizer: P0): R;
    acceptsFirstMouse<R = boolean, P0 = unknown>(_acceptsFirstMouse: P0): R;
    touchesCancelledWithEvent<R = void, P0 = unknown>(_touchesCancelledWithEvent: P0): R;
    touchesEndedWithEvent<R = void, P0 = unknown>(_touchesEndedWithEvent: P0): R;
    touchesMovedWithEvent<R = void, P0 = unknown>(_touchesMovedWithEvent: P0): R;
    touchesBeganWithEvent<R = void, P0 = unknown>(_touchesBeganWithEvent: P0): R;
    _shouldSendActionWhenPossibleConcurrentlyWithRecognizer<R = boolean, P0 = unknown>(__shouldSendActionWhenPossibleConcurrentlyWithRecognizer: P0): R;
    _noteDesiredPressureBehaviorChanged<R = void>(): R;
    _desiredPressureBehavior<R = unknown>(): R;
    wantsForceGestureEvents<R = boolean>(): R;
    pressureChangeWithEvent<R = void, P0 = unknown>(_pressureChangeWithEvent: P0): R;
    translateWithEvent<R = void, P0 = unknown>(_translateWithEvent: P0): R;
    rotateWithEvent<R = void, P0 = unknown>(_rotateWithEvent: P0): R;
    magnifyWithEvent<R = void, P0 = unknown>(_magnifyWithEvent: P0): R;
    tabletPoint<R = void, P0 = unknown>(_tabletPoint: P0): R;
    flagsChanged<R = void, P0 = unknown>(_flagsChanged: P0): R;
    keyUp<R = void, P0 = unknown>(_keyUp: P0): R;
    keyDown<R = void, P0 = unknown>(_keyDown: P0): R;
    otherMouseDragged<R = void, P0 = unknown>(_otherMouseDragged: P0): R;
    rightMouseDragged<R = void, P0 = unknown>(_rightMouseDragged: P0): R;
    mouseDragged<R = void, P0 = unknown>(_mouseDragged: P0): R;
    otherMouseUp<R = void, P0 = unknown>(_otherMouseUp: P0): R;
    rightMouseUp<R = void, P0 = unknown>(_rightMouseUp: P0): R;
    mouseUp<R = void, P0 = unknown>(_mouseUp: P0): R;
    otherMouseDown<R = void, P0 = unknown>(_otherMouseDown: P0): R;
    rightMouseDown<R = void, P0 = unknown>(_rightMouseDown: P0): R;
    mouseDown<R = void, P0 = unknown>(_mouseDown: P0): R;
    _wantsFunctionRowTouches<R = boolean>(): R;
    _setWantsFunctionRowTouches<R = void, P0 = boolean>(__setWantsFunctionRowTouches: P0): R;
    setAllowedTouchTypes<R = void, P0 = number>(_setAllowedTouchTypes: P0): R;
    allowedTouchTypes<R = number>(): R;
    modifierFlags<R = number>(): R;
    setSendsActionWhenPossible<R = void, P0 = boolean>(_setSendsActionWhenPossible: P0): R;
    sendsActionWhenPossible<R = boolean>(): R;
    _hasTargets<R = boolean>(): R;
    _delayedEvents<R = unknown>(): R;
    _setFailureMap<R = void, P0 = unknown>(__setFailureMap: P0): R;
    _failureMap<R = unknown>(): R;
    _setRequiresSystemGesturesToFail<R = void, P0 = boolean>(__setRequiresSystemGesturesToFail: P0): R;
    _requiresSystemGesturesToFail<R = boolean>(): R;
    setState<R = void, P0 = number>(_setState: P0): R;
    setCancelsTouchesInView<R = void, P0 = boolean>(_setCancelsTouchesInView: P0): R;
    cancelsTouchesInView<R = boolean>(): R;
    setView<R = void, P0 = unknown>(_setView: P0): R;
    _activePressureConfiguration<R = unknown>(): R;
    _acceptedEventMask<R = number>(): R;
    quickLookWithEvent<R = void, P0 = unknown>(_quickLookWithEvent: P0): R;
    _resetGestureRecognizer<R = void>(): R;
    reset<R = void>(): R;
    _clearUpdateTimer<R = void>(): R;
    removeTarget_action<R = void, P0 = unknown, P1 = string>(_removeTarget: P0, _action: P1): R;
    addTarget_action<R = void, P0 = unknown, P1 = string>(_addTarget: P0, _action: P1): R;
    _setTouchContextId<R = void, P0 = number>(__setTouchContextId: P0): R;
    _touchContextId<R = number>(): R;
    _removeActiveGestureRecognizerFromTouchDevice<R = void>(): R;
    _setTouchDevice<R = void, P0 = unknown>(__setTouchDevice: P0): R;
    _touchDevice<R = unknown>(): R;
    _auxiliaryStorage<R = unknown>(): R;
    _deallocAuxiliaryStorage<R = void>(): R;
    dealloc<R = void>(): R;
    shouldBeArchived<R = boolean>(): R;
    initWithTarget_action<R = unknown, P0 = unknown, P1 = string>(_initWithTarget: P0, _action: P1): R;
    _descriptionForTouchBarLogging<R = unknown>(): R;
    _dynamicFailureDependents<R = NSMutableSet>(): R;
    _dynamicFailureRequirements<R = NSMutableSet>(): R;
    _failureDependents<R = NSMutableSet>(): R;
    _failureRequirements<R = NSMutableSet>(): R;
    action<R = string>(): R;
    setAction<R = void, P0 = string>(_v: P0): R;
    state<R = number>(): R;
    enabled<R = boolean>(): R;
    setEnabled<R = void, P0 = boolean>(_v: P0): R;
    delaysRotationEvents<R = boolean>(): R;
    setDelaysRotationEvents<R = void, P0 = boolean>(_v: P0): R;
    delaysMagnificationEvents<R = boolean>(): R;
    setDelaysMagnificationEvents<R = void, P0 = boolean>(_v: P0): R;
    delaysKeyEvents<R = boolean>(): R;
    setDelaysKeyEvents<R = void, P0 = boolean>(_v: P0): R;
    delaysOtherMouseButtonEvents<R = boolean>(): R;
    setDelaysOtherMouseButtonEvents<R = void, P0 = boolean>(_v: P0): R;
    delaysSecondaryMouseButtonEvents<R = boolean>(): R;
    setDelaysSecondaryMouseButtonEvents<R = void, P0 = boolean>(_v: P0): R;
    delaysPrimaryMouseButtonEvents<R = boolean>(): R;
    setDelaysPrimaryMouseButtonEvents<R = void, P0 = boolean>(_v: P0): R;
    pressureConfiguration<R = NSPressureConfiguration>(): R;
    setPressureConfiguration<R = void, P0 = NSPressureConfiguration>(_v: P0): R;
    view<R = NSView>(): R;
    delegate<R = NSGestureRecognizerDelegate>(): R;
    setDelegate<R = void, P0 = NSGestureRecognizerDelegate>(_v: P0): R;
    target<R = unknown>(): R;
    setTarget<R = void, P0 = unknown>(_v: P0): R;
  }
  namespace NSGestureRecognizer {
    export interface CLASS<T0 = void, T1 = void, T2 = void> extends NSObject, NSCodingProtocol {
      alloc<R = NSGestureRecognizer>(): R;
      new: <R = NSGestureRecognizer>() => R;
      _mostCompatibleRecognizerFromConfigured<R = unknown, P0 = unknown>(__mostCompatibleRecognizerFromConfigured: P0): R;
    }
  }
}

declare const NSGestureRecognizer: cocoa.NSGestureRecognizer.CLASS;
