/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface NSCGSWindow<T = any> extends cocoa.NSObject {
    invalidateAlphaShape<R = void>(): R;
    _prepareForRelativeMoveForWindow<R = void, P0 = unknown>(__prepareForRelativeMoveForWindow: P0): R;
    _hasUncommittedSpaceGeometryChanges<R = boolean>(): R;
    makeBackdrop<R = unknown>(): R;
    makeLayerSurface<R = unknown>(): R;
    bestParentSpaceContainingWindow<R = number>(): R;
    bestSpaceContainingWindow<R = number>(): R;
    bestVisibleSpaceContainingWindow<R = number>(): R;
    bestUserSpaceContainingWindow<R = number>(): R;
    bestUserSpaceForWindow<R = number>(): R;
    isExpectedToBeOnSpace<R = boolean, P0 = number>(_isExpectedToBeOnSpace: P0): R;
    makeLocallyRenderedLayerSurface<R = unknown>(): R;
    _hasUncommittedSpaceAssignmentChanges<R = boolean>(): R;
    unlockWindowSublevel<R = void>(): R;
    lockWindowToAbsoluteSublevel<R = void, P0 = number>(_lockWindowToAbsoluteSublevel: P0): R;
    reassociateWithSpacesByGeometry<R = void>(): R;
    disassociateFromSpacesIfOrderedOut<R = void>(): R;
    setDesiredSpace<R = void, P0 = number>(_setDesiredSpace: P0): R;
    orderOut<R = void>(): R;
    orderBelowWindow<R = void, P0 = unknown>(_orderBelowWindow: P0): R;
    orderAboveWindow<R = void, P0 = unknown>(_orderAboveWindow: P0): R;
    orderBack<R = void>(): R;
    orderFront<R = void>(): R;
    orderGroupOut<R = void>(): R;
    orderGroupBelowWindow<R = void, P0 = unknown>(_orderGroupBelowWindow: P0): R;
    orderGroupAboveWindow<R = void, P0 = unknown>(_orderGroupAboveWindow: P0): R;
    orderGroupBack<R = void>(): R;
    orderGroupFront<R = void>(): R;
    orderGroupFrontConditionally<R = void, P0 = number>(_orderGroupFrontConditionally: P0): R;
    orderingGroup<R = unknown>(): R;
    clearOrderingGroup<R = void>(): R;
    removeFromOrderingGroup<R = void>(): R;
    addToOrderingGroupBelowWindow<R = void, P0 = unknown>(_addToOrderingGroupBelowWindow: P0): R;
    addToOrderingGroupAboveWindow<R = void, P0 = unknown>(_addToOrderingGroupAboveWindow: P0): R;
    orderGroupOutIfActive<R = void>(): R;
    orderGroupBelowWindowIfActive<R = void, P0 = unknown>(_orderGroupBelowWindowIfActive: P0): R;
    orderGroupAboveWindowIfActive<R = void, P0 = unknown>(_orderGroupAboveWindowIfActive: P0): R;
    disableActivationOrdering<R = void>(): R;
    enableActivationOrderingWithInitiallyOrderedIn<R = void, P0 = boolean>(_enableActivationOrderingWithInitiallyOrderedIn: P0): R;
    moveGroupByX_Y<R = void, P0 = number, P1 = number>(_moveGroupByX: P0, _Y: P1): R;
    moveByX_Y<R = void, P0 = number, P1 = number>(_moveByX: P0, _Y: P1): R;
    moveToWindow_offsetX_Y<R = void, P0 = unknown, P1 = number, P2 = number>(_moveToWindow: P0, _offsetX: P1, _Y: P2): R;
    removeAllMovementChildren<R = void>(): R;
    removeMovementChild<R = void, P0 = unknown>(_removeMovementChild: P0): R;
    addMovementChild<R = void, P0 = unknown>(_addMovementChild: P0): R;
    thaw<R = void>(): R;
    freezeWithOptions<R = void, P0 = unknown>(_freezeWithOptions: P0): R;
    setTransform_placement<R = void, P0 = cocoa.CGAffineTransform, P1 = number>(_setTransform: P0, _placement: P1): R;
    confineMouseToRect<R = void, P0 = cocoa.CGRect>(_confineMouseToRect: P0): R;
    backdropChameleonContribution<R = number>(): R;
    setBackdropChameleonContribution<R = void, P0 = number>(_v: P0): R;
    backdropBleedFraction<R = number>(): R;
    setBackdropBleedFraction<R = void, P0 = number>(_v: P0): R;
    backdropsAreFrozen<R = boolean>(): R;
    setBackdropsAreFrozen<R = void, P0 = boolean>(_v: P0): R;
    orderedIn<R = boolean>(): R;
    level<R = number>(): R;
    setLevel<R = void, P0 = number>(_v: P0): R;
    backingStore<R = cocoa.NSCGSWindowBackingStore>(): R;
    hasBackingStore<R = boolean>(): R;
    setHasBackingStore<R = void, P0 = boolean>(_v: P0): R;
    size<R = cocoa.CGSize>(): R;
    setSize<R = void, P0 = cocoa.CGSize>(_v: P0): R;
    frame<R = cocoa.CGRect>(): R;
    setFrame<R = void, P0 = cocoa.CGRect>(_v: P0): R;
    movementChildren<R = cocoa.NSArray>(): R;
    setMovementChildren<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    activationShape<R = cocoa.CGSRegionObject>(): R;
    setActivationShape<R = void, P0 = cocoa.CGSRegionObject>(_v: P0): R;
    buttonShape<R = cocoa.CGSRegionObject>(): R;
    setButtonShape<R = void, P0 = cocoa.CGSRegionObject>(_v: P0): R;
    chameleonOverrideColor<R = cocoa.CGColor>(): R;
    setChameleonOverrideColor<R = void, P0 = cocoa.CGColor>(_v: P0): R;
    commandModifierExclusionShape<R = cocoa.CGSRegionObject>(): R;
    setCommandModifierExclusionShape<R = void, P0 = cocoa.CGSRegionObject>(_v: P0): R;
    cornerMask<R = cocoa.NSCGSWindowCornerMask>(): R;
    setCornerMask<R = void, P0 = cocoa.NSCGSWindowCornerMask>(_v: P0): R;
    dragShape<R = cocoa.CGSRegionObject>(): R;
    setDragShape<R = void, P0 = cocoa.CGSRegionObject>(_v: P0): R;
    eventShape<R = cocoa.CGSRegionObject>(): R;
    setEventShape<R = void, P0 = cocoa.CGSRegionObject>(_v: P0): R;
    hasKeyAppearance<R = boolean>(): R;
    setHasKeyAppearance<R = void, P0 = boolean>(_v: P0): R;
    hasMainAppearance<R = boolean>(): R;
    setHasMainAppearance<R = void, P0 = boolean>(_v: P0): R;
    opacity<R = number>(): R;
    setOpacity<R = void, P0 = number>(_v: P0): R;
    opaqueShape<R = cocoa.CGSRegionObject>(): R;
    setOpaqueShape<R = void, P0 = cocoa.CGSRegionObject>(_v: P0): R;
    shadowProperties<R = cocoa.NSDictionary>(): R;
    setShadowProperties<R = void, P0 = cocoa.NSDictionary>(_v: P0): R;
    shape<R = cocoa.CGSRegionObject>(): R;
    setShape<R = void, P0 = cocoa.CGSRegionObject>(_v: P0): R;
    useActiveShadow<R = boolean>(): R;
    setUseActiveShadow<R = void, P0 = boolean>(_v: P0): R;
    windowID<R = number>(): R;
  }
  namespace classes {
    export interface NSCGSWindow<T = any> extends cocoa.classes.NSObject {
      alloc<R = NSCGSWindow>(): R;
      new: <R = NSCGSWindow>() => R;
      isAnyWindowOnAVisibleSpace<R = boolean, P0 = unknown>(_isAnyWindowOnAVisibleSpace: P0): R;
      windowsWithOptions_onSpaces_forConnectionID<R = unknown, P0 = number, P1 = unknown, P2 = number>(_windowsWithOptions: P0, _onSpaces: P1, _forConnectionID: P2): R;
      onScreenWindowsForConnectionID<R = unknown, P0 = number>(_onScreenWindowsForConnectionID: P0): R;
      onScreenWindows<R = unknown>(): R;
      onScreenWindowCountForConnectionID<R = number, P0 = number>(_onScreenWindowCountForConnectionID: P0): R;
      onScreenWindowCount<R = number>(): R;
      orderApplicationWindowsFront<R = void>(): R;
      windowWithWindowID<R = unknown, P0 = number>(_windowWithWindowID: P0): R;
      window<R = unknown>(): R;
      windowWithConnectionID<R = unknown, P0 = number>(_windowWithConnectionID: P0): R;
      convertPointFromCGCoordinates<R = cocoa.CGPoint, P0 = cocoa.CGPoint>(_convertPointFromCGCoordinates: P0): R;
      convertPointToCGCoordinates<R = cocoa.CGPoint, P0 = cocoa.CGPoint>(_convertPointToCGCoordinates: P0): R;
      convertRectFromCGCoordinates<R = cocoa.CGRect, P0 = cocoa.CGRect>(_convertRectFromCGCoordinates: P0): R;
      convertRectToCGCoordinates<R = cocoa.CGRect, P0 = cocoa.CGRect>(_convertRectToCGCoordinates: P0): R;
      performBarrier<R = void, P0 = cocoa.CDUnknownBlockType>(_performBarrier: P0): R;
      coalesceUpdateOnSendRight<R = void, P0 = cocoa._mach_right_send>(_coalesceUpdateOnSendRight: P0): R;
      reenableScreenUpdates<R = void>(): R;
      disableScreenUpdates<R = void>(): R;
      synchronizeForCarbon<R = void>(): R;
      synchronize<R = void>(): R;
    }
  }
}

declare const NSCGSWindow: cocoa.classes.NSCGSWindow;
