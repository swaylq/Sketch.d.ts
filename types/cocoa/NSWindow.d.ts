/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface NSWindow<T = any> extends cocoa.NSResponder, cocoa.NSTouchBarProviderContainerProtocol, cocoa.NSAppearanceCustomizationInternalProtocol, cocoa.NSAnimatablePropertyContainerProtocol, cocoa.NSMenuItemValidationProtocol, cocoa.NSUserInterfaceValidationsProtocol, cocoa.NSUserInterfaceItemIdentificationProtocol, cocoa.NSAppearanceCustomizationProtocol, cocoa.NSAccessibilityElementProtocol, cocoa.NSAccessibilityProtocol {
    cxx_destruct<R = void>(): R;
    _allowsRootLayerBacking<R = boolean>(): R;
    setTitlebarAlphaValue<R = void, P0 = number>(_setTitlebarAlphaValue: P0): R;
    titlebarAlphaValue<R = number>(): R;
    setStandardWindowTitleButtonsAlphaValue<R = void, P0 = number>(_setStandardWindowTitleButtonsAlphaValue: P0): R;
    standardWindowTitleButtonsAlphaValue<R = number>(): R;
    setCanBeVisibleOnAllSpaces<R = void, P0 = boolean>(_setCanBeVisibleOnAllSpaces: P0): R;
    canBeVisibleOnAllSpaces<R = boolean>(): R;
    _preserveAnimatingFrames<R = boolean>(): R;
    addTabbedWindow_ordered<R = void, P0 = unknown, P1 = number>(_addTabbedWindow: P0, _ordered: P1): R;
    toggleTabOverview<R = void, P0 = unknown>(_toggleTabOverview: P0): R;
    toggleTabBar<R = void, P0 = unknown>(_toggleTabBar: P0): R;
    mergeAllWindows<R = void, P0 = unknown>(_mergeAllWindows: P0): R;
    moveTabToNewWindow<R = void, P0 = unknown>(_moveTabToNewWindow: P0): R;
    selectPreviousTab<R = void, P0 = unknown>(_selectPreviousTab: P0): R;
    selectNextTab<R = void, P0 = unknown>(_selectNextTab: P0): R;
    _maxXTitlebarButtonsWidth<R = number>(): R;
    _toolbarTrailingSpace<R = number>(): R;
    _toolbarLeadingSpace<R = number>(): R;
    _minXTitlebarButtonsWidth<R = number>(): R;
    titleMode<R = number>(): R;
    setTitleMode<R = void, P0 = number>(_setTitleMode: P0): R;
    setTitleHidden<R = void, P0 = boolean>(_setTitleHidden: P0): R;
    titleHidden<R = boolean>(): R;
    _contentViewControllerChanged<R = void>(): R;
    _hierarchyDidChangeInView<R = void, P0 = unknown>(__hierarchyDidChangeInView: P0): R;
    _drawBackgroundForCellWithRect_inView<R = void, P0 = cocoa.CGRect, P1 = unknown>(__drawBackgroundForCellWithRect: P0, _inView: P1): R;
    setAppearanceParent<R = void, P0 = unknown>(_setAppearanceParent: P0): R;
    appearanceParent<R = unknown>(): R;
    _windowDidChangeAppearance<R = void>(): R;
    _kitAppearance<R = unknown>(): R;
    _hasIncompatibleAppearanceOverride<R = boolean>(): R;
    editTitle<R = void, P0 = unknown>(_editTitle: P0): R;
    editTitleWithCompletionHandler<R = void, P0 = cocoa.CDUnknownBlockType>(_editTitleWithCompletionHandler: P0): R;
    _makeTitlebarRenamingFloatingWindow<R = unknown>(): R;
    _renamingDidEndNormally<R = void, P0 = boolean>(__renamingDidEndNormally: P0): R;
    _titlebarEditingDidEndNormally_title_editingRange_grantHandler<R = void, P0 = boolean, P1 = unknown, P2 = cocoa._NSRange, P3 = cocoa.CDUnknownBlockType>(__titlebarEditingDidEndNormally: P0, _title: P1, _editingRange: P2, _grantHandler: P3): R;
    _endTitlebarRenamingPrecleanup<R = void>(): R;
    _removeTitlebarRenamingFloatingWindow<R = void>(): R;
    _hideTitlebarFloatingWindow<R = void>(): R;
    _addTitlebarRenamingFloatingWindow<R = void>(): R;
    _titleBarRenamingApplicationDidResignActive<R = void, P0 = unknown>(__titleBarRenamingApplicationDidResignActive: P0): R;
    _cancelTitleEditing<R = boolean>(): R;
    _internalEditTitleWithCompletionHandler<R = void, P0 = cocoa.CDUnknownBlockType>(__internalEditTitleWithCompletionHandler: P0): R;
    _setSavedFirstResponderForRenaming<R = void, P0 = unknown>(__setSavedFirstResponderForRenaming: P0): R;
    _savedFirstResponderForRenaming<R = unknown>(): R;
    _setRemoteRenameSession<R = void, P0 = unknown>(__setRemoteRenameSession: P0): R;
    _remoteRenameSession<R = unknown>(): R;
    _windowForInlineTitleEditing<R = unknown>(): R;
    _setTitlebarFloatingWindow<R = void, P0 = unknown>(__setTitlebarFloatingWindow: P0): R;
    _titlebarFloatingWindow<R = unknown>(): R;
    _canEditTitle<R = boolean>(): R;
    _titlebarRenamingShouldBeInWindow<R = boolean>(): R;
    _setEventMonitorForRenaming<R = void, P0 = unknown>(__setEventMonitorForRenaming: P0): R;
    _eventMonitorForRenaming<R = unknown>(): R;
    _titlebarFloatingWindowFrame<R = cocoa.CGRect>(): R;
    _editingModeForTitle_editingRange_selectedRange<R = number, P0 = unknown, P1 = cocoa._NSRange, P2 = cocoa._NSRange>(__editingModeForTitle: P0, _editingRange: P1, _selectedRange: P2): R;
    setUserInterfaceLayoutDirection<R = void, P0 = number>(_setUserInterfaceLayoutDirection: P0): R;
    userInterfaceLayoutDirection<R = number>(): R;
    setUserInterfaceItemIdentifier<R = void, P0 = unknown>(_setUserInterfaceItemIdentifier: P0): R;
    userInterfaceItemIdentifier<R = unknown>(): R;
    canRepresentDisplayGamut<R = boolean, P0 = number>(_canRepresentDisplayGamut: P0): R;
    _setColorSpace_sendNotification_displayIfChanged<R = boolean, P0 = unknown, P1 = boolean, P2 = boolean>(__setColorSpace: P0, _sendNotification: P1, _displayIfChanged: P2): R;
    _colorSpaceIsInherited<R = boolean>(): R;
    _adjustColorSpace<R = void, P0 = boolean>(__adjustColorSpace: P0): R;
    _setWindowResolution_displayIfChanged<R = void, P0 = number, P1 = boolean>(__setWindowResolution: P0, _displayIfChanged: P1): R;
    _windowResolution<R = number>(): R;
    _windowValidForDrawing<R = boolean>(): R;
    _setAnyViewCanDrawConcurrently<R = void, P0 = boolean>(__setAnyViewCanDrawConcurrently: P0): R;
    _anyViewCanDrawConcurrently<R = boolean>(): R;
    backingLocation<R = number>(): R;
    preferredBackingLocation<R = number>(): R;
    setPreferredBackingLocation<R = void, P0 = number>(_setPreferredBackingLocation: P0): R;
    animationForKeyPath<R = unknown, P0 = unknown>(_animationForKeyPath: P0): R;
    userSpaceScaleFactor<R = number>(): R;
    _excludedFromVisibleWindowList<R = boolean>(): R;
    _setExcludedFromVisibleWindowList<R = void, P0 = boolean>(__setExcludedFromVisibleWindowList: P0): R;
    _topmostChild<R = unknown>(): R;
    _ultimateParentWindow<R = unknown>(): R;
    _childWindows<R = unknown>(): R;
    removeChildWindow<R = void, P0 = unknown>(_removeChildWindow: P0): R;
    _setIsRemovingFromParentWindow<R = void, P0 = boolean>(__setIsRemovingFromParentWindow: P0): R;
    _acceptsSecondaryKey<R = boolean>(): R;
    _canBecomeSecondaryKeyWindow<R = boolean>(): R;
    _sharesParentKeyState<R = boolean>(): R;
    addChildWindow_ordered_shareKey<R = void, P0 = unknown, P1 = number, P2 = boolean>(_addChildWindow: P0, _ordered: P1, _shareKey: P2): R;
    _rebuildOrderingGroup<R = void, P0 = boolean>(__rebuildOrderingGroup: P0): R;
    addChildWindow_ordered<R = void, P0 = unknown, P1 = number>(_addChildWindow: P0, _ordered: P1): R;
    _childWindowOrderingPriority<R = number>(): R;
    _willRemoveChildWindow<R = void, P0 = unknown>(__willRemoveChildWindow: P0): R;
    _updateFirstResponderForIgnoredChildWindow<R = void, P0 = unknown>(__updateFirstResponderForIgnoredChildWindow: P0): R;
    _didRemoveChildWindow<R = void, P0 = unknown>(__didRemoveChildWindow: P0): R;
    _didAddChildWindow<R = void, P0 = unknown>(__didAddChildWindow: P0): R;
    _unhideChildren<R = void>(): R;
    _hideChildren<R = void>(): R;
    _addToGroups_ordered<R = void, P0 = unknown, P1 = number>(__addToGroups: P0, _ordered: P1): R;
    _removeFromGroups<R = void, P0 = unknown>(__removeFromGroups: P0): R;
    _updateMovementGroup<R = void>(): R;
    _checkForImplicitRemovalFromMovementGroupWhenMovingToFrame<R = void, P0 = cocoa.CGRect>(__checkForImplicitRemovalFromMovementGroupWhenMovingToFrame: P0): R;
    _allowsImplicitRemovalFromMovementGroup<R = boolean>(): R;
    _parentWindowForAddingToMovementGroupWithProposedParent<R = unknown, P0 = unknown>(__parentWindowForAddingToMovementGroupWithProposedParent: P0): R;
    _maskRoundedBottomCorners<R = void, P0 = cocoa.CGRect>(__maskRoundedBottomCorners: P0): R;
    _intersectBottomCornersWithRect<R = cocoa.CGRect, P0 = cocoa.CGRect>(__intersectBottomCornersWithRect: P0): R;
    bottomCornerRounded<R = boolean>(): R;
    setBottomCornerRounded<R = void, P0 = boolean>(_setBottomCornerRounded: P0): R;
    _endFauxModalSession<R = void>(): R;
    _beginFauxModalSession<R = void>(): R;
    _endWindowBlockingModalSessionForShownService<R = void, P0 = unknown>(__endWindowBlockingModalSessionForShownService: P0): R;
    _beginWindowBlockingModalSessionForShownService<R = void, P0 = unknown>(__beginWindowBlockingModalSessionForShownService: P0): R;
    _showingModalSheet<R = boolean>(): R;
    _endWindowBlockingModalSession_returnCode<R = void, P0 = cocoa._NSModalSession, P1 = number>(__endWindowBlockingModalSession: P0, _returnCode: P1): R;
    _hasQueuedSheets<R = boolean>(): R;
    _beginNextQueuedSheetIfNecessary<R = boolean>(): R;
    endSheet_returnCode<R = void, P0 = unknown, P1 = number>(_endSheet: P0, _returnCode: P1): R;
    endSheet<R = void, P0 = unknown>(_endSheet: P0): R;
    beginCriticalSheet_completionHandler<R = void, P0 = unknown, P1 = cocoa.CDUnknownBlockType>(_beginCriticalSheet: P0, _completionHandler: P1): R;
    beginSheet_completionHandler<R = void, P0 = unknown, P1 = cocoa.CDUnknownBlockType>(_beginSheet: P0, _completionHandler: P1): R;
    _beginSheet_completionHandler_isCritical<R = void, P0 = unknown, P1 = cocoa.CDUnknownBlockType, P2 = boolean>(__beginSheet: P0, _completionHandler: P1, _isCritical: P2): R;
    _beginWindowBlockingModalSessionForSheet_service_completionHandler_isCritical<R = void, P0 = unknown, P1 = unknown, P2 = cocoa.CDUnknownBlockType, P3 = boolean>(__beginWindowBlockingModalSessionForSheet: P0, _service: P1, _completionHandler: P2, _isCritical: P3): R;
    showsResizeIndicator<R = boolean>(): R;
    setShowsResizeIndicator<R = void, P0 = boolean>(_setShowsResizeIndicator: P0): R;
    _effectiveAlphaValue<R = number>(): R;
    autofillColor<R = unknown>(): R;
    setAutofillColor<R = void, P0 = unknown>(_setAutofillColor: P0): R;
    autofill<R = boolean>(): R;
    setAutofill<R = void, P0 = boolean>(_setAutofill: P0): R;
    graphicsContext<R = unknown>(): R;
    _windowDeviceRoundWithContext<R = void, P0 = unknown>(__windowDeviceRoundWithContext: P0): R;
    _windowDeviceRound<R = void>(): R;
    graphicsPort<R = void>(): R;
    _threadContext<R = unknown>(): R;
    _makingFirstResponderForMouseDown<R = boolean>(): R;
    _forwardActionToParent<R = boolean, P0 = string>(__forwardActionToParent: P0): R;
    _userInterfaceItemIsTemporarilyDisabled<R = boolean, P0 = unknown>(__userInterfaceItemIsTemporarilyDisabled: P0): R;
    _runningDocModalOrFauxModal<R = boolean>(): R;
    _takeApplicationMenuIfNeeded<R = void, P0 = unknown>(__takeApplicationMenuIfNeeded: P0): R;
    menu<R = unknown>(): R;
    setMenu<R = void, P0 = unknown>(_setMenu: P0): R;
    _isTerminating<R = boolean>(): R;
    _termWindowIfOwner<R = void>(): R;
    _termOneShotWindow<R = void>(): R;
    _doesOwnRealWindow<R = boolean>(): R;
    _setOwnsRealWindow<R = void, P0 = boolean>(__setOwnsRealWindow: P0): R;
    cascadeTopLeftFromPoint<R = cocoa.CGPoint, P0 = cocoa.CGPoint>(_cascadeTopLeftFromPoint: P0): R;
    _commonMinMaxSizeChanged<R = void>(): R;
    _adjustMinAndMaxSizeForSheet<R = void, P0 = boolean>(__adjustMinAndMaxSizeForSheet: P0): R;
    _confirmSize_force<R = boolean, P0 = cocoa.CGSize, P1 = boolean>(__confirmSize: P0, _force: P1): R;
    _validSize_forFullScreen_force<R = void, P0 = cocoa.CGSize, P1 = boolean, P2 = boolean>(__validSize: P0, _forFullScreen: P1, _force: P2): R;
    _validSize_force<R = void, P0 = cocoa.CGSize, P1 = boolean>(__validSize: P0, _force: P1): R;
    _overrideDefeatingConstrainFrameRect_toScreen<R = cocoa.CGRect, P0 = cocoa.CGRect, P1 = unknown>(__overrideDefeatingConstrainFrameRect: P0, _toScreen: P1): R;
    _defeatsOverrideOfFullScreenAvoidance<R = boolean>(): R;
    canMoveToCurrentSpaceOnScreen<R = boolean, P0 = unknown>(_canMoveToCurrentSpaceOnScreen: P0): R;
    constrainFrameRect_toScreen<R = cocoa.CGRect, P0 = cocoa.CGRect, P1 = unknown>(_constrainFrameRect: P0, _toScreen: P1): R;
    _enforceMenuBarAvoidanceForFrame_onScreen<R = cocoa.CGRect, P0 = cocoa.CGRect, P1 = unknown>(__enforceMenuBarAvoidanceForFrame: P0, _onScreen: P1): R;
    _enforceFullScreenRestrictionForFrame<R = cocoa.CGRect, P0 = cocoa.CGRect>(__enforceFullScreenRestrictionForFrame: P0): R;
    invalidateShadow<R = void>(): R;
    _bestScreenBySpaceAssignmentOrGeometry<R = unknown>(): R;
    _bestScreenByGeometry<R = unknown>(): R;
    _bestScreenBySpaceAssignment<R = unknown>(): R;
    _bestScreenByGeometryOfFrame_avoidingFullScreen<R = unknown, P0 = cocoa.CGRect, P1 = boolean>(__bestScreenByGeometryOfFrame: P0, _avoidingFullScreen: P1): R;
    _bestScreenByGeometryOfFrame_respectingSpaceAssignment<R = unknown, P0 = cocoa.CGRect, P1 = boolean>(__bestScreenByGeometryOfFrame: P0, _respectingSpaceAssignment: P1): R;
    canStoreColor<R = boolean>(): R;
    _setFrameSavedUsingTitle<R = void, P0 = boolean>(__setFrameSavedUsingTitle: P0): R;
    _copyPublicPersistentUIInfo<R = unknown>(): R;
    _restorableStateRepresentedURL<R = unknown>(): R;
    _copyTileSpaceName<R = unknown>(): R;
    _copyWorkspaceIdentifier<R = unknown>(): R;
    _enterFullScreenModeOnTileSpaceWithName_takeOwnership<R = boolean, P0 = unknown, P1 = boolean>(__enterFullScreenModeOnTileSpaceWithName: P0, _takeOwnership: P1): R;
    _enterFullScreenModeOnTileSpaceWithName<R = boolean, P0 = unknown>(__enterFullScreenModeOnTileSpaceWithName: P0): R;
    _persistFrame<R = void>(): R;
    _toggleFrameAutosaveEnabled<R = unknown, P0 = unknown>(__toggleFrameAutosaveEnabled: P0): R;
    setFrameAutosaveName<R = boolean, P0 = unknown>(_setFrameAutosaveName: P0): R;
    _setFrameAutosaveName_changeFrame<R = boolean, P0 = unknown, P1 = boolean>(__setFrameAutosaveName: P0, _changeFrame: P1): R;
    setFrameUsingName_force<R = boolean, P0 = unknown, P1 = boolean>(_setFrameUsingName: P0, _force: P1): R;
    setFrameUsingName<R = boolean, P0 = unknown>(_setFrameUsingName: P0): R;
    setFrameFromString<R = void, P0 = unknown>(_setFrameFromString: P0): R;
    _setFrameUsingName_domain<R = boolean, P0 = unknown, P1 = unknown>(__setFrameUsingName: P0, _domain: P1): R;
    _setFrameUsingName_domain_force<R = boolean, P0 = unknown, P1 = unknown, P2 = boolean>(__setFrameUsingName: P0, _domain: P1, _force: P2): R;
    _setFrameFromString_overrideTopLeft_preferActiveDisplay_constrainFullFrame_force<R = boolean, P0 = unknown, P1 = cocoa.CGPoint, P2 = boolean, P3 = boolean, P4 = boolean>(__setFrameFromString: P0, _overrideTopLeft: P1, _preferActiveDisplay: P2, _constrainFullFrame: P3, _force: P4): R;
    _convertAdjustedFrameFromDefaults<R = cocoa.CGRect, P0 = cocoa.CGRect>(__convertAdjustedFrameFromDefaults: P0): R;
    _adjustedFrameForSaving<R = cocoa.CGRect, P0 = cocoa.CGRect>(__adjustedFrameForSaving: P0): R;
    _adjustedFrameFromDefaults<R = cocoa.CGRect, P0 = cocoa.CGRect>(__adjustedFrameFromDefaults: P0): R;
    saveFrameUsingName<R = void, P0 = unknown>(_saveFrameUsingName: P0): R;
    _saveFrameUsingName_domain<R = void, P0 = unknown, P1 = unknown>(__saveFrameUsingName: P0, _domain: P1): R;
    _stringWithSavedFrame<R = unknown>(): R;
    _stringWithSavedFrameAdjustingForToolbar<R = unknown, P0 = boolean>(__stringWithSavedFrameAdjustingForToolbar: P0): R;
    _stringWithFrame_onScreen_adjustingForToolbar<R = unknown, P0 = cocoa.CGRect, P1 = unknown, P2 = boolean>(__stringWithFrame: P0, _onScreen: P1, _adjustingForToolbar: P2): R;
    discardCachedImage<R = void>(): R;
    restoreCachedImage<R = void>(): R;
    cacheImageInRect<R = void, P0 = cocoa.CGRect>(_cacheImageInRect: P0): R;
    _shouldShowResizeCursor<R = boolean>(): R;
    _synchronizeOverrideForActiveGestureRecognizers<R = void>(): R;
    _invalidateAllRevealoversForView<R = void, P0 = unknown>(__invalidateAllRevealoversForView: P0): R;
    _isToolTipCreationAndDisplayEnabled<R = boolean>(): R;
    _enableToolTipCreationAndDisplay<R = void>(): R;
    _disableToolTipCreationAndDisplay<R = void>(): R;
    _endLiveResize<R = void>(): R;
    _startLiveResize<R = void>(): R;
    _shouldSyncSurfaceToView<R = boolean>(): R;
    _inLiveResize<R = boolean>(): R;
    _showToolTip<R = boolean>(): R;
    print<R = void, P0 = unknown>(_print: P0): R;
    dataWithPDFInsideRect<R = unknown, P0 = cocoa.CGRect>(_dataWithPDFInsideRect: P0): R;
    dataWithEPSInsideRect<R = unknown, P0 = cocoa.CGRect>(_dataWithEPSInsideRect: P0): R;
    _changeKeyAndMainLimitedOK<R = void, P0 = boolean>(__changeKeyAndMainLimitedOK: P0): R;
    _changeJustMain<R = void>(): R;
    _preventsActivation<R = boolean>(): R;
    _setPreventsActivation<R = void, P0 = boolean>(__setPreventsActivation: P0): R;
    _avoidsActivation<R = boolean>(): R;
    _setAvoidsActivation<R = void, P0 = boolean>(__setAvoidsActivation: P0): R;
    _validateCollectionBehavior<R = number, P0 = number>(__validateCollectionBehavior: P0): R;
    _cgsWindowSaysSupportsTiling<R = boolean>(): R;
    _updateCollectionBehavior<R = void>(): R;
    _cacheAndSetPropertiesForCollectionBehavior<R = void, P0 = number>(__cacheAndSetPropertiesForCollectionBehavior: P0): R;
    _effectiveCollectionBehavior<R = number>(): R;
    _defaultCollectionBehavior<R = number>(): R;
    _wasModalAtSometime<R = boolean>(): R;
    _isTitledWindow<R = boolean>(): R;
    _isActiveAndOnScreen<R = boolean, P0 = unknown>(__isActiveAndOnScreen: P0): R;
    _isOnActiveScreen<R = boolean>(): R;
    isOneShot<R = boolean>(): R;
    setOneShot<R = void, P0 = boolean>(_setOneShot: P0): R;
    gState<R = number>(): R;
    _batchZoom<R = unknown>(): R;
    _copyMinimizeDictionary<R = unknown>(): R;
    _batchClose<R = unknown>(): R;
    performZoom<R = void, P0 = unknown>(_performZoom: P0): R;
    performMiniaturize<R = void, P0 = unknown>(_performMiniaturize: P0): R;
    performClose<R = void, P0 = unknown>(_performClose: P0): R;
    _close<R = void, P0 = unknown>(__close: P0): R;
    __close<R = void>(): R;
    convertScreenToBase<R = cocoa.CGPoint, P0 = cocoa.CGPoint>(_convertScreenToBase: P0): R;
    convertBaseToScreen<R = cocoa.CGPoint, P0 = cocoa.CGPoint>(_convertBaseToScreen: P0): R;
    backingAlignedRect_options<R = cocoa.CGRect, P0 = cocoa.CGRect, P1 = number>(_backingAlignedRect: P0, _options: P1): R;
    _convertRectFromIntegralizationSpace<R = cocoa.CGRect, P0 = cocoa.CGRect>(__convertRectFromIntegralizationSpace: P0): R;
    _convertRectToIntegralizationSpace<R = cocoa.CGRect, P0 = cocoa.CGRect>(__convertRectToIntegralizationSpace: P0): R;
    _nsib_setUsesPointIntegralizationForLayout<R = void, P0 = boolean>(__nsib_setUsesPointIntegralizationForLayout: P0): R;
    _nsib_usesPointIntegralizationForLayout<R = boolean>(): R;
    convertPointFromBacking<R = cocoa.CGPoint, P0 = cocoa.CGPoint>(_convertPointFromBacking: P0): R;
    convertPointToBacking<R = cocoa.CGPoint, P0 = cocoa.CGPoint>(_convertPointToBacking: P0): R;
    convertRectFromBacking<R = cocoa.CGRect, P0 = cocoa.CGRect>(_convertRectFromBacking: P0): R;
    convertRectToBacking<R = cocoa.CGRect, P0 = cocoa.CGRect>(_convertRectToBacking: P0): R;
    convertPointFromScreen<R = cocoa.CGPoint, P0 = cocoa.CGPoint>(_convertPointFromScreen: P0): R;
    convertPointToScreen<R = cocoa.CGPoint, P0 = cocoa.CGPoint>(_convertPointToScreen: P0): R;
    convertRectFromScreen<R = cocoa.CGRect, P0 = cocoa.CGRect>(_convertRectFromScreen: P0): R;
    convertRectToScreen<R = cocoa.CGRect, P0 = cocoa.CGRect>(_convertRectToScreen: P0): R;
    _visibleAndCanBecomeKeyLimitedOK<R = boolean, P0 = boolean>(__visibleAndCanBecomeKeyLimitedOK: P0): R;
    _visibleAndCanBecomeKey<R = boolean>(): R;
    _miniaturizedOrCanBecomeMain<R = boolean>(): R;
    _dismissModalForTerminate<R = void>(): R;
    _blocksKeyAndMainWindowTouchBarsWhenModal<R = boolean>(): R;
    _blocksActionWhenModal<R = boolean, P0 = string>(__blocksActionWhenModal: P0): R;
    _worksWhenModalOrChildOfModalWindow<R = boolean>(): R;
    _isChildOfWindow<R = boolean, P0 = unknown>(__isChildOfWindow: P0): R;
    _isChildOfWindowWithWindowNumber<R = boolean, P0 = number>(__isChildOfWindowWithWindowNumber: P0): R;
    isRestorable<R = boolean>(): R;
    _windowCanBeRestored<R = boolean>(): R;
    setRestorable<R = void, P0 = boolean>(_setRestorable: P0): R;
    _canBecomeMainWindowRegardlessOfVisibility<R = boolean>(): R;
    _hostWindowIsKey<R = boolean>(): R;
    _isKeyWindow<R = boolean>(): R;
    _isEffectivelyVisible<R = boolean>(): R;
    _setVisible<R = void, P0 = boolean>(__setVisible: P0): R;
    _setDocumentEdited<R = void, P0 = boolean>(__setDocumentEdited: P0): R;
    _setWantsHideOnDeactivate<R = void, P0 = boolean>(__setWantsHideOnDeactivate: P0): R;
    _wantsHideOnDeactivate<R = boolean>(): R;
    _tempHide_relWin<R = unknown, P0 = boolean, P1 = number>(__tempHide: P0, _relWin: P1): R;
    _setTempHidden<R = void, P0 = boolean>(__setTempHidden: P0): R;
    _isHidden<R = boolean>(): R;
    _setKeepChildrenAttached<R = void, P0 = boolean>(__setKeepChildrenAttached: P0): R;
    _keepChildrenAttached<R = boolean>(): R;
    _hideAttachedWindows_findKey<R = void, P0 = boolean, P1 = boolean>(__hideAttachedWindows: P0, _findKey: P1): R;
    _tempUnhideHODWindow<R = unknown>(): R;
    _tempHideHODWindow<R = unknown>(): R;
    _setCanCycle<R = void, P0 = boolean>(__setCanCycle: P0): R;
    _restoreModalWindowLevel<R = unknown>(): R;
    _setModalWindowLevel<R = void>(): R;
    _restoreLevelAfterRunningModal<R = void>(): R;
    _clearModalWindowLevel<R = unknown>(): R;
    _setModal<R = void, P0 = boolean>(__setModal: P0): R;
    _unlockSublevel<R = void>(): R;
    _lockToAbsoluteSubLevel<R = void, P0 = number>(__lockToAbsoluteSubLevel: P0): R;
    _applyWindowLevelWithTagUpdateNeeded<R = void, P0 = boolean>(__applyWindowLevelWithTagUpdateNeeded: P0): R;
    _effectiveLevel<R = number>(): R;
    _attemptToModifyAlwaysOnTopWithEvent<R = boolean, P0 = unknown>(__attemptToModifyAlwaysOnTopWithEvent: P0): R;
    _alwaysOnTop<R = boolean>(): R;
    _setAlwaysOnTop<R = void, P0 = boolean>(__setAlwaysOnTop: P0): R;
    _childLevel<R = number, P0 = number>(__childLevel: P0): R;
    _destroyRealWindowIfNotVisible<R = unknown, P0 = unknown>(__destroyRealWindowIfNotVisible: P0): R;
    _destroyRealWindow<R = unknown, P0 = boolean>(__destroyRealWindow: P0): R;
    _setWantsToDestroyRealWindow<R = void, P0 = boolean>(__setWantsToDestroyRealWindow: P0): R;
    _wantsToDestroyRealWindow<R = boolean>(): R;
    _doOrderWindowWithoutAnimation_relativeTo_findKey_forCounter_force_isModal<R = void, P0 = number, P1 = number, P2 = boolean, P3 = boolean, P4 = boolean, P5 = boolean>(__doOrderWindowWithoutAnimation: P0, _relativeTo: P1, _findKey: P2, _forCounter: P3, _force: P4, _isModal: P5): R;
    _doOrderWindow_relativeTo_findKey_forCounter_force_isModal<R = void, P0 = number, P1 = number, P2 = boolean, P3 = boolean, P4 = boolean, P5 = boolean>(__doOrderWindow: P0, _relativeTo: P1, _findKey: P2, _forCounter: P3, _force: P4, _isModal: P5): R;
    _reallyIsVisible<R = boolean>(): R;
    _removeFromParentIfPossible<R = void>(): R;
    _shouldRemoveFromParentIfPossible<R = boolean>(): R;
    _windowTransformAnimationForOrdering_animationType_interruptingAnimation<R = unknown, P0 = number, P1 = number, P2 = unknown>(__windowTransformAnimationForOrdering: P0, _animationType: P1, _interruptingAnimation: P2): R;
    _setTransformDidCompleteHandler<R = void, P0 = cocoa.CDUnknownBlockType>(__setTransformDidCompleteHandler: P0): R;
    _windowTransformAnimationDidEnd<R = void, P0 = unknown>(__windowTransformAnimationDidEnd: P0): R;
    _windowTransformAnimationWillBegin<R = void, P0 = unknown>(__windowTransformAnimationWillBegin: P0): R;
    _setRunningWindowTransformAnimation<R = void, P0 = unknown>(__setRunningWindowTransformAnimation: P0): R;
    _runningWindowTransformAnimation<R = unknown>(): R;
    _reallyDoOrderWindow_relativeTo_findKey_forCounter_force_isModal<R = void, P0 = number, P1 = number, P2 = boolean, P3 = boolean, P4 = boolean, P5 = boolean>(__reallyDoOrderWindow: P0, _relativeTo: P1, _findKey: P2, _forCounter: P3, _force: P4, _isModal: P5): R;
    _reallyDoOrderWindowOutRelativeTo_findKey_forCounter_force_isModal<R = void, P0 = number, P1 = boolean, P2 = boolean, P3 = boolean, P4 = boolean>(__reallyDoOrderWindowOutRelativeTo: P0, _findKey: P1, _forCounter: P2, _force: P3, _isModal: P4): R;
    _setPreferredNextWindowToSelect<R = void, P0 = unknown>(__setPreferredNextWindowToSelect: P0): R;
    _preferredNextWindowToSelect<R = unknown>(): R;
    _reallyDoOrderWindowAboveOrBelow_relativeTo_findKey_forCounter_force_isModal<R = void, P0 = number, P1 = number, P2 = boolean, P3 = boolean, P4 = boolean, P5 = boolean>(__reallyDoOrderWindowAboveOrBelow: P0, _relativeTo: P1, _findKey: P2, _forCounter: P3, _force: P4, _isModal: P5): R;
    _orderPanelIfActiveWithOrderingMode_otherWin<R = void, P0 = number, P1 = number>(__orderPanelIfActiveWithOrderingMode: P0, _otherWin: P1): R;
    _shouldReallyOrderWindow<R = boolean>(): R;
    _doWindowOrderOutWithWithKeyCalc_forCounter_orderingDone_docWindow<R = void, P0 = boolean, P1 = boolean, P2 = boolean, P3 = unknown>(__doWindowOrderOutWithWithKeyCalc: P0, _forCounter: P1, _orderingDone: P2, _docWindow: P3): R;
    _unscheduleWindowForBatchOrdering<R = void>(): R;
    _scheduleWindowForBatchOrdering_relativeTo<R = void, P0 = number, P1 = number>(__scheduleWindowForBatchOrdering: P0, _relativeTo: P1): R;
    _orderOutWhenAppHiddenRelativeToWindow<R = void, P0 = unknown>(__orderOutWhenAppHiddenRelativeToWindow: P0): R;
    _doWindowWillBecomeHidden<R = void>(): R;
    _doWindowWillBeVisibleAsSheet<R = void, P0 = boolean>(__doWindowWillBeVisibleAsSheet: P0): R;
    _reallyNeedsWindowRef<R = boolean>(): R;
    _postWindowWillOrderOnScreenNotification<R = void>(): R;
    _postWillOrderOffScreenNotification<R = void>(): R;
    _setUpFirstResponderBeforeBecomingVisible<R = void>(): R;
    _setUpFirstResponder<R = void>(): R;
    _orderOutAndCalcKeyWithCounter<R = void, P0 = boolean>(__orderOutAndCalcKeyWithCounter: P0): R;
    _orderOutAndCalcKeyWithCounter_stillVisible_docWindow<R = void, P0 = boolean, P1 = boolean, P2 = unknown>(__orderOutAndCalcKeyWithCounter: P0, _stillVisible: P1, _docWindow: P2): R;
    _orderOutInProgress<R = boolean>(): R;
    _setOrderOutInProgress<R = void, P0 = boolean>(__setOrderOutInProgress: P0): R;
    _doOrderWindow_relativeTo_findKey_forCounter_force<R = void, P0 = number, P1 = number, P2 = boolean, P3 = boolean, P4 = boolean>(__doOrderWindow: P0, _relativeTo: P1, _findKey: P2, _forCounter: P3, _force: P4): R;
    _doOrderWindow_relativeTo_findKey<R = void, P0 = number, P1 = number, P2 = boolean>(__doOrderWindow: P0, _relativeTo: P1, _findKey: P2): R;
    _shouldParticipateInBatchOrdering<R = boolean, P0 = number>(__shouldParticipateInBatchOrdering: P0): R;
    orderWindow_relativeTo<R = void, P0 = number, P1 = number>(_orderWindow: P0, _relativeTo: P1): R;
    _justOrderOut<R = void>(): R;
    orderFrontRegardless<R = void>(): R;
    orderOut<R = void, P0 = unknown>(_orderOut: P0): R;
    orderBack<R = void, P0 = unknown>(_orderBack: P0): R;
    orderFront<R = void, P0 = unknown>(_orderFront: P0): R;
    _toggleOrderedFrontMost<R = void, P0 = unknown>(__toggleOrderedFrontMost: P0): R;
    _toggleOrderedFrontMostWillOrderOut<R = boolean>(): R;
    makeKeyAndOrderFront<R = void, P0 = unknown>(_makeKeyAndOrderFront: P0): R;
    _makeKeyRegardlessOfVisibility<R = void>(): R;
    becomesKeyOnlyIfNeeded<R = boolean>(): R;
    center<R = void>(): R;
    _adjustWindowResolution<R = void>(): R;
    _setCGColorSpace<R = number, P0 = cocoa.CGColorSpace>(__setCGColorSpace: P0): R;
    _backingStoreResolution<R = number>(): R;
    _setBackingStoreResolution<R = number, P0 = number>(__setBackingStoreResolution: P0): R;
    _adjustDynamicDepthLimit<R = void>(): R;
    _windowDepth<R = number>(): R;
    _setWindowDepth<R = void, P0 = number>(__setWindowDepth: P0): R;
    setDynamicDepthLimit<R = void, P0 = boolean>(_setDynamicDepthLimit: P0): R;
    _setModeDisablesServerSideDrag<R = void, P0 = boolean>(__setModeDisablesServerSideDrag: P0): R;
    _updateWindowCanServerSideDrag<R = void>(): R;
    _setMovableByBottomBar<R = void, P0 = boolean>(__setMovableByBottomBar: P0): R;
    _movableByBottomBar<R = boolean>(): R;
    showsContentSeparatorForEdge<R = boolean, P0 = number>(_showsContentSeparatorForEdge: P0): R;
    setShowsContentSeparator_forEdge<R = void, P0 = boolean, P1 = number>(_setShowsContentSeparator: P0, _forEdge: P1): R;
    autorecalculatesContentBorderThicknessForEdge<R = boolean, P0 = number>(_autorecalculatesContentBorderThicknessForEdge: P0): R;
    setAutorecalculatesContentBorderThickness_forEdge<R = void, P0 = boolean, P1 = number>(_setAutorecalculatesContentBorderThickness: P0, _forEdge: P1): R;
    contentBorderThicknessForEdge<R = number, P0 = number>(_contentBorderThicknessForEdge: P0): R;
    setContentBorderThickness_forEdge<R = void, P0 = number, P1 = number>(_setContentBorderThickness: P0, _forEdge: P1): R;
    contentInsetColor<R = unknown>(): R;
    contentSeparatorColor<R = unknown>(): R;
    _hasBackgroundColor<R = boolean>(): R;
    _compositedBackground<R = unknown>(): R;
    _generateCompositedBackground<R = unknown>(): R;
    _themeBackgroundStyle<R = number>(): R;
    _invalidateCompositedBackground<R = void>(): R;
    _scaledBackground<R = unknown>(): R;
    _invalidateScaledBackground<R = void>(): R;
    _generateScaledBackground<R = unknown>(): R;
    _viewIsInContentBorder<R = boolean, P0 = unknown>(__viewIsInContentBorder: P0): R;
    _bottomBarHeight<R = number>(): R;
    _topBarHeight<R = number>(): R;
    _hasScaledBackground<R = boolean>(): R;
    _scalesBackgroundVertically<R = boolean>(): R;
    _scalesBackgroundHorizontally<R = boolean>(): R;
    _gradientImage<R = unknown>(): R;
    _texturePattern<R = unknown>(): R;
    _hasGradientBackground<R = boolean>(): R;
    zoom<R = void, P0 = unknown>(_zoom: P0): R;
    _saveUserFrame<R = void>(): R;
    _standardFrame<R = cocoa.CGRect>(): R;
    deminiaturize<R = void, P0 = unknown>(_deminiaturize: P0): R;
    miniaturize<R = void, P0 = unknown>(_miniaturize: P0): R;
    _miniturizeFromFullScreen<R = void>(): R;
    _canMiniaturize<R = boolean>(): R;
    _canMiniaturizeCheckingMask_forButtonEnabledState<R = boolean, P0 = boolean, P1 = boolean>(__canMiniaturizeCheckingMask: P0, _forButtonEnabledState: P1): R;
    _hasSiblingSpaceWhenFullScreenPrefersModal<R = boolean>(): R;
    _setMiniaturized<R = void, P0 = boolean>(__setMiniaturized: P0): R;
    _closeForTermination<R = void>(): R;
    _shouldCloseForTermination<R = boolean>(): R;
    close<R = void>(): R;
    _finishClosingWindow<R = void>(): R;
    quickLookPreviewItems<R = void, P0 = unknown>(_quickLookPreviewItems: P0): R;
    _performKeyEquivalentConditionally<R = boolean, P0 = unknown>(__performKeyEquivalentConditionally: P0): R;
    _commonPerformKeyEquivalent_conditionally<R = boolean, P0 = unknown, P1 = boolean>(__commonPerformKeyEquivalent: P0, _conditionally: P1): R;
    _getRetainedLastFocusRingView_bleedRegion<R = void, P0 = unknown, P1 = unknown>(__getRetainedLastFocusRingView: P0, _bleedRegion: P1): R;
    _setLastFocusRingView_bleedRegion<R = void, P0 = unknown, P1 = unknown>(__setLastFocusRingView: P0, _bleedRegion: P1): R;
    _dirtyRegion<R = unknown>(): R;
    _subtractFromNeedsDisplayRegion<R = void, P0 = unknown>(__subtractFromNeedsDisplayRegion: P0): R;
    _copyNeedsDisplayRegionInRect_validateSubtractedRegion<R = unknown, P0 = cocoa.CGRect, P1 = boolean>(__copyNeedsDisplayRegionInRect: P0, _validateSubtractedRegion: P1): R;
    _adjustNeedsDisplayRegionForNewFrame<R = void, P0 = cocoa.CGRect>(__adjustNeedsDisplayRegionForNewFrame: P0): R;
    _setNeedsDisplayInRegion<R = void, P0 = unknown>(__setNeedsDisplayInRegion: P0): R;
    _setNeedsDisplayInRect<R = void, P0 = cocoa.CGRect>(__setNeedsDisplayInRect: P0): R;
    _needsDisplayForEntireRect<R = boolean, P0 = cocoa.CGRect>(__needsDisplayForEntireRect: P0): R;
    _needsDisplayInRect<R = boolean, P0 = cocoa.CGRect>(__needsDisplayInRect: P0): R;
    _absorbDeferredNeedsDisplayRegion<R = void>(): R;
    _setFrameNeedsDisplay<R = void, P0 = boolean>(__setFrameNeedsDisplay: P0): R;
    _sendForcedWindowChangedKeyState<R = void>(): R;
    _sendWindowChangedKeyStateIfNeeded<R = void>(): R;
    _shake<R = void>(): R;
    _wantsSnapshotProxyWindowForOrderOutAnimation<R = boolean>(): R;
    _effectiveOrderOutAnimationTypeIfModal<R = number, P0 = boolean>(__effectiveOrderOutAnimationTypeIfModal: P0): R;
    _setOrderOutAnimationType<R = void, P0 = number>(__setOrderOutAnimationType: P0): R;
    _orderOutAnimationType<R = number>(): R;
    _effectiveOrderFrontAnimationTypeIfModal<R = number, P0 = boolean>(__effectiveOrderFrontAnimationTypeIfModal: P0): R;
    _setOrderFrontAnimationType<R = void, P0 = number>(__setOrderFrontAnimationType: P0): R;
    _orderFrontAnimationType<R = number>(): R;
    _effectiveAnimationBehaviorIfModal<R = number, P0 = boolean>(__effectiveAnimationBehaviorIfModal: P0): R;
    _setTransformForAnimation_anchorPoint<R = void, P0 = cocoa.CGAffineTransform, P1 = cocoa.CGPoint>(__setTransformForAnimation: P0, _anchorPoint: P1): R;
    _enumerateAnimatedGlobalWindowsUsingBlock<R = void, P0 = cocoa.CDUnknownBlockType>(__enumerateAnimatedGlobalWindowsUsingBlock: P0): R;
    _removeGlobalWindowFromAnimationsWithWindowNumber<R = void, P0 = number>(__removeGlobalWindowFromAnimationsWithWindowNumber: P0): R;
    _addGlobalWindowToAnimationsWithWindowNumber<R = void, P0 = number>(__addGlobalWindowToAnimationsWithWindowNumber: P0): R;
    _moveOnscreen<R = void>(): R;
    _moveOffscreen<R = unknown>(): R;
    resignMainWindow<R = void>(): R;
    becomeMainWindow<R = void>(): R;
    _allowsActiveInputContext<R = boolean>(): R;
    _allowsActiveInputContextDuringMenuTracking<R = boolean>(): R;
    _isKeyWindowIgnoringFocus<R = boolean>(): R;
    _isResigningKeyFocusOnly<R = boolean>(): R;
    _resignKeyFocus<R = void>(): R;
    _handleResignMainAppearanceEvent<R = void>(): R;
    _handleResignKeyAppearanceEvent<R = void>(): R;
    resignKeyWindow<R = void>(): R;
    becomeKeyWindow<R = void>(): R;
    makeMainWindow<R = void>(): R;
    makeKeyWindow<R = void>(): R;
    _wouldBeSufficientlyUnclippedOnSpace<R = boolean, P0 = number>(__wouldBeSufficientlyUnclippedOnSpace: P0): R;
    _isInSomeVisibleSpace<R = boolean>(): R;
    _hideMenu<R = void, P0 = unknown>(__hideMenu: P0): R;
    toggleFullScreen<R = void, P0 = unknown>(_toggleFullScreen: P0): R;
    _updateWindowDockFeedbackAtRectEdges<R = void, P0 = number>(__updateWindowDockFeedbackAtRectEdges: P0): R;
    _scheduleShowingDockWindowFeedback<R = void>(): R;
    _cancelShowingDockWindowFeedback<R = void>(): R;
    _startShowingWindowDockingFeedback<R = void>(): R;
    _makeSnappingInfo<R = void>(): R;
    _internalHandleWindowMovedWithEvent<R = void, P0 = unknown>(__internalHandleWindowMovedWithEvent: P0): R;
    _internalHandleAppKitDefinedEvent<R = boolean, P0 = unknown>(__internalHandleAppKitDefinedEvent: P0): R;
    _doClientSideDraggingWithEvent<R = void, P0 = unknown>(__doClientSideDraggingWithEvent: P0): R;
    _frameFromMoveData<R = cocoa.CGRect, P0 = unknown>(__frameFromMoveData: P0): R;
    _shouldDoClientSideDragging<R = boolean>(): R;
    _attemptSnapFrameWithMoveData_event<R = void, P0 = unknown, P1 = unknown>(__attemptSnapFrameWithMoveData: P0, _event: P1): R;
    _makeCatchupAnimationWithMoveData_catchupSize<R = void, P0 = unknown, P1 = cocoa.CGSize>(__makeCatchupAnimationWithMoveData: P0, _catchupSize: P1): R;
    _setUnsnapCatchupAnimation<R = void, P0 = unknown>(__setUnsnapCatchupAnimation: P0): R;
    _unsnapCatchupAnimation<R = unknown>(): R;
    _shouldSnapForEvent<R = boolean, P0 = unknown>(__shouldSnapForEvent: P0): R;
    _sendWindowWillMoveNoteWithEvent<R = void, P0 = unknown>(__sendWindowWillMoveNoteWithEvent: P0): R;
    _sendWindowWillStartDragging<R = void>(): R;
    _sendWindowDidEndDragging<R = void>(): R;
    _endWindowMoveWithEvent<R = void, P0 = unknown>(__endWindowMoveWithEvent: P0): R;
    _startWindowMoveWithEvent<R = void, P0 = unknown>(__startWindowMoveWithEvent: P0): R;
    _windowIsBeingMoved<R = boolean>(): R;
    _addWindowDockingEventMonitorIfNeeded<R = void>(): R;
    _removeWindowDockingEventMonitor<R = void>(): R;
    _setWindowDockingEventMonitor<R = void, P0 = unknown>(__setWindowDockingEventMonitor: P0): R;
    _windowDockingEventMonitor<R = unknown>(): R;
    _setRectEdgesForDocking<R = void, P0 = number>(__setRectEdgesForDocking: P0): R;
    _rectEdgesForDocking<R = number>(): R;
    _showDockFeedbackWindowAtRectEdges<R = void, P0 = number>(__showDockFeedbackWindowAtRectEdges: P0): R;
    _makeGhostFeedbackWindowWithFrame<R = unknown, P0 = cocoa.CGRect>(__makeGhostFeedbackWindowWithFrame: P0): R;
    _makeGhostContentViewWithFrame<R = unknown, P0 = cocoa.CGRect>(__makeGhostContentViewWithFrame: P0): R;
    _hideDockFeedbackWindow<R = void>(): R;
    _setWindowDockFeedbackWindow<R = void, P0 = unknown>(__setWindowDockFeedbackWindow: P0): R;
    _windowDockFeedbackWindow<R = unknown>(): R;
    _attemptToUndockWindowWithEvent<R = void, P0 = unknown>(__attemptToUndockWindowWithEvent: P0): R;
    _attemptToDockWindowOnRectEdges<R = void, P0 = number>(__attemptToDockWindowOnRectEdges: P0): R;
    _attemptToDockWindow<R = void>(): R;
    _attemptToShowDockWindowFeedbackWithEvent<R = void, P0 = unknown>(__attemptToShowDockWindowFeedbackWithEvent: P0): R;
    _windowDockRectEdgesFromPoint<R = number, P0 = cocoa.CGPoint>(__windowDockRectEdgesFromPoint: P0): R;
    _windowMoved<R = void, P0 = unknown>(__windowMoved: P0): R;
    _doDockingForWindowMovementWithEvent<R = void, P0 = unknown>(__doDockingForWindowMovementWithEvent: P0): R;
    _shouldSnapWindowsClientSide<R = boolean>(): R;
    _shouldDockWindow<R = boolean>(): R;
    _getPositionFromServer<R = unknown>(): R;
    _updateFrameToScreenConstraints<R = void>(): R;
    _displayProfileChanged<R = void>(): R;
    _updateInheritedColorSpaceAndDisplayIfChanged<R = boolean, P0 = boolean>(__updateInheritedColorSpaceAndDisplayIfChanged: P0): R;
    _displayResolutionChanged<R = void>(): R;
    _updateInheritedBackingScaleFactorAndDisplayIfChanged<R = boolean, P0 = boolean>(__updateInheritedBackingScaleFactorAndDisplayIfChanged: P0): R;
    _displayChangedWithoutAdjusting<R = unknown>(): R;
    _displayChanged<R = unknown>(): R;
    _displayChangedSoAdjustWindows<R = unknown, P0 = boolean>(__displayChangedSoAdjustWindows: P0): R;
    _displayChangedDepth<R = void>(): R;
    _savedScreen<R = unknown>(): R;
    _updateSavedScreen<R = void>(): R;
    _adjustWindowToScreen<R = void>(): R;
    _positionWindowOnBestScreen<R = void>(): R;
    _bestFrameForScreenBasedOnFrame<R = cocoa.CGRect, P0 = cocoa.CGRect>(__bestFrameForScreenBasedOnFrame: P0): R;
    _autoPositionMask<R = number>(): R;
    _setAutoPositionMask<R = void, P0 = number>(__setAutoPositionMask: P0): R;
    _windowMovedToRect<R = void, P0 = cocoa.CGRect>(__windowMovedToRect: P0): R;
    _setFrameAfterMove<R = void, P0 = cocoa.CGRect>(__setFrameAfterMove: P0): R;
    _setFrameOriginForDockMove<R = void, P0 = cocoa.CGPoint>(__setFrameOriginForDockMove: P0): R;
    _moveChildrenByOffset<R = void, P0 = cocoa.CGSize>(__moveChildrenByOffset: P0): R;
    _moveByOffset<R = void, P0 = cocoa.CGSize>(__moveByOffset: P0): R;
    _screenChanged<R = void, P0 = unknown>(__screenChanged: P0): R;
    setMouseConfinementRect<R = void, P0 = cocoa.CGRect>(_setMouseConfinementRect: P0): R;
    mouseConfinementRect<R = cocoa.CGRect>(): R;
    _setNeedsZoom<R = void, P0 = unknown>(__setNeedsZoom: P0): R;
    _windowExposed<R = void, P0 = unknown>(__windowExposed: P0): R;
    _handleWindowShouldCloseEvent<R = void, P0 = unknown>(__handleWindowShouldCloseEvent: P0): R;
    _isRunningADocModalAttachedSheet<R = boolean>(): R;
    _tryWindowDragWithEvent<R = boolean, P0 = unknown>(__tryWindowDragWithEvent: P0): R;
    _startWindowDragWithEvent_options_animate_completionHandler<R = void, P0 = unknown, P1 = number, P2 = boolean, P3 = cocoa.CDUnknownBlockType>(__startWindowDragWithEvent: P0, _options: P1, _animate: P2, _completionHandler: P3): R;
    _startWindowDragWithEvent_options_animate<R = void, P0 = unknown, P1 = number, P2 = boolean>(__startWindowDragWithEvent: P0, _options: P1, _animate: P2): R;
    _startWindowDragWithEvent_animate<R = void, P0 = unknown, P1 = boolean>(__startWindowDragWithEvent: P0, _animate: P1): R;
    _showDragBeginFeedback<R = void>(): R;
    _orderForwardWithEvent<R = void, P0 = unknown>(__orderForwardWithEvent: P0): R;
    _allowsMoving<R = boolean>(): R;
    _deferQuickLookIfPossible<R = boolean>(): R;
    _setDisableInteraction<R = void, P0 = boolean>(__setDisableInteraction: P0): R;
    _dragWindowRelativeToMouseDown<R = void, P0 = cocoa.CGPoint>(__dragWindowRelativeToMouseDown: P0): R;
    _shouldStartWindowDragForEvent<R = boolean, P0 = unknown>(__shouldStartWindowDragForEvent: P0): R;
    _beginWindowDragWithEvent_options_completionHandler<R = void, P0 = unknown, P1 = number, P2 = cocoa.CDUnknownBlockType>(__beginWindowDragWithEvent: P0, _options: P1, _completionHandler: P2): R;
    _beginWindowDragWithEvent_options<R = void, P0 = unknown, P1 = number>(__beginWindowDragWithEvent: P0, _options: P1): R;
    performWindowDragWithEvent<R = void, P0 = unknown>(_performWindowDragWithEvent: P0): R;
    _dragWindowRelativeToMouseDown_options<R = void, P0 = cocoa.CGPoint, P1 = number>(__dragWindowRelativeToMouseDown: P0, _options: P1): R;
    _resizeWeighting<R = number>(): R;
    _setResizeWeighting<R = void, P0 = number>(__setResizeWeighting: P0): R;
    _updateButtonsForFullScreen<R = void>(): R;
    showsFullScreenButton<R = boolean>(): R;
    lockButtonClicked<R = void, P0 = unknown>(_lockButtonClicked: P0): R;
    showsLockButton<R = boolean>(): R;
    setShowsLockButton<R = void, P0 = boolean>(_setShowsLockButton: P0): R;
    _toolbarFrameSizeChanged_oldSize<R = void, P0 = unknown, P1 = cocoa.CGSize>(__toolbarFrameSizeChanged: P0, _oldSize: P1): R;
    _hideToolbar_animate<R = void, P0 = unknown, P1 = boolean>(__hideToolbar: P0, _animate: P1): R;
    _showToolbar_animate<R = void, P0 = unknown, P1 = boolean>(__showToolbar: P0, _animate: P1): R;
    _windowForToolbar<R = unknown>(): R;
    _hasToolbar<R = boolean>(): R;
    _toolbarIsShown<R = boolean>(): R;
    _toolbarView<R = unknown>(): R;
    _toolbarPillButtonClicked<R = void, P0 = unknown>(__toolbarPillButtonClicked: P0): R;
    _toolbarButtonIsClickable<R = boolean>(): R;
    _setNextToolbarSizeMode<R = void, P0 = unknown>(__setNextToolbarSizeMode: P0): R;
    _setNextToolbarDisplayMode<R = void, P0 = unknown>(__setNextToolbarDisplayMode: P0): R;
    _setPreviousToolbarSizeAndDisplayMode<R = void, P0 = unknown>(__setPreviousToolbarSizeAndDisplayMode: P0): R;
    _setNextToolbarSizeAndDisplayMode<R = void, P0 = unknown>(__setNextToolbarSizeAndDisplayMode: P0): R;
    _toggleToolbarConfigPanel<R = void, P0 = unknown>(__toggleToolbarConfigPanel: P0): R;
    toggleUsingSmallToolbarIcons<R = void, P0 = unknown>(_toggleUsingSmallToolbarIcons: P0): R;
    changeToolBarDisplayModeToDisplayMode<R = void, P0 = number>(_changeToolBarDisplayModeToDisplayMode: P0): R;
    changeToolbarDisplayModeToNumber<R = void, P0 = unknown>(_changeToolbarDisplayModeToNumber: P0): R;
    changeToolbarDisplayMode<R = void, P0 = unknown>(_changeToolbarDisplayMode: P0): R;
    runToolbarCustomizationPalette<R = void, P0 = unknown>(_runToolbarCustomizationPalette: P0): R;
    runToolbarConfigurationPalette<R = void, P0 = unknown>(_runToolbarConfigurationPalette: P0): R;
    toggleToolbarShown<R = void, P0 = unknown>(_toggleToolbarShown: P0): R;
    hideToolbar<R = void, P0 = unknown>(_hideToolbar: P0): R;
    showToolbar<R = void, P0 = unknown>(_showToolbar: P0): R;
    _performToggleToolbarShown<R = void, P0 = unknown>(__performToggleToolbarShown: P0): R;
    _setKeyViewRedirectionDisabled<R = void, P0 = boolean>(__setKeyViewRedirectionDisabled: P0): R;
    _keyViewRedirectionDisabled<R = boolean>(): R;
    _setKeyViewGroupBoundaryNeedsRecalc<R = void, P0 = boolean>(__setKeyViewGroupBoundaryNeedsRecalc: P0): R;
    _setKeyViewLoopNeedsRecalc<R = void, P0 = boolean>(__setKeyViewLoopNeedsRecalc: P0): R;
    _recalculateKeyViewLoopIfNeeded<R = void>(): R;
    recalculateKeyViewLoop<R = void>(): R;
    _shouldIncludeTitlebarAccessoryViewsInKeyViewLoop<R = boolean>(): R;
    _toggleSelectAnyValidResponderOverride<R = void>(): R;
    _allowsAnyValidResponder<R = boolean>(): R;
    _clearAnyValidResponderOverride<R = void>(): R;
    _selectAnyValidResponderOverride<R = boolean>(): R;
    _drawKeyboardUILoopStartingAtResponder_validOnly<R = void, P0 = unknown, P1 = boolean>(__drawKeyboardUILoopStartingAtResponder: P0, _validOnly: P1): R;
    _drawKeyboardUIIndicationForView_debuggingIndex<R = void, P0 = unknown, P1 = unknown>(__drawKeyboardUIIndicationForView: P0, _debuggingIndex: P1): R;
    enableKeyEquivalentForDefaultButtonCell<R = void>(): R;
    disableKeyEquivalentForDefaultButtonCell<R = void>(): R;
    _enableEnablingKeyEquivalentForDefaultButtonCell<R = void>(): R;
    _disableEnablingKeyEquivalentForDefaultButtonCell<R = void>(): R;
    _setDefaultButtonCell<R = void, P0 = unknown>(__setDefaultButtonCell: P0): R;
    _verifyDefaultButtonCell<R = void, P0 = boolean>(__verifyDefaultButtonCell: P0): R;
    _verifyDefaultButtonCellIfDirty<R = void>(): R;
    _markDefaultButtonCellDirty<R = void>(): R;
    setKeyView<R = void, P0 = unknown>(_setKeyView: P0): R;
    _setKeyViewSelectionDirection<R = void, P0 = number>(__setKeyViewSelectionDirection: P0): R;
    _selectFirstKeyView<R = void>(): R;
    _findFirstKeyViewInDirection_forKeyLoopGroupingView<R = unknown, P0 = number, P1 = unknown>(__findFirstKeyViewInDirection: P0, _forKeyLoopGroupingView: P1): R;
    _findKeyLoopGroupingViewFollowingKeyLoopGroupingView_direction<R = unknown, P0 = unknown, P1 = number>(__findKeyLoopGroupingViewFollowingKeyLoopGroupingView: P0, _direction: P1): R;
    selectPreviousKeyView<R = void, P0 = unknown>(_selectPreviousKeyView: P0): R;
    selectNextKeyView<R = void, P0 = unknown>(_selectNextKeyView: P0): R;
    selectKeyViewPrecedingView<R = void, P0 = unknown>(_selectKeyViewPrecedingView: P0): R;
    selectKeyViewFollowingView<R = void, P0 = unknown>(_selectKeyViewFollowingView: P0): R;
    _keyViewLoopsMayCrossWindows<R = boolean>(): R;
    _cycleDrawersBackwards<R = void, P0 = unknown>(__cycleDrawersBackwards: P0): R;
    _cycleDrawers<R = void, P0 = unknown>(__cycleDrawers: P0): R;
    _cycleWindowsBackwards<R = void, P0 = unknown>(__cycleWindowsBackwards: P0): R;
    _cycleWindows<R = void, P0 = unknown>(__cycleWindows: P0): R;
    _drawKeyboardUILoopIfNeededForEvent<R = void, P0 = unknown>(__drawKeyboardUILoopIfNeededForEvent: P0): R;
    _wasReshapingEnabled<R = boolean>(): R;
    _setWasReshapingEnabled<R = void, P0 = boolean>(__setWasReshapingEnabled: P0): R;
    _wasCGOrderingEnabled<R = boolean>(): R;
    _setWasCGOrderingEnabled<R = void, P0 = boolean>(__setWasCGOrderingEnabled: P0): R;
    _allowsOrdering<R = boolean>(): R;
    _setFirstResponder<R = void, P0 = unknown>(__setFirstResponder: P0): R;
    _validateFirstResponder<R = unknown, P0 = unknown>(__validateFirstResponder: P0): R;
    _oldFirstResponderBeforeBecoming<R = unknown>(): R;
    _newFirstResponderAfterResigning<R = unknown>(): R;
    makeFirstResponder<R = boolean, P0 = unknown>(_makeFirstResponder: P0): R;
    _realMakeFirstResponder<R = boolean, P0 = unknown>(__realMakeFirstResponder: P0): R;
    _secondaryKeyMakeFirstResponder<R = boolean, P0 = unknown>(__secondaryKeyMakeFirstResponder: P0): R;
    _makeParentWindowHaveFirstResponder<R = boolean, P0 = unknown>(__makeParentWindowHaveFirstResponder: P0): R;
    _saveFirstResponder<R = void>(): R;
    _unlockFirstResponder<R = void>(): R;
    _lockFirstResponder<R = void>(): R;
    _borderView<R = unknown>(): R;
    update<R = void>(): R;
    isAutodisplay<R = boolean>(): R;
    setAutodisplay<R = void, P0 = boolean>(_setAutodisplay: P0): R;
    display<R = void>(): R;
    useOptimizedDrawing<R = void, P0 = boolean>(_useOptimizedDrawing: P0): R;
    _isImageCache<R = boolean>(): R;
    displayIfNeeded<R = void>(): R;
    _postingDisabled<R = boolean>(): R;
    _enablePosting<R = void>(): R;
    _disablePosting<R = void>(): R;
    _resetPostingCounts<R = void>(): R;
    _delayedWindowDisplayEnabled<R = boolean>(): R;
    _enableDelayedWindowDisplay<R = void>(): R;
    _disableDelayedWindowDisplay<R = void>(): R;
    _forceFlushWindowToScreen<R = void>(): R;
    disableScreenUpdatesUntilFlush<R = void>(): R;
    flushWindowIfNeeded<R = void>(): R;
    _animationShouldCallFlushWindow<R = boolean>(): R;
    _setShadowParameters<R = void>(): R;
    _setShadowActiveState<R = void>(): R;
    shadowParameters<R = unknown>(): R;
    shadowOptionsForActiveAppearance<R = number, P0 = boolean>(_shadowOptionsForActiveAppearance: P0): R;
    shadowOptions<R = number>(): R;
    flushWindow<R = void>(): R;
    _backdropBleedAmount<R = number>(): R;
    _flushBackdropViews<R = void>(): R;
    _updateBackdropViewsIfNeeded<R = void>(): R;
    _hasAtLeastOneBackdropView<R = boolean>(): R;
    _clearBackingStoreForBackdropViews<R = void>(): R;
    _unregisterBackdropView<R = void, P0 = unknown>(__unregisterBackdropView: P0): R;
    _registerBackdropView<R = void, P0 = unknown>(__registerBackdropView: P0): R;
    _setRegisteredBackdropViews<R = void, P0 = unknown>(__setRegisteredBackdropViews: P0): R;
    _registeredBackdropViews<R = unknown>(): R;
    isFlushWindowDisabled<R = boolean>(): R;
    enableFlushWindow<R = void>(): R;
    disableFlushWindow<R = void>(): R;
    _resetDisableCounts<R = void>(): R;
    _addKnownSubview<R = void, P0 = unknown>(__addKnownSubview: P0): R;
    _themeFrame<R = unknown>(): R;
    _isDocWindow<R = boolean>(): R;
    _setFrame<R = void, P0 = cocoa.CGRect>(__setFrame: P0): R;
    _setFrame_updateBorderViewSize<R = void, P0 = cocoa.CGRect, P1 = boolean>(__setFrame: P0, _updateBorderViewSize: P1): R;
    _updateManagedDisplay<R = void>(): R;
    _resolveAnySpaceMisassignmentByUpdatingManagedDisplay<R = void>(): R;
    _shouldDoLayerPerformanceUpdates<R = boolean>(): R;
    _postWindowDidChangeBackingPropertiesAndDisplayWindowForPreviousBackingScaleFactor_previousColorSpace<R = void, P0 = number, P1 = unknown>(__postWindowDidChangeBackingPropertiesAndDisplayWindowForPreviousBackingScaleFactor: P0, _previousColorSpace: P1): R;
    _locationTemporary<R = boolean>(): R;
    _setLocationTemporary<R = void, P0 = boolean>(__setLocationTemporary: P0): R;
    frameTopLeftPoint<R = cocoa.CGPoint>(): R;
    setFrameTopLeftPoint<R = void, P0 = cocoa.CGPoint>(_setFrameTopLeftPoint: P0): R;
    frameOrigin<R = cocoa.CGPoint>(): R;
    setFrameOrigin<R = void, P0 = cocoa.CGPoint>(_setFrameOrigin: P0): R;
    _shouldIgnoreSetFrameOrigin<R = boolean>(): R;
    _handleMouseDraggedEvent<R = void, P0 = unknown>(__handleMouseDraggedEvent: P0): R;
    allowsFontSmoothing<R = boolean>(): R;
    _setContentRect<R = void, P0 = cocoa.CGRect>(__setContentRect: P0): R;
    setContentSize<R = void, P0 = cocoa.CGSize>(_setContentSize: P0): R;
    _contentSizeRespectsLayoutAnchors<R = boolean>(): R;
    setValue_forKey<R = void, P0 = unknown, P1 = unknown>(_setValue: P0, _forKey: P1): R;
    setFrame_display<R = void, P0 = cocoa.CGRect, P1 = boolean>(_setFrame: P0, _display: P1): R;
    _frameIsCurrentlyAnimating<R = boolean>(): R;
    _setFrame_display_allowImplicitAnimation_stashSize<R = void, P0 = cocoa.CGRect, P1 = boolean, P2 = boolean, P3 = boolean>(__setFrame: P0, _display: P1, _allowImplicitAnimation: P2, _stashSize: P3): R;
    topLeftPoint<R = cocoa.CGPoint>(): R;
    setFrame_display_animate<R = void, P0 = cocoa.CGRect, P1 = boolean, P2 = boolean>(_setFrame: P0, _display: P1, _animate: P2): R;
    animationResizeTime<R = number, P0 = cocoa.CGRect>(_animationResizeTime: P0): R;
    _setFrameCommon_display_stashSize<R = void, P0 = cocoa.CGRect, P1 = boolean, P2 = boolean>(__setFrameCommon: P0, _display: P1, _stashSize: P2): R;
    _updateSettingsSendingScreenChangeNotificationIfNeeded<R = void, P0 = boolean>(__updateSettingsSendingScreenChangeNotificationIfNeeded: P0): R;
    _cornerMaskChanged<R = void>(): R;
    _cgsPlaceWindow<R = void, P0 = cocoa.CGRect>(__cgsPlaceWindow: P0): R;
    _cgsMoveWindow_moveGroup<R = void, P0 = cocoa.CGRect, P1 = boolean>(__cgsMoveWindow: P0, _moveGroup: P1): R;
    _adjustChildWindowMovementOffsets<R = void>(): R;
    _cgsWindowRelativeMoveChildrenWithGroupWithDelta<R = void, P0 = cocoa.CGPoint>(__cgsWindowRelativeMoveChildrenWithGroupWithDelta: P0): R;
    _startClientSideMove<R = void>(): R;
    _stopClientSideMove<R = void>(): R;
    _oldPlaceWindow<R = void, P0 = cocoa.CGRect>(__oldPlaceWindow: P0): R;
    observeValueForKeyPath_ofObject_change_context<R = void, P0 = unknown, P1 = unknown, P2 = unknown, P3 = void>(_observeValueForKeyPath: P0, _ofObject: P1, _change: P2, _context: P3): R;
    addObserver_forKeyPath_options_context<R = void, P0 = unknown, P1 = unknown, P2 = number, P3 = void>(_addObserver: P0, _forKeyPath: P1, _options: P2, _context: P3): R;
    _updateContentLayoutGuideFrame<R = void>(): R;
    _borderViewCanAddWindowTabs<R = boolean>(): R;
    setTitlebarBlurFiltersDisabled<R = void, P0 = boolean>(_setTitlebarBlurFiltersDisabled: P0): R;
    titlebarBlurFiltersDisabled<R = boolean>(): R;
    _setHasActiveAppearance<R = void, P0 = boolean>(__setHasActiveAppearance: P0): R;
    _titlebarBackdropGroupName<R = unknown>(): R;
    removeTitlebarAccessoryViewControllerAtIndex<R = void, P0 = number>(_removeTitlebarAccessoryViewControllerAtIndex: P0): R;
    insertTitlebarAccessoryViewController_atIndex<R = void, P0 = unknown, P1 = number>(_insertTitlebarAccessoryViewController: P0, _atIndex: P1): R;
    addTitlebarAccessoryViewController<R = void, P0 = unknown>(_addTitlebarAccessoryViewController: P0): R;
    _supportsTitlebarAccessoryViewControllers<R = boolean>(): R;
    _titlebarContainerView<R = unknown>(): R;
    titlebarViewController<R = unknown>(): R;
    removeUnderTitlebarView_withAssociatedWithView<R = void, P0 = unknown, P1 = unknown>(_removeUnderTitlebarView: P0, _withAssociatedWithView: P1): R;
    addUnderTitlebarView_withAssociatedWithView<R = void, P0 = unknown, P1 = unknown>(_addUnderTitlebarView: P0, _withAssociatedWithView: P1): R;
    _canAddUnderTitlebarViews<R = boolean>(): R;
    dragRectForFrameRect<R = cocoa.CGRect, P0 = cocoa.CGRect>(_dragRectForFrameRect: P0): R;
    _isDraggable<R = boolean>(): R;
    _bindingAdaptor<R = unknown>(): R;
    _setBindingAdaptor<R = void, P0 = unknown>(__setBindingAdaptor: P0): R;
    endEditingFor<R = void, P0 = unknown>(_endEditingFor: P0): R;
    fieldEditor_forObject<R = unknown, P0 = boolean, P1 = unknown>(_fieldEditor: P0, _forObject: P1): R;
    _unlockViewHierarchyForDrawing<R = void>(): R;
    _lockViewHierarchyForDrawingWithExceptionHandler<R = void, P0 = boolean>(__lockViewHierarchyForDrawingWithExceptionHandler: P0): R;
    _lockViewHierarchyForDrawing<R = void>(): R;
    _unlockViewHierarchyForModification<R = void>(): R;
    _lockViewHierarchyForModificationWithExceptionHandler<R = void, P0 = boolean>(__lockViewHierarchyForModificationWithExceptionHandler: P0): R;
    _lockViewHierarchyForModification<R = void>(): R;
    _tryLockViewHierarchyForModificationWithHandler<R = boolean, P0 = boolean>(__tryLockViewHierarchyForModificationWithHandler: P0): R;
    _tryLockViewHierarchyForModification<R = boolean>(): R;
    _copyAcquiredViewHierarchyLock<R = unknown>(): R;
    _cachedGlobalWindowNum<R = number>(): R;
    _globalWindowNum<R = number>(): R;
    _realWindowNumber<R = number>(): R;
    standardWindowButton<R = unknown, P0 = number>(_standardWindowButton: P0): R;
    _findOrMakeStandardWindowButton<R = unknown, P0 = number>(__findOrMakeStandardWindowButton: P0): R;
    addDocumentIconButton<R = void>(): R;
    _bindTitleToContentViewController<R = void>(): R;
    _unbindTitleIfNecessary<R = void>(): R;
    _customTitleFrame<R = cocoa.CGRect>(): R;
    _titleFrameForEditingWithProposedFrame<R = cocoa.CGRect, P0 = cocoa.CGRect>(__titleFrameForEditingWithProposedFrame: P0): R;
    _customTitleCell<R = unknown>(): R;
    _isTitleHidden<R = boolean>(): R;
    _hasCornerMask<R = boolean>(): R;
    _cornerMaskOrNil<R = unknown>(): R;
    _cornerMask<R = unknown>(): R;
    _shouldGetCornerMaskFromVisualEffectView<R = boolean>(): R;
    _shouldRoundCornersForSurface<R = boolean>(): R;
    _updateTitleTextField<R = void>(): R;
    _calcAndSetFilenameTitle<R = unknown>(): R;
    _invalidateDocumentIcon<R = void>(): R;
    _dosetTitle_andDefeatWrap<R = void, P0 = unknown, P1 = boolean>(__dosetTitle: P0, _andDefeatWrap: P1): R;
    setTitleWithRepresentedFilename<R = void, P0 = unknown>(_setTitleWithRepresentedFilename: P0): R;
    _setRepresentedURL<R = void, P0 = unknown>(__setRepresentedURL: P0): R;
    _displayName<R = unknown>(): R;
    _titleIsRepresentedFilename<R = boolean>(): R;
    _addToWindowsMenuIfNecessary<R = void>(): R;
    _allowsCompositing<R = boolean>(): R;
    _backingType<R = number>(): R;
    _setWindowDidExistAtLaunch<R = void, P0 = boolean>(__setWindowDidExistAtLaunch: P0): R;
    _windowDidExistAtLaunch<R = boolean>(): R;
    _commonAwake<R = void>(): R;
    _allowsSnapping<R = boolean>(): R;
    _canBeSnappingTarget<R = boolean>(): R;
    _allowedInDashboardSpaceWithCollectionBehavior<R = boolean, P0 = number>(__allowedInDashboardSpaceWithCollectionBehavior: P0): R;
    _allowedInOtherAppsFullScreenSpaceWithCollectionBehavior<R = boolean, P0 = number>(__allowedInOtherAppsFullScreenSpaceWithCollectionBehavior: P0): R;
    _windowMoveDisabled<R = boolean>(): R;
    _setWindowMoveDisabled<R = void, P0 = boolean>(__setWindowMoveDisabled: P0): R;
    _setWindowTag<R = void>(): R;
    _viewDetaching<R = unknown, P0 = unknown>(__viewDetaching: P0): R;
    _lighterViewDetaching<R = void, P0 = unknown>(__lighterViewDetaching: P0): R;
    _viewAttaching<R = void, P0 = unknown>(__viewAttaching: P0): R;
    _removeAsSavedFirstResponder<R = void, P0 = unknown>(__removeAsSavedFirstResponder: P0): R;
    _resetFirstResponder<R = void>(): R;
    _setWindowNumber<R = void, P0 = number>(__setWindowNumber: P0): R;
    _wantsUserAttention<R = boolean>(): R;
    _setShowingModalFrame<R = void, P0 = boolean>(__setShowingModalFrame: P0): R;
    _wantToBeModal<R = boolean>(): R;
    redo<R = void, P0 = unknown>(_redo: P0): R;
    undo<R = void, P0 = unknown>(_undo: P0): R;
    _getActiveUndoManager<R = unknown>(): R;
    _getUndoManager<R = unknown, P0 = boolean>(__getUndoManager: P0): R;
    _setOcclusionStateIsVisible<R = void, P0 = boolean>(__setOcclusionStateIsVisible: P0): R;
    _isDeallocating<R = boolean>(): R;
    _tryRetain<R = boolean>(): R;
    _enableScreenUpdatesIfNeeded<R = void>(): R;
    _cancelPerformSelectors<R = void>(): R;
    _windowDying<R = boolean>(): R;
    _canAdjustSizeForScreensHaveSeparateSpacesIfFillingSecondaryScreen<R = boolean>(): R;
    minFrameSizeForMinContentSize_styleMask<R = cocoa.CGSize, P0 = cocoa.CGSize, P1 = number>(_minFrameSizeForMinContentSize: P0, _styleMask: P1): R;
    contentRectForFrameRect<R = cocoa.CGRect, P0 = cocoa.CGRect>(_contentRectForFrameRect: P0): R;
    contentRectForFrameRect_styleMask<R = cocoa.CGRect, P0 = cocoa.CGRect, P1 = number>(_contentRectForFrameRect: P0, _styleMask: P1): R;
    frameRectForContentRect<R = cocoa.CGRect, P0 = cocoa.CGRect>(_frameRectForContentRect: P0): R;
    frameRectForContentRect_styleMask<R = cocoa.CGRect, P0 = cocoa.CGRect, P1 = number>(_frameRectForContentRect: P0, _styleMask: P1): R;
    _pixelRectInPoints<R = cocoa.CGRect, P0 = cocoa.CGRect>(__pixelRectInPoints: P0): R;
    _pointRectInPixels<R = cocoa.CGRect, P0 = cocoa.CGRect>(__pointRectInPixels: P0): R;
    _isEffectivelyTitled<R = boolean>(): R;
    _hasMetalSheetEffect<R = boolean>(): R;
    sheetBehavior<R = number>(): R;
    _setTexturedBackground<R = void, P0 = boolean>(__setTexturedBackground: P0): R;
    _finishedMakingConnections<R = void>(): R;
    _ownerOnly<R = boolean>(): R;
    _presenterOnly<R = boolean>(): R;
    _initFromGlobalWindow_inRect<R = unknown, P0 = number, P1 = cocoa.CGRect>(__initFromGlobalWindow: P0, _inRect: P1): R;
    _initFromGlobalWindow_inRect_styleMask<R = unknown, P0 = number, P1 = cocoa.CGRect, P2 = number>(__initFromGlobalWindow: P0, _inRect: P1, _styleMask: P2): R;
    initWithContentRect_styleMask_backing_defer<R = unknown, P0 = cocoa.CGRect, P1 = number, P2 = number, P3 = boolean>(_initWithContentRect: P0, _styleMask: P1, _backing: P2, _defer: P3): R;
    initWithContentRect_styleMask_backing_defer_screen<R = unknown, P0 = cocoa.CGRect, P1 = number, P2 = number, P3 = boolean, P4 = unknown>(_initWithContentRect: P0, _styleMask: P1, _backing: P2, _defer: P3, _screen: P4): R;
    _initContent_styleMask_backing_defer_contentView<R = unknown, P0 = cocoa.CGRect, P1 = number, P2 = number, P3 = boolean, P4 = unknown>(__initContent: P0, _styleMask: P1, _backing: P2, _defer: P3, _contentView: P4): R;
    _isNonactivatingPanel<R = boolean>(): R;
    _setNonactivatingPanel<R = void, P0 = boolean>(__setNonactivatingPanel: P0): R;
    _semanticContext<R = number>(): R;
    _hasDarkShadow<R = boolean>(): R;
    _isDarkWindow<R = boolean>(): R;
    _usesCustomDrawing<R = boolean>(): R;
    _isUtilityWindow<R = boolean>(): R;
    _setUtilityWindow<R = void, P0 = boolean>(__setUtilityWindow: P0): R;
    _isViewScrolling<R = boolean>(): R;
    _didEndViewScrolling<R = void>(): R;
    _willBeginViewScrolling<R = void>(): R;
    _creationCallStackSymbols<R = unknown>(): R;
    _borderViewChanged<R = void>(): R;
    _commonInitFrame_styleMask_backing_defer<R = void, P0 = cocoa.CGRect, P1 = number, P2 = number, P3 = boolean>(__commonInitFrame: P0, _styleMask: P1, _backing: P2, _defer: P3): R;
    _initContent_styleMask_backing_defer_screen_contentView<R = unknown, P0 = cocoa.CGRect, P1 = number, P2 = number, P3 = boolean, P4 = unknown, P5 = unknown>(__initContent: P0, _styleMask: P1, _backing: P2, _defer: P3, _screen: P4, _contentView: P5): R;
    _setWantsToBeOnMainScreen<R = void, P0 = boolean>(__setWantsToBeOnMainScreen: P0): R;
    _fromScreenCommonCode<R = void, P0 = unknown>(__fromScreenCommonCode: P0): R;
    _aux<R = unknown>(): R;
    _automateLiveResize<R = void>(): R;
    _synthesizeEventsForLiveResize<R = void>(): R;
    _markEndOfLiveResizeForPerformanceMeasurement<R = void>(): R;
    _markStartOfLiveResizeForPerformanceMeasurement<R = void>(): R;
    _liveResizeOperation<R = unknown>(): R;
    _setStartingSizeAndPosition<R = void>(): R;
    _setTemporaryContentView<R = void, P0 = unknown>(__setTemporaryContentView: P0): R;
    _toggleTabOverview<R = void, P0 = unknown>(__toggleTabOverview: P0): R;
    _toggleTabOverview_animated<R = void, P0 = unknown, P1 = boolean>(__toggleTabOverview: P0, _animated: P1): R;
    _addTabbedWindow_ordered<R = void, P0 = unknown, P1 = number>(__addTabbedWindow: P0, _ordered: P1): R;
    _doTabbedWindowDidChangeToolbar<R = void>(): R;
    performCloseOtherTabs<R = void, P0 = unknown>(_performCloseOtherTabs: P0): R;
    _tabbedWindows<R = unknown>(): R;
    windowDidBecomeTabbed<R = void>(): R;
    _toggleTabBar<R = void, P0 = unknown>(__toggleTabBar: P0): R;
    _ensureStackControllerExists<R = void>(): R;
    _mergeAllWindows<R = void, P0 = unknown>(__mergeAllWindows: P0): R;
    _moveTabToNewWindow<R = void, P0 = unknown>(__moveTabToNewWindow: P0): R;
    unpinTab<R = void, P0 = unknown>(_unpinTab: P0): R;
    pinTab<R = void, P0 = unknown>(_pinTab: P0): R;
    _selectPreviousTab<R = void, P0 = unknown>(__selectPreviousTab: P0): R;
    _selectNextTab<R = void, P0 = unknown>(__selectNextTab: P0): R;
    orderOutTabbedWindowGroup<R = void, P0 = unknown>(_orderOutTabbedWindowGroup: P0): R;
    _doTabbedWindowWillExitVersionsEditor<R = void>(): R;
    _doTabbedWindowWillEnterVersionsEditor<R = void>(): R;
    _tabbedWindowsHandleEnterFullScreen<R = boolean>(): R;
    _moveWindowToSpace<R = void, P0 = number>(__moveWindowToSpace: P0): R;
    _tabbedWindowsDidExitFullScreen<R = void>(): R;
    _tabbedWindowsDidEnterFullScreen<R = void>(): R;
    _tabbedWindowsWillEnterFullScreen<R = void>(): R;
    _currentlySelectedTabbedWindow<R = unknown>(): R;
    _windowForLayoutEncoding<R = unknown>(): R;
    _isPerformingRestoration<R = boolean>(): R;
    _setIsPerformingRestoration<R = void, P0 = boolean>(__setIsPerformingRestoration: P0): R;
    _restoreTabbedWindowStateWithCoder<R = void, P0 = unknown>(__restoreTabbedWindowStateWithCoder: P0): R;
    _encodeTabbedWindowRestorableStateWithCoder<R = void, P0 = unknown>(__encodeTabbedWindowRestorableStateWithCoder: P0): R;
    _tabsFinishDeminiaturizeFromDock<R = void>(): R;
    _attemptToCloseAllTabs<R = boolean, P0 = unknown>(__attemptToCloseAllTabs: P0): R;
    _doNonVisibleTabDeminimize<R = void>(): R;
    _prepareTabbedWindowDeminimize<R = boolean>(): R;
    _doNonVisibleTabMinimize<R = void>(): R;
    _prepareTabbedWindowMinimize<R = boolean>(): R;
    _setTemporarilyIgnoresMoves<R = void, P0 = boolean>(__setTemporarilyIgnoresMoves: P0): R;
    _temporarilyIgnoreMoves<R = boolean>(): R;
    _tabbingPerformKeyEquivalent<R = boolean, P0 = unknown>(__tabbingPerformKeyEquivalent: P0): R;
    _eventIsOldSelectNextPreviousTabKeyEquivalent_direction<R = boolean, P0 = unknown, P1 = string>(__eventIsOldSelectNextPreviousTabKeyEquivalent: P0, _direction: P1): R;
    performCloseTabbedWindowGroup<R = void, P0 = unknown>(_performCloseTabbedWindowGroup: P0): R;
    _validateTabUserInterfaceItem_withResult<R = boolean, P0 = unknown, P1 = boolean>(__validateTabUserInterfaceItem: P0, _withResult: P1): R;
    _validateShowAllTabsMenuItem<R = boolean, P0 = unknown>(__validateShowAllTabsMenuItem: P0): R;
    _validateToggleTabBarItem<R = boolean, P0 = unknown>(__validateToggleTabBarItem: P0): R;
    _nextResponderChainValidateUIItem_withResult<R = boolean, P0 = unknown, P1 = boolean>(__nextResponderChainValidateUIItem: P0, _withResult: P1): R;
    _canMergeWindows<R = boolean>(): R;
    _canTabMergeWithIdentifier<R = boolean, P0 = unknown>(__canTabMergeWithIdentifier: P0): R;
    _canTabWithIdentifier<R = boolean, P0 = unknown>(__canTabWithIdentifier: P0): R;
    isTabbed<R = boolean>(): R;
    _canCloseOtherTabs<R = boolean>(): R;
    _canMoveTabToNewWindow<R = boolean>(): R;
    _canSelectNextOrPreviousTab<R = boolean>(): R;
    _doTabbedWindowSyncToolbar<R = void>(): R;
    _doWindowTabOrderOut<R = void>(): R;
    _doWindowTabOrderAbove<R = void, P0 = unknown>(__doWindowTabOrderAbove: P0): R;
    _doTabbedWindowMadeKey<R = void>(): R;
    _setIsInHiddenWindowTab<R = void, P0 = boolean>(__setIsInHiddenWindowTab: P0): R;
    _isInHiddenWindowTab<R = boolean>(): R;
    _doTabbedWindowOrderFront<R = void>(): R;
    _doTabbedWindowCleanupForOrderOut<R = void>(): R;
    _doWindowTabCleanupForStyleMaskChange<R = void>(): R;
    _willBecomeTabbedWithOtherWindows<R = boolean>(): R;
    _tabBarIsVisible<R = boolean>(): R;
    _isTabbedWithOtherWindows<R = boolean>(): R;
    _tabRect<R = cocoa.CGRect>(): R;
    _moveToModalStackController<R = void, P0 = unknown>(__moveToModalStackController: P0): R;
    _doTabbedWindowOrderInWithWasVisible_mode<R = boolean, P0 = boolean, P1 = number>(__doTabbedWindowOrderInWithWasVisible: P0, _mode: P1): R;
    _nextTabbedWindowToSelect<R = unknown>(): R;
    _setIgnoreWindowStackController<R = void, P0 = boolean>(__setIgnoreWindowStackController: P0): R;
    _ignoreWindowStackController<R = boolean>(): R;
    _shouldJoinTabbingStackOnOrderIn<R = boolean>(): R;
    _doWindowTabSetupAttemptingToJoinExistingStack_makeIfNeeded<R = void, P0 = boolean, P1 = boolean>(__doWindowTabSetupAttemptingToJoinExistingStack: P0, _makeIfNeeded: P1): R;
    _beginNextQueuedSheetInGroupIfNecessary<R = void>(): R;
    _makeTabStackActive<R = void>(): R;
    _implicitlyAllowsWindowTabbing<R = boolean>(): R;
    _makeNewWindowInTab<R = void>(): R;
    _fullScreenModalStackController<R = unknown>(): R;
    _isFullScreenModal<R = boolean>(): R;
    _supportsNewTabButton<R = boolean>(): R;
    _startingWindowForSendAction<R = unknown, P0 = string>(__startingWindowForSendAction: P0): R;
    _supportsTabbing<R = boolean>(): R;
    _canAutoParticipateInWindowTabs<R = boolean>(): R;
    _doTabbedWindowSyncTitleToTabBar<R = void>(): R;
    _hasTabBarItem<R = boolean>(): R;
    _tabGroup<R = unknown>(): R;
    _storedTabbingIdentifier<R = unknown>(): R;
    _titlebarDisplayIdentifier<R = unknown>(): R;
    setTabOverviewVisible<R = void, P0 = boolean>(_setTabOverviewVisible: P0): R;
    _recursiveResetTrackingAreasToPending<R = void>(): R;
    _updateTrackingAreasDueToEndScrolling<R = void>(): R;
    _synchronizeConfigurationForTrackingArea<R = void, P0 = unknown>(__synchronizeConfigurationForTrackingArea: P0): R;
    _moveTrackingArea_toRect<R = void, P0 = unknown, P1 = cocoa.CGRect>(__moveTrackingArea: P0, _toRect: P1): R;
    _setTrackingAreasDirty<R = void>(): R;
    _enableTrackingArea<R = void, P0 = unknown>(__enableTrackingArea: P0): R;
    _disableTrackingArea<R = void, P0 = unknown>(__disableTrackingArea: P0): R;
    _handleTrackingRectEnterExitEvent<R = boolean, P0 = unknown>(__handleTrackingRectEnterExitEvent: P0): R;
    _containsTrackingRect<R = boolean, P0 = number>(__containsTrackingRect: P0): R;
    _enableTrackingRect<R = void, P0 = number>(__enableTrackingRect: P0): R;
    _disableTrackingRect<R = void, P0 = number>(__disableTrackingRect: P0): R;
    _discardTrackingRect<R = void, P0 = number>(__discardTrackingRect: P0): R;
    _discardTrackingRects_count<R = void, P0 = number, P1 = number>(__discardTrackingRects: P0, _count: P1): R;
    _setTrackingRect_inside_owner_userData<R = number, P0 = cocoa.CGRect, P1 = boolean, P2 = unknown, P3 = void>(__setTrackingRect: P0, _inside: P1, _owner: P2, _userData: P3): R;
    _setTrackingRect_inside_owner_userData_useTrackingNum<R = number, P0 = cocoa.CGRect, P1 = boolean, P2 = unknown, P3 = void, P4 = number>(__setTrackingRect: P0, _inside: P1, _owner: P2, _userData: P3, _useTrackingNum: P4): R;
    _setTrackingRects_insideList_owner_userDataList_trackingNums_count<R = void, P0 = cocoa.CGRect, P1 = string, P2 = unknown, P3 = void, P4 = number, P5 = number>(__setTrackingRects: P0, _insideList: P1, _owner: P2, _userDataList: P3, _trackingNums: P4, _count: P5): R;
    _setTrackingRect_inside_owner_userData_useTrackingNum_install<R = unknown, P0 = cocoa.CGRect, P1 = boolean, P2 = unknown, P3 = void, P4 = number, P5 = boolean>(__setTrackingRect: P0, _inside: P1, _owner: P2, _userData: P3, _useTrackingNum: P4, _install: P5): R;
    _deactivateTrackingRectsForApplicationDeactivation<R = void>(): R;
    _activateTrackingRectsForApplicationActivation<R = void>(): R;
    _clearTrackingRects<R = void>(): R;
    _setTrackingRects<R = void>(): R;
    _trackingAreaIDForTrackingArea<R = number, P0 = unknown>(__trackingAreaIDForTrackingArea: P0): R;
    _resetClipForTrackingRect<R = void, P0 = number>(__resetClipForTrackingRect: P0): R;
    _setEventMask_forTrackingRect<R = void, P0 = number, P1 = number>(__setEventMask: P0, _forTrackingRect: P1): R;
    _nextTrackingNum<R = number>(): R;
    _removeTrackingRects_count<R = void, P0 = number, P1 = number>(__removeTrackingRects: P0, _count: P1): R;
    _removeTrackingRect<R = void, P0 = number>(__removeTrackingRect: P0): R;
    _didInstallTrackingRect_assumeInside_userData_trackingNum<R = boolean, P0 = cocoa.CGRect, P1 = boolean, P2 = void, P3 = number>(__didInstallTrackingRect: P0, _assumeInside: P1, _userData: P2, _trackingNum: P3): R;
    _verifyTrackingRects<R = void>(): R;
    _updateCursorRectsDueToResigningKey<R = void>(): R;
    _updateCursorRectsDueToBecomingKey<R = void>(): R;
    _updateCursorRectsDueToBecomingVisible<R = void>(): R;
    GDBDumpCursorRects<R = void>(): R;
    _setCursorForMouseLocation<R = void, P0 = cocoa.CGPoint>(__setCursorForMouseLocation: P0): R;
    _discardCursorRect<R = void, P0 = number>(__discardCursorRect: P0): R;
    _setCursorRect_index<R = void, P0 = cocoa.CGRect, P1 = number>(__setCursorRect: P0, _index: P1): R;
    _findCursorForView<R = unknown, P0 = unknown>(__findCursorForView: P0): R;
    _deallocCursorRects<R = void>(): R;
    _markCursorRectsForRemovedView<R = void, P0 = unknown>(__markCursorRectsForRemovedView: P0): R;
    _discardCursorRectsForView<R = unknown, P0 = unknown>(__discardCursorRectsForView: P0): R;
    resetCursorRects<R = void>(): R;
    _shouldShowCursorRects<R = boolean>(): R;
    setAllowsCursorRectsWhenInactive<R = void, P0 = boolean>(_setAllowsCursorRectsWhenInactive: P0): R;
    allowsCursorRectsWhenInactive<R = boolean>(): R;
    _shouldResetCursorRects<R = boolean>(): R;
    _viewDidChangeGeometryInWindow<R = void, P0 = unknown>(__viewDidChangeGeometryInWindow: P0): R;
    invalidateCursorRectsForView<R = void, P0 = unknown>(_invalidateCursorRectsForView: P0): R;
    _invalidateCursorRectsForView_force<R = void, P0 = unknown, P1 = boolean>(__invalidateCursorRectsForView: P0, _force: P1): R;
    _invalidateCursorRectsForViewsWithNoTrackingAreas<R = void>(): R;
    _postInvalidCursorRects<R = void>(): R;
    discardCursorRects<R = void>(): R;
    areCursorRectsEnabled<R = boolean>(): R;
    enableCursorRects<R = void>(): R;
    disableCursorRects<R = void>(): R;
    _hasCursorRects<R = boolean>(): R;
    _hasCursorRectsForView<R = boolean, P0 = unknown>(__hasCursorRectsForView: P0): R;
    _removeCursorRect_cursor_forView<R = boolean, P0 = cocoa.CGRect, P1 = unknown, P2 = unknown>(__removeCursorRect: P0, _cursor: P1, _forView: P2): R;
    _addCursorRect_cursor_forView<R = boolean, P0 = cocoa.CGRect, P1 = unknown, P2 = unknown>(__addCursorRect: P0, _cursor: P1, _forView: P2): R;
    openDrawers<R = unknown>(): R;
    _setVisibleWithoutLoginForAllDrawers<R = void>(): R;
    _changeAllDrawersFirstResponder<R = void>(): R;
    _changeAllDrawersMainState<R = void>(): R;
    _changeAllDrawersKeyState<R = void>(): R;
    _orderedDrawerAndWindowKeyLoopGroupingViews<R = unknown>(): R;
    _openDrawers<R = unknown>(): R;
    _cycleDrawersReversed<R = void, P0 = boolean>(__cycleDrawersReversed: P0): R;
    _setLevelForAllDrawers<R = void>(): R;
    _endLiveResizeForAllDrawers<R = void>(): R;
    _startLiveResizeForAllDrawers<R = void>(): R;
    _resetAllDrawersPostingCounts<R = void>(): R;
    _resetAllDrawersDisableCounts<R = void>(): R;
    _registerAllDrawersForDraggedTypesIfNeeded<R = void>(): R;
    _removeAllDrawersImmediately<R = void, P0 = boolean>(__removeAllDrawersImmediately: P0): R;
    _minSizeForDrawers<R = cocoa.CGSize>(): R;
    _minContentSizeForDrawers<R = cocoa.CGSize>(): R;
    _standardFrameForDrawersInRect<R = cocoa.CGRect, P0 = cocoa.CGRect>(__standardFrameForDrawersInRect: P0): R;
    _sizeAllDrawersWithRect<R = void, P0 = cocoa.CGRect>(__sizeAllDrawersWithRect: P0): R;
    _sizeAllDrawers<R = void>(): R;
    _positionAllDrawers<R = void>(): R;
    _displayAllDrawersIfNeeded<R = void>(): R;
    _moveAllDrawersByOffset<R = void, P0 = cocoa.CGSize>(__moveAllDrawersByOffset: P0): R;
    _unhideAllDrawers<R = void>(): R;
    _hideAllDrawers<R = void>(): R;
    _eventFirstResponderChainDescription<R = unknown>(): R;
    _setLastDragRegion<R = void, P0 = void>(__setLastDragRegion: P0): R;
    _lastDragRegionData<R = unknown>(): R;
    _shouldSuppressRolloversForSegmentedCellInView<R = boolean, P0 = unknown>(__shouldSuppressRolloversForSegmentedCellInView: P0): R;
    _shouldUseTexturedAppearanceForSegmentedCellInView<R = boolean, P0 = unknown>(__shouldUseTexturedAppearanceForSegmentedCellInView: P0): R;
    _topmostDocWrapsCarbonWindow<R = boolean>(): R;
    _isSheetOnWindowWithWindowNumber<R = boolean, P0 = number>(__isSheetOnWindowWithWindowNumber: P0): R;
    _isSheetOnModalWindow<R = boolean>(): R;
    _unhideSheet<R = void>(): R;
    _hideSheet<R = void, P0 = boolean>(__hideSheet: P0): R;
    _collapsedOrigin<R = cocoa.CGPoint>(): R;
    _stashCollapsedOrigin<R = void, P0 = cocoa.CGPoint>(__stashCollapsedOrigin: P0): R;
    _stashedOrigin<R = cocoa.CGPoint>(): R;
    _stashOrigin<R = void, P0 = cocoa.CGPoint>(__stashOrigin: P0): R;
    _orderOutRelativeToWindow<R = void, P0 = unknown>(__orderOutRelativeToWindow: P0): R;
    _orderFrontRelativeToWindow<R = void, P0 = unknown>(__orderFrontRelativeToWindow: P0): R;
    _positionSheet_constrained_andDisplay<R = cocoa.CGRect, P0 = unknown, P1 = boolean, P2 = boolean>(__positionSheet: P0, _constrained: P1, _andDisplay: P2): R;
    _adjustFrame_constrained_forSheet_positioningFrame<R = cocoa.CGRect, P0 = cocoa.CGRect, P1 = boolean, P2 = unknown, P3 = cocoa.CGRect>(__adjustFrame: P0, _constrained: P1, _forSheet: P2, _positioningFrame: P3): R;
    _xOffsetForSheetFrame_inParentFrame<R = number, P0 = cocoa.CGRect, P1 = cocoa.CGRect>(__xOffsetForSheetFrame: P0, _inParentFrame: P1): R;
    _centerSheetFrame_inParentFrame<R = cocoa.CGRect, P0 = cocoa.CGRect, P1 = cocoa.CGRect>(__centerSheetFrame: P0, _inParentFrame: P1): R;
    _keepOnScreenSheetFrame<R = cocoa.CGRect, P0 = cocoa.CGRect>(__keepOnScreenSheetFrame: P0): R;
    _positionSheetsConstrained_andDisplay<R = void, P0 = boolean, P1 = boolean>(__positionSheetsConstrained: P0, _andDisplay: P1): R;
    startRectForSheet<R = cocoa.CGRect, P0 = unknown>(_startRectForSheet: P0): R;
    _adjustSheetEffect<R = void>(): R;
    _adjustEffectForSheet<R = void, P0 = unknown>(__adjustEffectForSheet: P0): R;
    _sheetEffectInset<R = number>(): R;
    _sheetEffect<R = void>(): R;
    _setSheetParent<R = void, P0 = unknown>(__setSheetParent: P0): R;
    _setDocumentWindow<R = void, P0 = unknown>(__setDocumentWindow: P0): R;
    _documentWindow<R = unknown>(): R;
    _attachedSheet<R = unknown>(): R;
    _detachSheetWindow<R = void>(): R;
    _attachSheetWindow<R = void, P0 = unknown>(__attachSheetWindow: P0): R;
    _reparentSheetsToSelfOnFullScreenExit<R = void>(): R;
    _windowForSheetMovementAndOrderingGroups<R = unknown>(): R;
    _moveSheetByItself_delta<R = void, P0 = unknown, P1 = cocoa.CGPoint>(__moveSheetByItself: P0, _delta: P1): R;
    _isSheet<R = boolean>(): R;
    _setSheet<R = void, P0 = boolean>(__setSheet: P0): R;
    _setDocModal<R = void, P0 = boolean>(__setDocModal: P0): R;
    _isDocModal<R = boolean>(): R;
    _runningDocModal<R = boolean>(): R;
    _resetSplitViewUserPreferredThicknessFromSetAlignmentFrames<R = void>(): R;
    _responderDebugDescription<R = unknown>(): R;
    _updateStructuralRegionsOnNextDisplayCycle<R = void>(): R;
    _postWindowNeedsDisplayUnlessPostingDisabled<R = void>(): R;
    _postWindowNeedsLayoutUnlessPostingDisabled<R = void>(): R;
    _postWindowNeedsUpdateConstraintsUnlessPostingDisabled<R = void>(): R;
    _evilHackToClearlastLeftHitInWindow<R = void>(): R;
    _resumeUIHeartBeatingInView<R = void, P0 = unknown>(__resumeUIHeartBeatingInView: P0): R;
    _pauseUIHeartBeatingInView<R = void, P0 = unknown>(__pauseUIHeartBeatingInView: P0): R;
    _encodeWindowLayoutsByScreenLayoutWithCoder<R = void, P0 = unknown>(__encodeWindowLayoutsByScreenLayoutWithCoder: P0): R;
    _restoreWindowLayoutsByScreenLayoutWithCoder<R = void, P0 = unknown>(__restoreWindowLayoutsByScreenLayoutWithCoder: P0): R;
    _saveWindowLayoutForScreenLayout<R = void>(): R;
    _saveWindowLayoutForScreen<R = void, P0 = unknown>(__saveWindowLayoutForScreen: P0): R;
    _applyWindowLayoutForScreen<R = boolean, P0 = unknown>(__applyWindowLayoutForScreen: P0): R;
    _adjustWindowFrame_fromScreen_toScreen<R = void, P0 = cocoa.CGRect, P1 = unknown, P2 = unknown>(__adjustWindowFrame: P0, _fromScreen: P1, _toScreen: P2): R;
    _screenForWindowLayoutAdjustment<R = unknown>(): R;
    _matchingWindowLayoutForScreen<R = unknown, P0 = unknown>(__matchingWindowLayoutForScreen: P0): R;
    _isScreenLayoutAware<R = boolean>(): R;
    _withWindowLayoutsForScreen_performBlock<R = void, P0 = unknown, P1 = cocoa.CDUnknownBlockType>(__withWindowLayoutsForScreen: P0, _performBlock: P1): R;
    _withWindowLayoutsByScreenLayout<R = void, P0 = cocoa.CDUnknownBlockType>(__withWindowLayoutsByScreenLayout: P0): R;
    _hiliteWindow_fromWindow<R = void, P0 = cocoa.OpaqueWindowPtr, P1 = unknown>(__hiliteWindow: P0, _fromWindow: P1): R;
    initWithWindowRef<R = unknown, P0 = void>(_initWithWindowRef: P0): R;
    _setWindowRef<R = void, P0 = cocoa.OpaqueWindowPtr>(__setWindowRef: P0): R;
    snapshotFromRect_options<R = unknown, P0 = cocoa.CGRect, P1 = number>(_snapshotFromRect: P0, _options: P1): R;
    _cgImageInRect_options<R = cocoa.CGImage, P0 = cocoa.CGRect, P1 = number>(__cgImageInRect: P0, _options: P1): R;
    _setDoingCacheDisplayInRect<R = void, P0 = boolean>(__setDoingCacheDisplayInRect: P0): R;
    _doingCacheDisplayInRect<R = boolean>(): R;
    _finishMinimizeToDock<R = void>(): R;
    _updateWindowsMenuItemIfNeeded<R = void>(): R;
    _prepareToUnMinimizeFromDock_forceActivation_wantsToBeKey<R = void, P0 = boolean, P1 = boolean, P2 = boolean>(__prepareToUnMinimizeFromDock: P0, _forceActivation: P1, _wantsToBeKey: P2): R;
    _prepareToRestoreFromDock_forceActivation_wantsToBeKey<R = boolean, P0 = boolean, P1 = boolean, P2 = boolean>(__prepareToRestoreFromDock: P0, _forceActivation: P1, _wantsToBeKey: P2): R;
    _prepareToRestoreRegularFromDock_forceActivation_wantsToBeKey<R = void, P0 = boolean, P1 = boolean, P2 = boolean>(__prepareToRestoreRegularFromDock: P0, _forceActivation: P1, _wantsToBeKey: P2): R;
    _doRestoreComingFromDock_forceActivation_wantsToBeKey<R = number, P0 = boolean, P1 = boolean, P2 = boolean>(__doRestoreComingFromDock: P0, _forceActivation: P1, _wantsToBeKey: P2): R;
    _setIsMinimized<R = void, P0 = boolean>(__setIsMinimized: P0): R;
    _defaultButtonPaused<R = boolean>(): R;
    _setDefaultButtonPaused<R = void, P0 = boolean>(__setDefaultButtonPaused: P0): R;
    _defaultButtonSuppressed<R = boolean>(): R;
    _setDefaultButtonSuppressed<R = void, P0 = boolean>(__setDefaultButtonSuppressed: P0): R;
    _createWindowsMenuEntryWithTitle_enabled<R = cocoa.__CFDictionary, P0 = unknown, P1 = boolean>(__createWindowsMenuEntryWithTitle: P0, _enabled: P1): R;
    _selectWindow<R = void, P0 = unknown>(__selectWindow: P0): R;
    updateInDock<R = void>(): R;
    _updateButtonsForModeChanged<R = void>(): R;
    _updateFrameWidgets<R = unknown>(): R;
    showDeminiaturizedWindow<R = unknown>(): R;
    _enterFullScreenIfNeededAfterMiniturized<R = void>(): R;
    _finishDeminiaturizeFromDock<R = void, P0 = boolean>(__finishDeminiaturizeFromDock: P0): R;
    restoreWindowOnDockReincarnation<R = unknown>(): R;
    restoreWindowOnDockDeath<R = unknown>(): R;
    cacheMiniwindowTitle_guess<R = void, P0 = unknown, P1 = boolean>(_cacheMiniwindowTitle: P0, _guess: P1): R;
    dockTitleIsGuess<R = boolean>(): R;
    guessDockTitle<R = void, P0 = unknown>(_guessDockTitle: P0): R;
    heartBeat<R = void, P0 = unknown>(_heartBeat: P0): R;
    _wantsHeartBeat<R = boolean>(): R;
    _addHeartBeatClientView<R = void, P0 = unknown>(__addHeartBeatClientView: P0): R;
    _minimizeToDock<R = boolean>(): R;
    _regularMinimizeToDock<R = number>(): R;
    _carbonMinimizeToDock<R = number>(): R;
    _minimizeSucceeded<R = void, P0 = boolean>(__minimizeSucceeded: P0): R;
    _prepareToMinimize<R = boolean>(): R;
    _prepareToMinimizeCore<R = void>(): R;
    _shouldSendResizeNotificationsToDock<R = boolean>(): R;
    _setShouldSendResizeNotificationsToDock<R = void, P0 = boolean>(__setShouldSendResizeNotificationsToDock: P0): R;
    _shadowHiddenByDock<R = boolean>(): R;
    _setShadowHiddenByDock<R = void, P0 = boolean>(__setShadowHiddenByDock: P0): R;
    _dockAllowedResizeEdges<R = number>(): R;
    _setDockAllowedResizeEdges<R = void, P0 = number>(__setDockAllowedResizeEdges: P0): R;
    _resizeEdgesManagedByDock<R = boolean>(): R;
    _setResizeEdgesManagedByDock<R = void, P0 = boolean>(__setResizeEdgesManagedByDock: P0): R;
    _handlingResizeInitiatedByDock<R = boolean>(): R;
    _setHandlingResizeInitiatedByDock<R = void, P0 = boolean>(__setHandlingResizeInitiatedByDock: P0): R;
    _dockItem<R = void>(): R;
    _registerWithDockIfNeeded<R = boolean>(): R;
    _setNeedsToRemoveFieldEditor<R = void, P0 = boolean>(__setNeedsToRemoveFieldEditor: P0): R;
    _needsToRemoveFieldEditor<R = boolean>(): R;
    _postWindowNeedsToResetDragMarginsUnlessPostingDisabled<R = void>(): R;
    _setNeedsToResetDragMargins<R = void, P0 = boolean>(__setNeedsToResetDragMargins: P0): R;
    _needsToResetDragMargins<R = boolean>(): R;
    _resetDragMarginsIfNeeded<R = void>(): R;
    _titlebarButtonsPreventingActivationRegion<R = cocoa.CGSRegionObject>(): R;
    _titlebarCommandModifierExclusionRegion<R = cocoa.CGSRegionObject>(): R;
    _titlebarActivationRegion<R = cocoa.CGSRegionObject>(): R;
    _regionForOpaqueViewsBlockingDraggableFrame<R = cocoa.CGSRegionObject, P0 = cocoa.CGRect>(__regionForOpaqueViewsBlockingDraggableFrame: P0): R;
    _resetDragMargins<R = void>(): R;
    _draggableFrame<R = cocoa.CGRect>(): R;
    _transparency<R = number>(): R;
    _hasActiveControls<R = boolean>(): R;
    _controlAppearanceChangesOnKeyStateChange<R = boolean>(): R;
    _setForceActiveControls<R = void, P0 = boolean>(__setForceActiveControls: P0): R;
    _growBoxRect<R = cocoa.CGRect>(): R;
    _containedMenusAreEligibleForKeyEquivalents<R = boolean>(): R;
    _customImageForStandardWindowButton_state_dirty_controlTint<R = unknown, P0 = number, P1 = number, P2 = boolean, P3 = number>(__customImageForStandardWindowButton: P0, _state: P1, _dirty: P2, _controlTint: P3): R;
    _hasActiveAppearanceForStandardWindowButton<R = boolean, P0 = number>(__hasActiveAppearanceForStandardWindowButton: P0): R;
    _fixIgnoredKeyMainAppearancesIfNeeded<R = void>(): R;
    resignMainAppearance<R = void>(): R;
    acquireMainAppearance<R = void>(): R;
    _sendAcquireMainAppearanceToResponder<R = void, P0 = unknown>(__sendAcquireMainAppearanceToResponder: P0): R;
    hasMainAppearance<R = boolean>(): R;
    resignKeyAppearance<R = void>(): R;
    _sendResignKeyAppearanceChangeToResponder<R = void, P0 = unknown>(__sendResignKeyAppearanceChangeToResponder: P0): R;
    acquireKeyAppearance<R = void>(): R;
    _sendAcquireKeyAppearanceChangeToResponder<R = void, P0 = unknown>(__sendAcquireKeyAppearanceChangeToResponder: P0): R;
    _hasDescendentThatSharesKeyStatusWithSelfAndHasKeyAppearanceIncludingSheets<R = boolean, P0 = boolean>(__hasDescendentThatSharesKeyStatusWithSelfAndHasKeyAppearanceIncludingSheets: P0): R;
    hasKeyAppearanceIncludingSheets<R = boolean, P0 = boolean>(_hasKeyAppearanceIncludingSheets: P0): R;
    _cgImageScreenShotIncludingShadow_clipRect_visualEffectViewWithDesktopBleedOnly_spaceID<R = cocoa.CGImage, P0 = boolean, P1 = cocoa.CGRect, P2 = boolean, P3 = number>(__cgImageScreenShotIncludingShadow: P0, _clipRect: P1, _visualEffectViewWithDesktopBleedOnly: P2, _spaceID: P3): R;
    _cgImageScreenShotIncludingSpaceID<R = cocoa.CGImage, P0 = number>(__cgImageScreenShotIncludingSpaceID: P0): R;
    _cgImageScreenShot<R = cocoa.CGImage>(): R;
    _dumpImage<R = unknown>(): R;
    _viewTreeDescription<R = unknown>(): R;
    hasKeyAppearance<R = boolean>(): R;
    _hasMainAppearance<R = boolean>(): R;
    _forceMainAppearance<R = boolean>(): R;
    _setForceMainAppearance<R = void, P0 = boolean>(__setForceMainAppearance: P0): R;
    _hasKeyAppearance<R = boolean>(): R;
    _hasActiveAppearanceIgnoringKeyFocus<R = boolean>(): R;
    _hasActiveAppearance<R = boolean>(): R;
    _setForceInactiveShadow<R = void, P0 = boolean>(__setForceInactiveShadow: P0): R;
    _forceInactiveShadow<R = boolean>(): R;
    _contentHasShadow<R = boolean>(): R;
    _setContentHasShadow<R = void, P0 = boolean>(__setContentHasShadow: P0): R;
    _shadowOffsetForActiveAppearance<R = cocoa.CGSize, P0 = boolean>(__shadowOffsetForActiveAppearance: P0): R;
    _shadowOffset<R = cocoa.CGSize>(): R;
    shadowStyle<R = number>(): R;
    setShadowStyle<R = void, P0 = number>(_setShadowStyle: P0): R;
    _wrapsCarbonWindow<R = boolean>(): R;
    _removeWindowRef<R = void>(): R;
    _hasWindowRefCreatedForCarbonControl<R = boolean>(): R;
    _windowRefCreatedForCarbonControl<R = cocoa.OpaqueWindowPtr>(): R;
    _windowRefCreatedForCarbonApp<R = cocoa.OpaqueWindowPtr>(): R;
    _managesWindowRef<R = boolean>(): R;
    _hasWindowRef<R = boolean>(): R;
    windowRefWithCompositedAttribute_andFrameworkScaledAttribute<R = void, P0 = boolean, P1 = boolean>(_windowRefWithCompositedAttribute: P0, _andFrameworkScaledAttribute: P1): R;
    _windowRef<R = cocoa.OpaqueWindowPtr>(): R;
    _carbonWindowClass<R = number>(): R;
    _baseTransform<R = cocoa.CGAffineTransform>(): R;
    _transformsDescription<R = unknown>(): R;
    _scaleFactor<R = number>(): R;
    _setScaleFactor<R = void, P0 = number>(__setScaleFactor: P0): R;
    _setBackingScaleFactor<R = void, P0 = number>(__setBackingScaleFactor: P0): R;
    _frameworkScaleFactor<R = number>(): R;
    _setFrameworkScaleFactor<R = void, P0 = number>(__setFrameworkScaleFactor: P0): R;
    setInspectorBar<R = void, P0 = unknown>(_setInspectorBar: P0): R;
    inspectorBar<R = unknown>(): R;
    _titleMightBeEditable<R = boolean>(): R;
    _setDocumentButtonEnabled<R = void, P0 = boolean>(__setDocumentButtonEnabled: P0): R;
    _setInactiveRevisionWindow<R = void, P0 = boolean>(__setInactiveRevisionWindow: P0): R;
    _isInactiveRevisionWindow<R = boolean>(): R;
    _documentShowsPanelOnClose<R = boolean>(): R;
    _setDocumentShowsPanelOnClose<R = void, P0 = boolean>(__setDocumentShowsPanelOnClose: P0): R;
    _nonModalDocumentError<R = unknown>(): R;
    _setNonModalDocumentError<R = void, P0 = unknown>(__setNonModalDocumentError: P0): R;
    _documentAutosavingError<R = unknown>(): R;
    _setDocumentAutosavingError<R = void, P0 = unknown>(__setDocumentAutosavingError: P0): R;
    _documentEditingState<R = number>(): R;
    _setDocumentEditingState_animate<R = void, P0 = number, P1 = boolean>(__setDocumentEditingState: P0, _animate: P1): R;
    setShowsAutosaveButton<R = void, P0 = boolean>(_setShowsAutosaveButton: P0): R;
    showsAutosaveButton<R = boolean>(): R;
    _dumpLayer<R = unknown>(): R;
    _accessibilitySetTitleCellRemoved<R = void, P0 = boolean>(__accessibilitySetTitleCellRemoved: P0): R;
    _accessibilityTitleCellRemoved<R = boolean>(): R;
    _changeAllAttachmentsVisibleWithoutLogin<R = void>(): R;
    _changeAllAttachmentsFirstResponder<R = void>(): R;
    _changeAllAttachmentsMainState<R = void>(): R;
    _changeAllAttachmentsKeyState<R = void>(): R;
    _changeVisibleWithoutLogin<R = void>(): R;
    _changeFirstResponderToParentsFirstResponder<R = void>(): R;
    _changeMainState<R = void>(): R;
    _changeKeyState<R = void>(): R;
    _setSharesParentFirstResponder<R = void, P0 = boolean>(__setSharesParentFirstResponder: P0): R;
    _dropSharedFirstResponder<R = void>(): R;
    _sharesParentFirstResponder<R = boolean>(): R;
    _shouldAutoFlattenLayerTree<R = boolean>(): R;
    _setShouldAutoFlattenLayerTree<R = void, P0 = boolean>(__setShouldAutoFlattenLayerTree: P0): R;
    setCanHostLayersInWindowServer<R = void, P0 = boolean>(_setCanHostLayersInWindowServer: P0): R;
    canHostLayersInWindowServer<R = boolean>(): R;
    _resumeWindowServerLayerHosting<R = void>(): R;
    _suspendWindowServerLayerHosting<R = void>(): R;
    _hostsLayersInWindowServer<R = boolean>(): R;
    hostsLayersInWindowServer<R = boolean>(): R;
    accessibilitySizeOfChild<R = unknown, P0 = unknown>(_accessibilitySizeOfChild: P0): R;
    accessibilityPositionOfChild<R = unknown, P0 = unknown>(_accessibilityPositionOfChild: P0): R;
    accessibilityIsChildFocusable<R = boolean, P0 = unknown>(_accessibilityIsChildFocusable: P0): R;
    accessibilityHelpStringForChild<R = unknown, P0 = unknown>(_accessibilityHelpStringForChild: P0): R;
    accessibilityPostNotification<R = void, P0 = unknown>(_accessibilityPostNotification: P0): R;
    accessibilityTopLevelUIElementAttributeValueHelper<R = unknown>(): R;
    accessibilityWindowAttributeValueHelper<R = unknown>(): R;
    accessibilityIsChildOfApp<R = boolean>(): R;
    accessibilityWindowNumber<R = number>(): R;
    accessibilitySupportsOverriddenAttributes<R = boolean>(): R;
    accessibilityShouldUseUniqueId<R = boolean>(): R;
    accessibilityFocusedUIElement<R = unknown>(): R;
    accessibilityHitTest<R = unknown, P0 = cocoa.CGPoint>(_accessibilityHitTest: P0): R;
    _accessibilityViewCorrectedForFieldEditor<R = unknown, P0 = unknown>(__accessibilityViewCorrectedForFieldEditor: P0): R;
    accessibilityFocusRingBounds<R = cocoa.CGRect>(): R;
    accessibilityIsIgnored<R = boolean>(): R;
    accessibilityPerformAction<R = void, P0 = unknown>(_accessibilityPerformAction: P0): R;
    accessibilityActionDescription<R = unknown, P0 = unknown>(_accessibilityActionDescription: P0): R;
    accessibilityActionNames<R = unknown>(): R;
    accessibilitySetValue_forAttribute<R = void, P0 = unknown, P1 = unknown>(_accessibilitySetValue: P0, _forAttribute: P1): R;
    accessibilityIsAttributeSettable<R = boolean, P0 = unknown>(_accessibilityIsAttributeSettable: P0): R;
    accessibilityAttributeValue<R = unknown, P0 = unknown>(_accessibilityAttributeValue: P0): R;
    _localizedDescriptionForSectionIdentifier<R = unknown, P0 = unknown>(__localizedDescriptionForSectionIdentifier: P0): R;
    _closestElementToPosition_inElements<R = unknown, P0 = cocoa.CGPoint, P1 = unknown>(__closestElementToPosition: P0, _inElements: P1): R;
    _largestElementInElements<R = unknown, P0 = unknown>(__largestElementInElements: P0): R;
    _isSearchField<R = boolean, P0 = unknown>(__isSearchField: P0): R;
    _potentialCandidateKeyForSectionKey<R = unknown, P0 = unknown>(__potentialCandidateKeyForSectionKey: P0): R;
    _accessibilityFrameForElement<R = cocoa.CGRect, P0 = unknown>(__accessibilityFrameForElement: P0): R;
    _finalUpdateSectionResult_withCandidates_element_keys_allowMultiple<R = void, P0 = unknown, P1 = unknown, P2 = unknown, P3 = unknown, P4 = boolean>(__finalUpdateSectionResult: P0, _withCandidates: P1, _element: P2, _keys: P3, _allowMultiple: P4): R;
    _newSectionCandidatesForSearchElements_depth<R = unknown, P0 = unknown, P1 = number>(__newSectionCandidatesForSearchElements: P0, _depth: P1): R;
    _updateSectionSearchElements_keys_element<R = void, P0 = unknown, P1 = unknown, P2 = unknown>(__updateSectionSearchElements: P0, _keys: P1, _element: P2): R;
    _filterDownPotentialSectionResult_keys<R = void, P0 = unknown, P1 = unknown>(__filterDownPotentialSectionResult: P0, _keys: P1): R;
    _preliminaryUpdateSectionResult_element_keys<R = void, P0 = unknown, P1 = unknown, P2 = unknown>(__preliminaryUpdateSectionResult: P0, _element: P1, _keys: P2): R;
    _sectionsForElement_keys_depth_allowMultiple<R = unknown, P0 = unknown, P1 = unknown, P2 = number, P3 = boolean>(__sectionsForElement: P0, _keys: P1, _depth: P2, _allowMultiple: P3): R;
    _newAutoGeneratedSectionsWithSearchKeys_searchDepth_existingElements<R = unknown, P0 = unknown, P1 = number, P2 = unknown>(__newAutoGeneratedSectionsWithSearchKeys: P0, _searchDepth: P1, _existingElements: P2): R;
    accessibilityVisibleArea<R = number>(): R;
    accessibilityIsSectionsAttributeSettable<R = boolean>(): R;
    accessibilitySectionsAttribute<R = unknown>(): R;
    accessibilityAuditIssuesAttribute<R = unknown>(): R;
    accessibilityIsChildrenAttributeSettable<R = boolean>(): R;
    accessibilityChildrenAttribute<R = unknown>(): R;
    accessibilityChildrenInNavigationOrderAttribute<R = unknown>(): R;
    accessibilityIsModalAttributeSettable<R = boolean>(): R;
    accessibilityModalAttribute<R = unknown>(): R;
    accessibilityIsDocumentAttributeSettable<R = boolean>(): R;
    accessibilityDocumentAttribute<R = unknown>(): R;
    accessibilityIsCancelButtonAttributeSettable<R = boolean>(): R;
    accessibilityCancelButtonAttribute<R = unknown>(): R;
    accessibilityIsDefaultButtonAttributeSettable<R = boolean>(): R;
    accessibilityDefaultButtonAttribute<R = unknown>(): R;
    accessibilityIsGrowAreaAttributeSettable<R = boolean>(): R;
    accessibilityIsTitleUIElementAttributeSettable<R = boolean>(): R;
    accessibilityTitleUIElementAttribute<R = unknown>(): R;
    accessibilityIsProxyAttributeSettable<R = boolean>(): R;
    accessibilityProxyAttribute<R = unknown>(): R;
    accessibilitySetFullScreenAttribute<R = void, P0 = unknown>(_accessibilitySetFullScreenAttribute: P0): R;
    accessibilityIsFullScreenAttributeSettable<R = boolean>(): R;
    accessibilityFullScreenAttribute<R = unknown>(): R;
    accessibilityIsFullScreenButtonAttributeSettable<R = boolean>(): R;
    accessibilityFullScreenButtonAttribute<R = unknown>(): R;
    accessibilityIsToolbarButtonAttributeSettable<R = boolean>(): R;
    accessibilityToolbarButtonAttribute<R = unknown>(): R;
    accessibilityIsMinimizeButtonAttributeSettable<R = boolean>(): R;
    accessibilityMinimizeButtonAttribute<R = unknown>(): R;
    accessibilityIsZoomButtonAttributeSettable<R = boolean>(): R;
    accessibilityZoomButtonAttribute<R = unknown>(): R;
    accessibilityIsCloseButtonAttributeSettable<R = boolean>(): R;
    accessibilityCloseButtonAttribute<R = unknown>(): R;
    accessibilitySetMinimizedAttribute<R = void, P0 = unknown>(_accessibilitySetMinimizedAttribute: P0): R;
    accessibilityIsMinimizedAttributeSettable<R = boolean>(): R;
    accessibilityMinimizedAttribute<R = unknown>(): R;
    accessibilitySetMainAttribute<R = void, P0 = unknown>(_accessibilitySetMainAttribute: P0): R;
    accessibilityIsMainAttributeSettable<R = boolean>(): R;
    accessibilityMainAttribute<R = unknown>(): R;
    accessibilitySetSizeAttribute<R = void, P0 = unknown>(_accessibilitySetSizeAttribute: P0): R;
    accessibilityIsSizeAttributeSettable<R = boolean>(): R;
    accessibilitySizeAttribute<R = unknown>(): R;
    accessibilitySetPositionAttribute<R = void, P0 = unknown>(_accessibilitySetPositionAttribute: P0): R;
    accessibilityIsPositionAttributeSettable<R = boolean>(): R;
    accessibilityPositionAttribute<R = unknown>(): R;
    accessibilityIsParentAttributeSettable<R = boolean>(): R;
    accessibilityParentAttribute<R = unknown>(): R;
    _accessibilitySheetParent<R = unknown>(): R;
    accessibilityIsWindowAttributeSettable<R = boolean>(): R;
    accessibilityWindowAttribute<R = unknown>(): R;
    accessibilityIsFocusedAttributeSettable<R = boolean>(): R;
    accessibilityFocusedAttribute<R = unknown>(): R;
    accessibilityIsTitleAttributeSettable<R = boolean>(): R;
    accessibilityTitleAttribute<R = unknown>(): R;
    _accessibilityTitleCell<R = unknown>(): R;
    _accessibilityTitleRect<R = cocoa.CGRect>(): R;
    accessibilityIsSubroleAttributeSettable<R = boolean>(): R;
    accessibilitySubroleAttribute<R = unknown>(): R;
    _accessibilityIsModal<R = boolean>(): R;
    accessibilityIsRoleDescriptionAttributeSettable<R = boolean>(): R;
    accessibilityRoleDescriptionAttribute<R = unknown>(): R;
    accessibilityIsRoleAttributeSettable<R = boolean>(): R;
    accessibilityRoleAttribute<R = unknown>(): R;
    accessibilityAttributeNames<R = unknown>(): R;
    handleSaveScriptCommand<R = unknown, P0 = unknown>(_handleSaveScriptCommand: P0): R;
    handlePrintScriptCommand<R = unknown, P0 = unknown>(_handlePrintScriptCommand: P0): R;
    handleCloseScriptCommand<R = unknown, P0 = unknown>(_handleCloseScriptCommand: P0): R;
    objectSpecifier<R = unknown>(): R;
    setBoundsAsQDRect<R = void, P0 = unknown>(_setBoundsAsQDRect: P0): R;
    uniqueID<R = number>(): R;
    document<R = unknown>(): R;
    boundsAsQDRect<R = unknown>(): R;
    setIsZoomed<R = void, P0 = boolean>(_setIsZoomed: P0): R;
    setIsVisible<R = void, P0 = boolean>(_setIsVisible: P0): R;
    setIsMiniaturized<R = void, P0 = boolean>(_setIsMiniaturized: P0): R;
    _beginDraggingSessionWithItems_clipRect_event_source<R = unknown, P0 = unknown, P1 = cocoa.CGRect, P2 = unknown, P3 = unknown>(__beginDraggingSessionWithItems: P0, _clipRect: P1, _event: P2, _source: P3): R;
    dragImage_at_offset_event_pasteboard_source_slideBack<R = void, P0 = unknown, P1 = cocoa.CGPoint, P2 = cocoa.CGSize, P3 = unknown, P4 = unknown, P5 = unknown, P6 = boolean>(_dragImage: P0, _at: P1, _offset: P2, _event: P3, _pasteboard: P4, _source: P5, _slideBack: P6): R;
    updateDraggingItemsForDrag<R = void, P0 = unknown>(_updateDraggingItemsForDrag: P0): R;
    wantsPeriodicDraggingUpdates<R = boolean>(): R;
    draggingEnded<R = void, P0 = unknown>(_draggingEnded: P0): R;
    concludeDragOperation<R = void, P0 = unknown>(_concludeDragOperation: P0): R;
    performDragOperation<R = boolean, P0 = unknown>(_performDragOperation: P0): R;
    prepareForDragOperation<R = boolean, P0 = unknown>(_prepareForDragOperation: P0): R;
    draggingExited<R = void, P0 = unknown>(_draggingExited: P0): R;
    draggingUpdated<R = number, P0 = unknown>(_draggingUpdated: P0): R;
    draggingEntered<R = number, P0 = unknown>(_draggingEntered: P0): R;
    _findDragTargetFrom<R = unknown, P0 = unknown>(__findDragTargetFrom: P0): R;
    _dragTypes<R = unknown>(): R;
    unregisterDraggedTypes<R = void>(): R;
    _unregisterDragTypes<R = void>(): R;
    _registerDragTypesIfNeeded<R = unknown>(): R;
    _switchDragRegistrationToRemoteContext<R = void, P0 = number>(__switchDragRegistrationToRemoteContext: P0): R;
    _registerDragTypes<R = void, P0 = unknown>(__registerDragTypes: P0): R;
    _hasRegisteredForDragTypes<R = boolean>(): R;
    _registerDragTypesLater<R = void>(): R;
    registerForDraggedTypes<R = void, P0 = unknown>(_registerForDraggedTypes: P0): R;
    registeredDraggedTypes<R = unknown>(): R;
    _removeEventHandlers<R = void>(): R;
    _syncFrameMetrics<R = void>(): R;
    _removeCocoaWindowEventHandlersForCocoaSheetsAttachedToCarbonModalParent<R = void>(): R;
    _installCocoaWindowEventHandlersForCocoaSheetsAttachedToCarbonModalParent<R = void>(): R;
    _installCocoaWindowEventHandlers<R = void>(): R;
    _installCarbonWindowEventHandlers<R = void>(): R;
    _installRootMetricsHandler<R = void>(): R;
    _installCarbonAppDockHandlers<R = void>(): R;
    _updateEventMaskDueToEnableCursorRects<R = void>(): R;
    _updateEventMaskDueToDisableCursorRects<R = void>(): R;
    _updateEventMaskDueToInit<R = void>(): R;
    _updateEventMaskDueToCommonAwake<R = void>(): R;
    _updateEventMaskDueToOrderedOut<R = void>(): R;
    _updateEventMaskDueToBecomingKey<R = void>(): R;
    _updateEventMaskDueToResigningKey<R = void>(): R;
    _updateMouseMovedState<R = void>(): R;
    _setMouseMovedEventsEnabled<R = void, P0 = boolean>(__setMouseMovedEventsEnabled: P0): R;
    _removeMouseMovedListener<R = void, P0 = unknown>(__removeMouseMovedListener: P0): R;
    _addMouseMovedListener<R = void, P0 = unknown>(__addMouseMovedListener: P0): R;
    view_acceptsFirstMouseEvent_initialKeyWindow<R = boolean, P0 = unknown, P1 = unknown, P2 = unknown>(_view: P0, _acceptsFirstMouseEvent: P1, _initialKeyWindow: P2): R;
    _cancelActionIfCmdDot<R = string, P0 = unknown>(__cancelActionIfCmdDot: P0): R;
    _keyboardUIActionForEvent<R = string, P0 = unknown>(__keyboardUIActionForEvent: P0): R;
    _latchViewForScrollEvent<R = void, P0 = unknown>(__latchViewForScrollEvent: P0): R;
    _lmouseUpPending<R = boolean>(): R;
    _handleMouseDownEvent_isDelayedEvent<R = void, P0 = unknown, P1 = boolean>(__handleMouseDownEvent: P0, _isDelayedEvent: P1): R;
    _setWantsMouseMoveEventsInBackground<R = void, P0 = boolean>(__setWantsMouseMoveEventsInBackground: P0): R;
    _wantsMouseMoveEventsInBackground<R = boolean>(): R;
    _processKeyboardUIKey<R = boolean, P0 = unknown>(__processKeyboardUIKey: P0): R;
    _cancelKey<R = void, P0 = unknown>(__cancelKey: P0): R;
    _handleFocusToolbarHotKey<R = void, P0 = unknown>(__handleFocusToolbarHotKey: P0): R;
    _removeTouchListener<R = void, P0 = unknown>(__removeTouchListener: P0): R;
    _addTouchListener<R = void, P0 = unknown>(__addTouchListener: P0): R;
    _hasMouseMovedListeners<R = boolean>(): R;
    _reallySendEvent_isDelayedEvent<R = void, P0 = unknown, P1 = boolean>(__reallySendEvent: P0, _isDelayedEvent: P1): R;
    _lastRightHit<R = unknown>(): R;
    _lastLeftHit<R = unknown>(): R;
    _setEventMask<R = void, P0 = number>(__setEventMask: P0): R;
    cancelOperation<R = void, P0 = unknown>(_cancelOperation: P0): R;
    sendEvent<R = void, P0 = unknown>(_sendEvent: P0): R;
    mouseLocationOutsideOfEventStream<R = cocoa.CGPoint>(): R;
    postEvent_atStart<R = void, P0 = unknown, P1 = boolean>(_postEvent: P0, _atStart: P1): R;
    discardEventsMatchingMask_beforeEvent<R = void, P0 = number, P1 = unknown>(_discardEventsMatchingMask: P0, _beforeEvent: P1): R;
    ignoresMouseEvents<R = boolean>(): R;
    setIgnoresMouseEvents<R = void, P0 = boolean>(_setIgnoresMouseEvents: P0): R;
    acceptsMouseMovedEvents<R = boolean>(): R;
    setAcceptsMouseMovedEvents<R = void, P0 = boolean>(_setAcceptsMouseMovedEvents: P0): R;
    currentEvent<R = unknown>(): R;
    trackEventsMatchingMask_timeout_mode_handler<R = void, P0 = number, P1 = number, P2 = unknown, P3 = cocoa.CDUnknownBlockType>(_trackEventsMatchingMask: P0, _timeout: P1, _mode: P2, _handler: P3): R;
    nextEventMatchingMask_untilDate_inMode_dequeue<R = unknown, P0 = number, P1 = unknown, P2 = unknown, P3 = boolean>(_nextEventMatchingMask: P0, _untilDate: P1, _inMode: P2, _dequeue: P3): R;
    nextEventMatchingMask<R = unknown, P0 = number>(_nextEventMatchingMask: P0): R;
    _wasActiveBeforeCurrentEvent<R = boolean>(): R;
    _eventWasFiltered<R = void, P0 = unknown>(__eventWasFiltered: P0): R;
    _setIgnoresCurrentEvent<R = void, P0 = boolean>(__setIgnoresCurrentEvent: P0): R;
    _sendEventToGestureRecognizers_requireAcceptsFirstMouse<R = unknown, P0 = unknown, P1 = boolean>(__sendEventToGestureRecognizers: P0, _requireAcceptsFirstMouse: P1): R;
    _gestureRecognizersHaveDelayedEvents<R = boolean>(): R;
    _gatheringActiveGestureRecognizers<R = boolean>(): R;
    _activeGestureRecognizers<R = unknown>(): R;
    _gestureRecognizersStartingWithView_onEvent_requireAcceptsFirstMouse<R = unknown, P0 = unknown, P1 = unknown, P2 = boolean>(__gestureRecognizersStartingWithView: P0, _onEvent: P1, _requireAcceptsFirstMouse: P2): R;
    _removeActiveGestureRecognizer_withEvent<R = void, P0 = unknown, P1 = unknown>(__removeActiveGestureRecognizer: P0, _withEvent: P1): R;
    _firstResponderIvar<R = unknown>(): R;
    _setFirstResponderIvar<R = void, P0 = unknown>(__setFirstResponderIvar: P0): R;
    _firstResponderCanBeWeak<R = boolean>(): R;
    functionRow<R = unknown>(): R;
    _isSnapshotRestorationEnabled<R = boolean>(): R;
    enableSnapshotRestoration<R = void>(): R;
    disableSnapshotRestoration<R = void>(): R;
    _acquireNextMinimizationSeed<R = void>(): R;
    _minimizationSeed<R = number>(): R;
    _persistentStateTerminationGeneration<R = number>(): R;
    _invalidateRestorableStateOfContents<R = void>(): R;
    _shouldRecordPersistentState<R = boolean>(): R;
    _isConsideredOpenForPersistentState<R = boolean>(): R;
    restorationClass<R = unknown>(): R;
    setRestorationClass<R = void, P0 = unknown>(_setRestorationClass: P0): R;
    _setContentsHaveInvalidRestorableState<R = void, P0 = boolean>(__setContentsHaveInvalidRestorableState: P0): R;
    _contentsHaveInvalidRestorableState<R = boolean>(): R;
    _convertPointFromScreen<R = cocoa.CGPoint, P0 = cocoa.CGPoint>(__convertPointFromScreen: P0): R;
    visualizeConstraints<R = void, P0 = unknown>(_visualizeConstraints: P0): R;
    _updateConstraintVisualization<R = void>(): R;
    _teardownVisualizedConstraintsView<R = void>(): R;
    _visualizedConstraintsView<R = unknown>(): R;
    _frameForVisualizedConstraintsWindow<R = cocoa.CGRect, P0 = unknown>(__frameForVisualizedConstraintsWindow: P0): R;
    setRemoteUIElement<R = void, P0 = unknown>(_setRemoteUIElement: P0): R;
    remoteUIElement<R = unknown>(): R;
    accessibilityAddDeferredNotification<R = void, P0 = unknown>(_accessibilityAddDeferredNotification: P0): R;
    accessibilitySendDeferredNotifications<R = void>(): R;
    _validFrameForFrame_resizedFromEdge<R = cocoa.CGRect, P0 = cocoa.CGRect, P1 = number>(__validFrameForFrame: P0, _resizedFromEdge: P1): R;
    _commonValidFrameForResizeFrame_fromResizeEdge<R = cocoa.CGRect, P0 = cocoa.CGRect, P1 = number>(__commonValidFrameForResizeFrame: P0, _fromResizeEdge: P1): R;
    _allowsSizeSnapping<R = boolean>(): R;
    _unsnapFrameWithEvent<R = void, P0 = unknown>(__unsnapFrameWithEvent: P0): R;
    _setLiveResizedFrame_animated<R = void, P0 = cocoa.CGRect, P1 = boolean>(__setLiveResizedFrame: P0, _animated: P1): R;
    _snapSizeToFrame_withEvent<R = void, P0 = cocoa.CGRect, P1 = unknown>(__snapSizeToFrame: P0, _withEvent: P1): R;
    _resizeSetFrame_withEvent<R = void, P0 = cocoa.CGRect, P1 = unknown>(__resizeSetFrame: P0, _withEvent: P1): R;
    _shouldSnapSizeWhenResizing<R = boolean>(): R;
    _provideActuationFeedbackWithEvent<R = void, P0 = unknown>(__provideActuationFeedbackWithEvent: P0): R;
    _snapWindowSizeInDirection_withEvent<R = boolean, P0 = number, P1 = unknown>(__snapWindowSizeInDirection: P0, _withEvent: P1): R;
    _snapWindowSizeWithFrame_resizeDirection_state<R = cocoa.CGRect, P0 = cocoa.CGRect, P1 = number, P2 = unknown>(__snapWindowSizeWithFrame: P0, _resizeDirection: P1, _state: P2): R;
    _sizeSnappedFrameForOppositeEdge_frame_state<R = cocoa.CGRect, P0 = number, P1 = cocoa.CGRect, P2 = unknown>(__sizeSnappedFrameForOppositeEdge: P0, _frame: P1, _state: P2): R;
    _doScreenSizeSnappingFromResizedEdge_frame_state<R = cocoa.CGRect, P0 = number, P1 = cocoa.CGRect, P2 = unknown>(__doScreenSizeSnappingFromResizedEdge: P0, _frame: P1, _state: P2): R;
    _shouldDoScreenSizeSnappingFromResizedEdge_frame_state<R = boolean, P0 = number, P1 = cocoa.CGRect, P2 = unknown>(__shouldDoScreenSizeSnappingFromResizedEdge: P0, _frame: P1, _state: P2): R;
    _setFrameWidthDelta_resizingFromRight_frame<R = void, P0 = number, P1 = boolean, P2 = cocoa.CGRect>(__setFrameWidthDelta: P0, _resizingFromRight: P1, _frame: P2): R;
    _setFrameHeightDelta_resizingFromTop_frame<R = void, P0 = number, P1 = boolean, P2 = cocoa.CGRect>(__setFrameHeightDelta: P0, _resizingFromTop: P1, _frame: P2): R;
    _unsnapSizeFromFrame_fromEdge_state<R = cocoa.CGRect, P0 = cocoa.CGRect, P1 = number, P2 = unknown>(__unsnapSizeFromFrame: P0, _fromEdge: P1, _state: P2): R;
    _startSnappingToFrameTimerAfterDelay<R = void, P0 = number>(__startSnappingToFrameTimerAfterDelay: P0): R;
    _stopSnappingToFrameTimer<R = void>(): R;
    _doSnapToFrame<R = void>(): R;
    _frame_resizedFromEdge_withDelta_withEvent_withState<R = cocoa.CGRect, P0 = cocoa.CGRect, P1 = number, P2 = cocoa.CGSize, P3 = unknown, P4 = unknown>(__frame: P0, _resizedFromEdge: P1, _withDelta: P2, _withEvent: P3, _withState: P4): R;
    _isConsideredSheetForResizing<R = boolean>(): R;
    _resizingShouldSnapToWindows<R = boolean>(): R;
    _frame_resizedFromEdge_withDelta_withEvent<R = cocoa.CGRect, P0 = cocoa.CGRect, P1 = number, P2 = cocoa.CGSize, P3 = unknown>(__frame: P0, _resizedFromEdge: P1, _withDelta: P2, _withEvent: P3): R;
    _opaqueAspectDimensionForDimension_isHorizontal<R = number, P0 = number, P1 = boolean>(__opaqueAspectDimensionForDimension: P0, _isHorizontal: P1): R;
    _resizeWithEvent<R = void, P0 = unknown>(__resizeWithEvent: P0): R;
    liveResizeEdges<R = number>(): R;
    _attemptToSnapWindowSizeWithEvent<R = boolean, P0 = unknown>(__attemptToSnapWindowSizeWithEvent: P0): R;
    _shouldSnapSizeOnDoubleClick<R = boolean>(): R;
    _hitTestWithHysteresisCheck_forEvent_allowWindowDragging<R = unknown, P0 = cocoa.CGPoint, P1 = unknown, P2 = string>(__hitTestWithHysteresisCheck: P0, _forEvent: P1, _allowWindowDragging: P2): R;
    _scrollViewIntersectsSoutheastGrowCorner<R = boolean, P0 = unknown>(__scrollViewIntersectsSoutheastGrowCorner: P0): R;
    _windowResizeEventHandlingRectForRect<R = cocoa.CGRect, P0 = cocoa.CGRect>(__windowResizeEventHandlingRectForRect: P0): R;
    _getEdgeResizingRects_allowedEdges<R = void, P0 = cocoa.CGRect, P1 = number>(__getEdgeResizingRects: P0, _allowedEdges: P1): R;
    _getEdgeResizingRects<R = void, P0 = cocoa.CGRect>(__getEdgeResizingRects: P0): R;
    _getExteriorResizeEdgeThicknesses<R = void, P0 = number>(__getExteriorResizeEdgeThicknesses: P0): R;
    _getResizeEdgeAndCornerThicknesses<R = void, P0 = number>(__getResizeEdgeAndCornerThicknesses: P0): R;
    _allowsExteriorResizing<R = boolean>(): R;
    _resizableEdgesForGrowing_shrinking<R = number, P0 = number, P1 = number>(__resizableEdgesForGrowing: P0, _shrinking: P1): R;
    _hitTestInResizeRegionShouldReturnNil<R = boolean>(): R;
    _edgeResizingCursorUpdate_atLocation<R = boolean, P0 = unknown, P1 = cocoa.CGPoint>(__edgeResizingCursorUpdate: P0, _atLocation: P1): R;
    _resizeDirectionForMouseLocation<R = number, P0 = cocoa.CGPoint>(__resizeDirectionForMouseLocation: P0): R;
    _updateEdgeResizingTrackingAreas<R = boolean>(): R;
    _noteExteriorResizeMarginsMayHaveChanged<R = void>(): R;
    _noteAllowedResizeDirectionsMayHaveChanged<R = void>(): R;
    _cursorForResizeDirection<R = unknown, P0 = number>(__cursorForResizeDirection: P0): R;
    setUnsnappedFrame<R = void, P0 = cocoa.CGRect>(_setUnsnappedFrame: P0): R;
    unsnappedFrame<R = cocoa.CGRect>(): R;
    _updateLayoutDependentMetricsIfNeeded<R = void>(): R;
    _setViewsNeedUpdateLayoutDependentMetrics<R = void, P0 = boolean>(__setViewsNeedUpdateLayoutDependentMetrics: P0): R;
    constraintsDidChangeInEngine<R = void, P0 = unknown>(_constraintsDidChangeInEngine: P0): R;
    updateConstraintsIfNeeded<R = void>(): R;
    _updateConstraintsForEngineHostingViews<R = boolean, P0 = unknown>(__updateConstraintsForEngineHostingViews: P0): R;
    _viewsNeedUpdateConstraints<R = boolean>(): R;
    _setViewsNeedUpdateConstraints<R = void, P0 = boolean>(__setViewsNeedUpdateConstraints: P0): R;
    layoutIfNeeded<R = void>(): R;
    _layoutViewTree<R = void>(): R;
    _viewsNeedLayout<R = boolean>(): R;
    _setViewsNeedLayout<R = void, P0 = boolean>(__setViewsNeedLayout: P0): R;
    _redundantConstraints<R = unknown>(): R;
    _nsib_candidateRedundantConstraints<R = unknown>(): R;
    exerciseAmbiguityInLayout<R = void>(): R;
    hasAmbiguousLayout<R = boolean>(): R;
    _adjustedOriginAroundAnchorPointForSize<R = cocoa.CGPoint, P0 = cocoa.CGSize>(__adjustedOriginAroundAnchorPointForSize: P0): R;
    _changeWindowFrameFromConstraintsIfNecessary<R = void>(): R;
    _layout_anchorPointInEngine<R = cocoa.CGPoint>(): R;
    _layout_anchorPoint<R = cocoa.CGPoint>(): R;
    _invalidateWindowConstraintsMinMaxSizeCache<R = void>(): R;
    _fromConstraintsCalculateWindowMinSize_maxSize_allowDynamicLayout_changingOnlySlightly<R = void, P0 = cocoa.CGSize, P1 = cocoa.CGSize, P2 = boolean, P3 = boolean>(__fromConstraintsCalculateWindowMinSize: P0, _maxSize: P1, _allowDynamicLayout: P2, _changingOnlySlightly: P3): R;
    _fromConstraintsGetWindowMinSize_maxSize_allowDynamicLayout_changingOnlySlightly<R = void, P0 = cocoa.CGSize, P1 = cocoa.CGSize, P2 = boolean, P3 = boolean>(__fromConstraintsGetWindowMinSize: P0, _maxSize: P1, _allowDynamicLayout: P2, _changingOnlySlightly: P3): R;
    _getConstrainedWindowMinSize_maxSize_changingOnlySlightly<R = void, P0 = cocoa.CGSize, P1 = cocoa.CGSize, P2 = boolean>(__getConstrainedWindowMinSize: P0, _maxSize: P1, _changingOnlySlightly: P2): R;
    _getConstrainedWindowMinSize_maxSize<R = void, P0 = cocoa.CGSize, P1 = cocoa.CGSize>(__getConstrainedWindowMinSize: P0, _maxSize: P1): R;
    _fromConstraintsSetWindowFrame<R = void, P0 = cocoa.CGRect>(__fromConstraintsSetWindowFrame: P0): R;
    _validateSizeUsingConstraints<R = void, P0 = cocoa.CGSize>(__validateSizeUsingConstraints: P0): R;
    _setWindowResizeConstraintSize<R = void, P0 = cocoa.CGSize>(__setWindowResizeConstraintSize: P0): R;
    _refreshWindowResizeConstraintsWithSize<R = void, P0 = cocoa.CGSize>(__refreshWindowResizeConstraintsWithSize: P0): R;
    _discardWindowResizeConstraintsAndMarkAsNeedingUpdate<R = void>(): R;
    _windowResizeConstraints_borderViewChanged<R = void>(): R;
    _setWindowResizeConstraints<R = void, P0 = unknown>(__setWindowResizeConstraints: P0): R;
    _windowResizeConstraints<R = unknown>(): R;
    setAnchorAttribute_forOrientation<R = void, P0 = number, P1 = number>(_setAnchorAttribute: P0, _forOrientation: P1): R;
    anchorAttributeForOrientation<R = number, P0 = number>(_anchorAttributeForOrientation: P0): R;
    setAnchorItem_forOrientation<R = void, P0 = unknown, P1 = number>(_setAnchorItem: P0, _forOrientation: P1): R;
    anchorItemForOrientation<R = unknown, P0 = number>(_anchorItemForOrientation: P0): R;
    _layout_anchorInfo<R = unknown>(): R;
    _layout_defaultAnchorInfo<R = unknown>(): R;
    _layout_setPrimitiveAnchorInfo<R = void, P0 = unknown>(__layout_setPrimitiveAnchorInfo: P0): R;
    _layout_primitiveAnchorInfo<R = unknown>(): R;
    rebuildLayoutFromScratch<R = void>(): R;
    adjustLayoutForResolutionChangeToRetina<R = void, P0 = boolean>(_adjustLayoutForResolutionChangeToRetina: P0): R;
    _autolayoutEngagedSomewhereInWindow<R = void>(): R;
    _layoutEngineEngaging<R = unknown>(): R;
    _layoutEngineIfAvailable<R = unknown>(): R;
    _layoutEngine<R = unknown>(): R;
    _allowsLinearMaskOverlayForView<R = boolean, P0 = unknown>(__allowsLinearMaskOverlayForView: P0): R;
    _tileSpaceID<R = number>(): R;
    _parentSpaceID<R = number>(): R;
    _sendDockFullScreenTitle<R = void, P0 = unknown>(__sendDockFullScreenTitle: P0): R;
    _tilePreferredSize<R = cocoa.CGSize>(): R;
    _allowsTiling<R = boolean>(): R;
    _allowsFullScreen<R = boolean>(): R;
    _implicitlyAllowsFullScreenAuxiliary<R = boolean>(): R;
    _implicitlyAllowsFullScreenPrimary<R = boolean>(): R;
    _implicitlyDisallowTiling<R = boolean>(): R;
    _implicitlyTileable<R = boolean>(): R;
    _explicitlyAllowsFullScreenAuxiliary<R = boolean>(): R;
    _explicitlyAllowsFullScreenPrimary<R = boolean>(): R;
    _resolveAutomaticEnterFullScreenFlags<R = void>(): R;
    _shouldJoinActiveSpaceOnOrderIn<R = boolean>(): R;
    _shouldOpenInFullScreen<R = boolean>(): R;
    _windowWillBecomeFullScreen<R = boolean>(): R;
    _doFullScreenCleanupForOrderOut<R = void>(): R;
    _joinActiveFullScreenSpaceUsingPosition<R = boolean, P0 = number>(__joinActiveFullScreenSpaceUsingPosition: P0): R;
    _preferredPositionForTileJoin<R = number>(): R;
    _canJoinActiveFullScreenSpace<R = boolean>(): R;
    _createSiblingTileForWindow_preferredPositions_responseHandler<R = void, P0 = unknown, P1 = number, P2 = cocoa.CDUnknownBlockType>(__createSiblingTileForWindow: P0, _preferredPositions: P1, _responseHandler: P2): R;
    _queryCanAddSiblingTileForWindow_responseHandler<R = void, P0 = unknown, P1 = cocoa.CDUnknownBlockType>(__queryCanAddSiblingTileForWindow: P0, _responseHandler: P1): R;
    _fullScreenTileFrame<R = cocoa.CGRect>(): R;
    _fullScreenTileFillsScreen<R = boolean>(): R;
    _canEnterFullScreenOrTileMode<R = boolean>(): R;
    _canEnterTileMode<R = boolean>(): R;
    _wantsFullScreenTileDropTargets<R = boolean>(): R;
    _canEnterTileModeForBehavior<R = boolean, P0 = number>(__canEnterTileModeForBehavior: P0): R;
    canEnterFullScreenMode<R = boolean>(): R;
    setCanEnterFullScreenMode<R = void, P0 = boolean>(_setCanEnterFullScreenMode: P0): R;
    _refreshTilingConstraints<R = void, P0 = boolean>(__refreshTilingConstraints: P0): R;
    _needsTilingConstraintUpdate<R = boolean>(): R;
    _doUpdateTilingConstraintsImmediately<R = void>(): R;
    _actualMinFullScreenContentSize<R = cocoa.CGSize>(): R;
    _minFullScreenContentSizeForFrame<R = cocoa.CGSize, P0 = cocoa.CGRect>(__minFullScreenContentSizeForFrame: P0): R;
    _setTileMinSize_tileMaxSize_tilePreferredSize<R = void, P0 = cocoa.CGSize, P1 = cocoa.CGSize, P2 = cocoa.CGSize>(__setTileMinSize: P0, _tileMaxSize: P1, _tilePreferredSize: P2): R;
    _saveTilePreferredSize<R = void>(): R;
    _fullScreenPreferredJoinRatioDefaultsKey<R = unknown>(): R;
    _updateWindowIsFullScreenCapable<R = void>(): R;
    _fullScreenPresentationOptions<R = number>(): R;
    _setFullScreenPresentationOptions<R = void, P0 = number>(__setFullScreenPresentationOptions: P0): R;
    _markAppropriateForAutomaticFullScreenMode<R = void, P0 = boolean>(__markAppropriateForAutomaticFullScreenMode: P0): R;
    _positionsToolbarInExternalWindow<R = boolean>(): R;
    _reacquireToolbarViewFromFullScreenWindow<R = void>(): R;
    _surrenderToolbarViewForFullScreenWindow<R = void>(): R;
    _measuringMinFullScreenContentSize<R = boolean>(): R;
    _zoomButtonIsFullScreenButton<R = boolean>(): R;
    _setForceIsOnActiveSpace<R = void, P0 = boolean>(__setForceIsOnActiveSpace: P0): R;
    _supportsDockInitiatedFullScreen<R = boolean>(): R;
    exitFullScreenMode<R = void, P0 = unknown>(_exitFullScreenMode: P0): R;
    _maximizeTileToFillScreen<R = void>(): R;
    _enterAutomaticFullScreen<R = void>(): R;
    _enterFullScreenModeWithTransition<R = void, P0 = unknown>(__enterFullScreenModeWithTransition: P0): R;
    enterFullScreenMode<R = void, P0 = unknown>(_enterFullScreenMode: P0): R;
    _fullScreenStatusChanged<R = void>(): R;
    _cleanupToolbarFromFullScreen<R = void>(): R;
    _needsBehindWindowBlendingForFullScreenTitlebar<R = boolean>(): R;
    _enableFullScreenMenubarAutohiding<R = void>(): R;
    _disableFullScreenMenubarAutohiding<R = void>(): R;
    _isInFullScreenSpace<R = boolean>(): R;
    _willBeInFullScreenSpace<R = boolean>(): R;
    _shouldEnterFullScreenModeOnOrderIn<R = boolean>(): R;
    _someFullScreenInstanceHasSuppressedImplicitFullScreen<R = boolean>(): R;
    _didFailToEnterFullScreen<R = void>(): R;
    _didEnterFullScreen<R = void>(): R;
    _willEnterFullScreen<R = void>(): R;
    _didFailToExitFullScreen<R = void>(): R;
    _didExitFullScreen<R = void>(): R;
    _setFullScreenSavedFrameFromWindow<R = void, P0 = unknown>(__setFullScreenSavedFrameFromWindow: P0): R;
    _updateSavedFrameForFullScreen<R = void>(): R;
    _saveFrameBeforeFullScreen<R = void>(): R;
    _beginATUWindowDragForGreenButtonPressAtLocation<R = void, P0 = cocoa.CGPoint>(__beginATUWindowDragForGreenButtonPressAtLocation: P0): R;
    _currentDividerResizeDirections<R = unknown>(): R;
    _performDividerDragWithEvent_forResizeDirection<R = boolean, P0 = unknown, P1 = number>(__performDividerDragWithEvent: P0, _forResizeDirection: P1): R;
    _fullScreenTitlebarMinHeight<R = number>(): R;
    _ignoreForFullScreenTransitionSnapshot<R = boolean>(): R;
    _ignoreForFullScreenTransition<R = boolean>(): R;
    _inFullScreen<R = boolean>(): R;
    _updateFullScreenSpaceDockTitle<R = void>(): R;
    _fullScreenUpdateUserSpaceSavedFrameIfNeeded<R = void>(): R;
    _frameForFullScreenModeInRect<R = cocoa.CGRect, P0 = cocoa.CGRect>(__frameForFullScreenModeInRect: P0): R;
    _frameForFullScreenMode<R = cocoa.CGRect>(): R;
    _tileFrameForFullScreen<R = cocoa.CGRect>(): R;
    _cleanupAndRemoveFullScreenContentController<R = void>(): R;
    _createFullScreenContentControllerIfNeeded<R = void>(): R;
    _fullScreenContentController<R = unknown>(): R;
    _canQuitQuietlyAndSafelyWithOptionalExplanation<R = boolean, P0 = unknown>(__canQuitQuietlyAndSafelyWithOptionalExplanation: P0): R;
    _canAutoQuitQuietlyAndSafelyWithOptionalExplanation<R = boolean, P0 = unknown>(__canAutoQuitQuietlyAndSafelyWithOptionalExplanation: P0): R;
    hasColorSensitiveUI<R = boolean>(): R;
    setHasColorSensitiveUI<R = void, P0 = boolean>(_v: P0): R;
    _cgsWindow<R = cocoa.NSCGSWindow>(): R;
    tabGroup<R = cocoa.NSWindowTabGroup>(): R;
    tabbedWindows<R = cocoa.NSArray>(): R;
    windowTitlebarLayoutDirection<R = number>(): R;
    accessibilityParent<R = unknown>(): R;
    setAccessibilityParent<R = void, P0 = unknown>(_v: P0): R;
    accessibilityFrame<R = cocoa.CGRect>(): R;
    setAccessibilityFrame<R = void, P0 = cocoa.CGRect>(_v: P0): R;
    titlebarAppearsTransparent<R = boolean>(): R;
    setTitlebarAppearsTransparent<R = void, P0 = boolean>(_v: P0): R;
    titleVisibility<R = number>(): R;
    setTitleVisibility<R = void, P0 = number>(_v: P0): R;
    contentViewController<R = cocoa.NSViewController>(): R;
    setContentViewController<R = void, P0 = cocoa.NSViewController>(_v: P0): R;
    appearanceSource<R = cocoa.NSAppearanceCustomization>(): R;
    setAppearanceSource<R = void, P0 = cocoa.NSAppearanceCustomization>(_v: P0): R;
    effectiveAppearance<R = cocoa.NSAppearance>(): R;
    appearance<R = cocoa.NSAppearance>(): R;
    setAppearance<R = void, P0 = cocoa.NSAppearance>(_v: P0): R;
    identifier<R = cocoa.NSString>(): R;
    setIdentifier<R = void, P0 = cocoa.NSString>(_v: P0): R;
    colorSpace<R = cocoa.NSColorSpace>(): R;
    setColorSpace<R = void, P0 = cocoa.NSColorSpace>(_v: P0): R;
    allowsConcurrentViewDrawing<R = boolean>(): R;
    setAllowsConcurrentViewDrawing<R = void, P0 = boolean>(_v: P0): R;
    sharingType<R = number>(): R;
    setSharingType<R = void, P0 = number>(_v: P0): R;
    animations<R = cocoa.NSDictionary>(): R;
    setAnimations<R = void, P0 = cocoa.NSDictionary>(_v: P0): R;
    backingScaleFactor<R = number>(): R;
    parentWindow<R = cocoa.NSWindow>(): R;
    setParentWindow<R = void, P0 = cocoa.NSWindow>(_v: P0): R;
    childWindows<R = cocoa.NSArray>(): R;
    sheetParent<R = cocoa.NSWindow>(): R;
    sheet<R = boolean>(): R;
    attachedSheet<R = cocoa.NSWindow>(): R;
    sheets<R = cocoa.NSArray>(): R;
    alphaValue<R = number>(): R;
    setAlphaValue<R = void, P0 = number>(_v: P0): R;
    opaque<R = boolean>(): R;
    setOpaque<R = void, P0 = boolean>(_v: P0): R;
    maxFullScreenContentSize<R = cocoa.CGSize>(): R;
    setMaxFullScreenContentSize<R = void, P0 = cocoa.CGSize>(_v: P0): R;
    minFullScreenContentSize<R = cocoa.CGSize>(): R;
    setMinFullScreenContentSize<R = void, P0 = cocoa.CGSize>(_v: P0): R;
    contentMaxSize<R = cocoa.CGSize>(): R;
    setContentMaxSize<R = void, P0 = cocoa.CGSize>(_v: P0): R;
    contentMinSize<R = cocoa.CGSize>(): R;
    setContentMinSize<R = void, P0 = cocoa.CGSize>(_v: P0): R;
    maxSize<R = cocoa.CGSize>(): R;
    setMaxSize<R = void, P0 = cocoa.CGSize>(_v: P0): R;
    minSize<R = cocoa.CGSize>(): R;
    setMinSize<R = void, P0 = cocoa.CGSize>(_v: P0): R;
    hasShadow<R = boolean>(): R;
    setHasShadow<R = void, P0 = boolean>(_v: P0): R;
    screen<R = cocoa.NSScreen>(): R;
    deviceDescription<R = cocoa.NSDictionary>(): R;
    deepestScreen<R = cocoa.NSScreen>(): R;
    frameAutosaveName<R = cocoa.NSString>(): R;
    stringWithSavedFrame<R = cocoa.NSString>(): R;
    preservesContentDuringLiveResize<R = boolean>(): R;
    setPreservesContentDuringLiveResize<R = void, P0 = boolean>(_v: P0): R;
    inLiveResize<R = boolean>(): R;
    allowsToolTipsWhenApplicationIsInactive<R = boolean>(): R;
    setAllowsToolTipsWhenApplicationIsInactive<R = void, P0 = boolean>(_v: P0): R;
    collectionBehavior<R = number>(): R;
    setCollectionBehavior<R = void, P0 = number>(_v: P0): R;
    onActiveSpace<R = boolean>(): R;
    canBecomeVisibleWithoutLogin<R = boolean>(): R;
    setCanBecomeVisibleWithoutLogin<R = void, P0 = boolean>(_v: P0): R;
    preventsApplicationTerminationWhenModal<R = boolean>(): R;
    setPreventsApplicationTerminationWhenModal<R = void, P0 = boolean>(_v: P0): R;
    worksWhenModal<R = boolean>(): R;
    canBecomeMainWindow<R = boolean>(): R;
    canBecomeKeyWindow<R = boolean>(): R;
    mainWindow<R = boolean>(): R;
    keyWindow<R = boolean>(): R;
    visible<R = boolean>(): R;
    documentEdited<R = boolean>(): R;
    setDocumentEdited<R = void, P0 = boolean>(_v: P0): R;
    dockTile<R = cocoa.NSDockTile>(): R;
    miniwindowTitle<R = cocoa.NSString>(): R;
    setMiniwindowTitle<R = void, P0 = cocoa.NSString>(_v: P0): R;
    miniwindowImage<R = cocoa.NSImage>(): R;
    setMiniwindowImage<R = void, P0 = cocoa.NSImage>(_v: P0): R;
    canHide<R = boolean>(): R;
    setCanHide<R = void, P0 = boolean>(_v: P0): R;
    level<R = number>(): R;
    setLevel<R = void, P0 = number>(_v: P0): R;
    displaysWhenScreenProfileChanges<R = boolean>(): R;
    setDisplaysWhenScreenProfileChanges<R = void, P0 = boolean>(_v: P0): R;
    depthLimit<R = number>(): R;
    setDepthLimit<R = void, P0 = number>(_v: P0): R;
    hasDynamicDepthLimit<R = boolean>(): R;
    hidesOnDeactivate<R = boolean>(): R;
    setHidesOnDeactivate<R = void, P0 = boolean>(_v: P0): R;
    movable<R = boolean>(): R;
    setMovable<R = void, P0 = boolean>(_v: P0): R;
    movableByWindowBackground<R = boolean>(): R;
    setMovableByWindowBackground<R = void, P0 = boolean>(_v: P0): R;
    backgroundColor<R = cocoa.NSColor>(): R;
    setBackgroundColor<R = void, P0 = cocoa.NSColor>(_v: P0): R;
    zoomed<R = boolean>(): R;
    miniaturized<R = boolean>(): R;
    releasedWhenClosed<R = boolean>(): R;
    setReleasedWhenClosed<R = void, P0 = boolean>(_v: P0): R;
    animationBehavior<R = number>(): R;
    setAnimationBehavior<R = void, P0 = number>(_v: P0): R;
    resizeFlags<R = number>(): R;
    showsToolbarButton<R = boolean>(): R;
    setShowsToolbarButton<R = void, P0 = boolean>(_v: P0): R;
    toolbar<R = cocoa.NSToolbar>(): R;
    setToolbar<R = void, P0 = cocoa.NSToolbar>(_v: P0): R;
    autorecalculatesKeyViewLoop<R = boolean>(): R;
    setAutorecalculatesKeyViewLoop<R = void, P0 = boolean>(_v: P0): R;
    defaultButtonCell<R = cocoa.NSButtonCell>(): R;
    setDefaultButtonCell<R = void, P0 = cocoa.NSButtonCell>(_v: P0): R;
    initialFirstResponder<R = cocoa.NSView>(): R;
    setInitialFirstResponder<R = void, P0 = cocoa.NSView>(_v: P0): R;
    keyViewSelectionDirection<R = number>(): R;
    firstResponder<R = cocoa.NSResponder>(): R;
    viewsNeedDisplay<R = boolean>(): R;
    setViewsNeedDisplay<R = void, P0 = boolean>(_v: P0): R;
    styleMask<R = number>(): R;
    setStyleMask<R = void, P0 = number>(_v: P0): R;
    contentAspectRatio<R = cocoa.CGSize>(): R;
    setContentAspectRatio<R = void, P0 = cocoa.CGSize>(_v: P0): R;
    contentResizeIncrements<R = cocoa.CGSize>(): R;
    setContentResizeIncrements<R = void, P0 = cocoa.CGSize>(_v: P0): R;
    aspectRatio<R = cocoa.CGSize>(): R;
    setAspectRatio<R = void, P0 = cocoa.CGSize>(_v: P0): R;
    resizeIncrements<R = cocoa.CGSize>(): R;
    setResizeIncrements<R = void, P0 = cocoa.CGSize>(_v: P0): R;
    frame<R = cocoa.CGRect>(): R;
    contentLayoutGuide<R = unknown>(): R;
    contentLayoutRect<R = cocoa.CGRect>(): R;
    titlebarAccessoryViewControllers<R = cocoa.NSArray>(): R;
    setTitlebarAccessoryViewControllers<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    windowNumber<R = number>(): R;
    delegate<R = cocoa.NSWindowDelegate>(): R;
    setDelegate<R = void, P0 = cocoa.NSWindowDelegate>(_v: P0): R;
    contentView<R = cocoa.NSView>(): R;
    setContentView<R = void, P0 = cocoa.NSView>(_v: P0): R;
    representedFilename<R = cocoa.NSString>(): R;
    setRepresentedFilename<R = void, P0 = cocoa.NSString>(_v: P0): R;
    representedURL<R = cocoa.NSURL>(): R;
    setRepresentedURL<R = void, P0 = cocoa.NSURL>(_v: P0): R;
    title<R = cocoa.NSString>(): R;
    setTitle<R = void, P0 = cocoa.NSString>(_v: P0): R;
    excludedFromWindowsMenu<R = boolean>(): R;
    setExcludedFromWindowsMenu<R = void, P0 = boolean>(_v: P0): R;
    backingType<R = number>(): R;
    setBackingType<R = void, P0 = number>(_v: P0): R;
    description<R = cocoa.NSString>(): R;
    _contextForLayerHosting<R = cocoa.CAContext>(): R;
    _functionRowWindow<R = boolean>(): R;
    occlusionState<R = number>(): R;
    windowController<R = cocoa.NSWindowController>(): R;
    setWindowController<R = void, P0 = cocoa.NSWindowController>(_v: P0): R;
    _beforeTabPickerResponder<R = cocoa.NSResponder>(): R;
    set_beforeTabPickerResponder<R = void, P0 = cocoa.NSResponder>(_v: P0): R;
    _tabBarItem<R = cocoa.NSTabBarItem>(): R;
    tab<R = cocoa.NSWindowTab>(): R;
    _windowStackController<R = cocoa.NSWindowStackController>(): R;
    set_windowStackController<R = void, P0 = cocoa.NSWindowStackController>(_v: P0): R;
    _tabBarAccessoryViewController<R = cocoa.NSTitlebarAccessoryViewController>(): R;
    set_tabBarAccessoryViewController<R = void, P0 = cocoa.NSTitlebarAccessoryViewController>(_v: P0): R;
    tabbingMode<R = number>(): R;
    setTabbingMode<R = void, P0 = number>(_v: P0): R;
    tabbingIdentifier<R = cocoa.NSString>(): R;
    setTabbingIdentifier<R = void, P0 = cocoa.NSString>(_v: P0): R;
    tabOverviewVisible<R = boolean>(): R;
    drawers<R = cocoa.NSArray>(): R;
    windowRef<R = void>(): R;
    allowsInteriorShadow<R = boolean>(): R;
    timeMachineDelegate<R = unknown>(): R;
    setTimeMachineDelegate<R = void, P0 = unknown>(_v: P0): R;
    orderedIndex<R = number>(): R;
    setOrderedIndex<R = void, P0 = number>(_v: P0): R;
    zoomable<R = boolean>(): R;
    resizable<R = boolean>(): R;
    modalPanel<R = boolean>(): R;
    miniaturizable<R = boolean>(): R;
    floatingPanel<R = boolean>(): R;
    hasTitleBar<R = boolean>(): R;
    hasCloseBox<R = boolean>(): R;
    _effectiveAppearanceParent<R = cocoa.NSAppearanceCustomization>(): R;
    accessibilityActivationPoint<R = cocoa.CGPoint>(): R;
    setAccessibilityActivationPoint<R = void, P0 = cocoa.CGPoint>(_v: P0): R;
    accessibilityAllowedValues<R = cocoa.NSArray>(): R;
    setAccessibilityAllowedValues<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityAlternateUIVisible<R = boolean>(): R;
    setAccessibilityAlternateUIVisible<R = void, P0 = boolean>(_v: P0): R;
    accessibilityApplicationFocusedUIElement<R = unknown>(): R;
    setAccessibilityApplicationFocusedUIElement<R = void, P0 = unknown>(_v: P0): R;
    accessibilityCancelButton<R = unknown>(): R;
    setAccessibilityCancelButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityChildren<R = cocoa.NSArray>(): R;
    setAccessibilityChildren<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityChildrenInNavigationOrder<R = cocoa.NSArray>(): R;
    setAccessibilityChildrenInNavigationOrder<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityClearButton<R = unknown>(): R;
    setAccessibilityClearButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityCloseButton<R = unknown>(): R;
    setAccessibilityCloseButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityColumnCount<R = number>(): R;
    setAccessibilityColumnCount<R = void, P0 = number>(_v: P0): R;
    accessibilityColumnHeaderUIElements<R = cocoa.NSArray>(): R;
    setAccessibilityColumnHeaderUIElements<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityColumnIndexRange<R = cocoa._NSRange>(): R;
    setAccessibilityColumnIndexRange<R = void, P0 = cocoa._NSRange>(_v: P0): R;
    accessibilityColumnTitles<R = cocoa.NSArray>(): R;
    setAccessibilityColumnTitles<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityColumns<R = cocoa.NSArray>(): R;
    setAccessibilityColumns<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityContents<R = cocoa.NSArray>(): R;
    setAccessibilityContents<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityCriticalValue<R = unknown>(): R;
    setAccessibilityCriticalValue<R = void, P0 = unknown>(_v: P0): R;
    accessibilityCustomActions<R = cocoa.NSArray>(): R;
    setAccessibilityCustomActions<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityCustomRotors<R = cocoa.NSArray>(): R;
    setAccessibilityCustomRotors<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityDecrementButton<R = unknown>(): R;
    setAccessibilityDecrementButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityDefaultButton<R = unknown>(): R;
    setAccessibilityDefaultButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityDisclosed<R = boolean>(): R;
    setAccessibilityDisclosed<R = void, P0 = boolean>(_v: P0): R;
    accessibilityDisclosedByRow<R = unknown>(): R;
    setAccessibilityDisclosedByRow<R = void, P0 = unknown>(_v: P0): R;
    accessibilityDisclosedRows<R = unknown>(): R;
    setAccessibilityDisclosedRows<R = void, P0 = unknown>(_v: P0): R;
    accessibilityDisclosureLevel<R = number>(): R;
    setAccessibilityDisclosureLevel<R = void, P0 = number>(_v: P0): R;
    accessibilityDocument<R = cocoa.NSString>(): R;
    setAccessibilityDocument<R = void, P0 = cocoa.NSString>(_v: P0): R;
    accessibilityEdited<R = boolean>(): R;
    setAccessibilityEdited<R = void, P0 = boolean>(_v: P0): R;
    accessibilityElement<R = boolean>(): R;
    setAccessibilityElement<R = void, P0 = boolean>(_v: P0): R;
    accessibilityEnabled<R = boolean>(): R;
    setAccessibilityEnabled<R = void, P0 = boolean>(_v: P0): R;
    accessibilityExpanded<R = boolean>(): R;
    setAccessibilityExpanded<R = void, P0 = boolean>(_v: P0): R;
    accessibilityExtrasMenuBar<R = unknown>(): R;
    setAccessibilityExtrasMenuBar<R = void, P0 = unknown>(_v: P0): R;
    accessibilityFilename<R = cocoa.NSString>(): R;
    setAccessibilityFilename<R = void, P0 = cocoa.NSString>(_v: P0): R;
    accessibilityFocused<R = boolean>(): R;
    setAccessibilityFocused<R = void, P0 = boolean>(_v: P0): R;
    accessibilityFocusedWindow<R = unknown>(): R;
    setAccessibilityFocusedWindow<R = void, P0 = unknown>(_v: P0): R;
    accessibilityFrontmost<R = boolean>(): R;
    setAccessibilityFrontmost<R = void, P0 = boolean>(_v: P0): R;
    accessibilityFullScreenButton<R = unknown>(): R;
    setAccessibilityFullScreenButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityGrowArea<R = unknown>(): R;
    setAccessibilityGrowArea<R = void, P0 = unknown>(_v: P0): R;
    accessibilityHandles<R = cocoa.NSArray>(): R;
    setAccessibilityHandles<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityHeader<R = unknown>(): R;
    setAccessibilityHeader<R = void, P0 = unknown>(_v: P0): R;
    accessibilityHelp<R = cocoa.NSString>(): R;
    setAccessibilityHelp<R = void, P0 = cocoa.NSString>(_v: P0): R;
    accessibilityHidden<R = boolean>(): R;
    setAccessibilityHidden<R = void, P0 = boolean>(_v: P0): R;
    accessibilityHorizontalScrollBar<R = unknown>(): R;
    setAccessibilityHorizontalScrollBar<R = void, P0 = unknown>(_v: P0): R;
    accessibilityHorizontalUnitDescription<R = cocoa.NSString>(): R;
    setAccessibilityHorizontalUnitDescription<R = void, P0 = cocoa.NSString>(_v: P0): R;
    accessibilityHorizontalUnits<R = number>(): R;
    setAccessibilityHorizontalUnits<R = void, P0 = number>(_v: P0): R;
    accessibilityIdentifier<R = cocoa.NSString>(): R;
    setAccessibilityIdentifier<R = void, P0 = cocoa.NSString>(_v: P0): R;
    accessibilityIncrementButton<R = unknown>(): R;
    setAccessibilityIncrementButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityIndex<R = number>(): R;
    setAccessibilityIndex<R = void, P0 = number>(_v: P0): R;
    accessibilityInsertionPointLineNumber<R = number>(): R;
    setAccessibilityInsertionPointLineNumber<R = void, P0 = number>(_v: P0): R;
    accessibilityLabel<R = cocoa.NSString>(): R;
    setAccessibilityLabel<R = void, P0 = cocoa.NSString>(_v: P0): R;
    accessibilityLabelUIElements<R = cocoa.NSArray>(): R;
    setAccessibilityLabelUIElements<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityLabelValue<R = number>(): R;
    setAccessibilityLabelValue<R = void, P0 = number>(_v: P0): R;
    accessibilityLinkedUIElements<R = cocoa.NSArray>(): R;
    setAccessibilityLinkedUIElements<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityMain<R = boolean>(): R;
    setAccessibilityMain<R = void, P0 = boolean>(_v: P0): R;
    accessibilityMainWindow<R = unknown>(): R;
    setAccessibilityMainWindow<R = void, P0 = unknown>(_v: P0): R;
    accessibilityMarkerGroupUIElement<R = unknown>(): R;
    setAccessibilityMarkerGroupUIElement<R = void, P0 = unknown>(_v: P0): R;
    accessibilityMarkerTypeDescription<R = cocoa.NSString>(): R;
    setAccessibilityMarkerTypeDescription<R = void, P0 = cocoa.NSString>(_v: P0): R;
    accessibilityMarkerUIElements<R = cocoa.NSArray>(): R;
    setAccessibilityMarkerUIElements<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityMarkerValues<R = unknown>(): R;
    setAccessibilityMarkerValues<R = void, P0 = unknown>(_v: P0): R;
    accessibilityMaxValue<R = unknown>(): R;
    setAccessibilityMaxValue<R = void, P0 = unknown>(_v: P0): R;
    accessibilityMenuBar<R = unknown>(): R;
    setAccessibilityMenuBar<R = void, P0 = unknown>(_v: P0): R;
    accessibilityMinValue<R = unknown>(): R;
    setAccessibilityMinValue<R = void, P0 = unknown>(_v: P0): R;
    accessibilityMinimizeButton<R = unknown>(): R;
    setAccessibilityMinimizeButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityMinimized<R = boolean>(): R;
    setAccessibilityMinimized<R = void, P0 = boolean>(_v: P0): R;
    accessibilityModal<R = boolean>(): R;
    setAccessibilityModal<R = void, P0 = boolean>(_v: P0): R;
    accessibilityNextContents<R = cocoa.NSArray>(): R;
    setAccessibilityNextContents<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityNumberOfCharacters<R = number>(): R;
    setAccessibilityNumberOfCharacters<R = void, P0 = number>(_v: P0): R;
    accessibilityOrderedByRow<R = boolean>(): R;
    setAccessibilityOrderedByRow<R = void, P0 = boolean>(_v: P0): R;
    accessibilityOrientation<R = number>(): R;
    setAccessibilityOrientation<R = void, P0 = number>(_v: P0): R;
    accessibilityOverflowButton<R = unknown>(): R;
    setAccessibilityOverflowButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityPlaceholderValue<R = cocoa.NSString>(): R;
    setAccessibilityPlaceholderValue<R = void, P0 = cocoa.NSString>(_v: P0): R;
    accessibilityPreviousContents<R = cocoa.NSArray>(): R;
    setAccessibilityPreviousContents<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityProtectedContent<R = boolean>(): R;
    setAccessibilityProtectedContent<R = void, P0 = boolean>(_v: P0): R;
    accessibilityProxy<R = unknown>(): R;
    setAccessibilityProxy<R = void, P0 = unknown>(_v: P0): R;
    accessibilityRequired<R = boolean>(): R;
    setAccessibilityRequired<R = void, P0 = boolean>(_v: P0): R;
    accessibilityRole<R = cocoa.NSString>(): R;
    setAccessibilityRole<R = void, P0 = cocoa.NSString>(_v: P0): R;
    accessibilityRoleDescription<R = cocoa.NSString>(): R;
    setAccessibilityRoleDescription<R = void, P0 = cocoa.NSString>(_v: P0): R;
    accessibilityRowCount<R = number>(): R;
    setAccessibilityRowCount<R = void, P0 = number>(_v: P0): R;
    accessibilityRowHeaderUIElements<R = cocoa.NSArray>(): R;
    setAccessibilityRowHeaderUIElements<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityRowIndexRange<R = cocoa._NSRange>(): R;
    setAccessibilityRowIndexRange<R = void, P0 = cocoa._NSRange>(_v: P0): R;
    accessibilityRows<R = cocoa.NSArray>(): R;
    setAccessibilityRows<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityRulerMarkerType<R = number>(): R;
    setAccessibilityRulerMarkerType<R = void, P0 = number>(_v: P0): R;
    accessibilitySearchButton<R = unknown>(): R;
    setAccessibilitySearchButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilitySearchMenu<R = unknown>(): R;
    setAccessibilitySearchMenu<R = void, P0 = unknown>(_v: P0): R;
    accessibilitySelected<R = boolean>(): R;
    setAccessibilitySelected<R = void, P0 = boolean>(_v: P0): R;
    accessibilitySelectedCells<R = cocoa.NSArray>(): R;
    setAccessibilitySelectedCells<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilitySelectedChildren<R = cocoa.NSArray>(): R;
    setAccessibilitySelectedChildren<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilitySelectedColumns<R = cocoa.NSArray>(): R;
    setAccessibilitySelectedColumns<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilitySelectedRows<R = cocoa.NSArray>(): R;
    setAccessibilitySelectedRows<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilitySelectedText<R = cocoa.NSString>(): R;
    setAccessibilitySelectedText<R = void, P0 = cocoa.NSString>(_v: P0): R;
    accessibilitySelectedTextRange<R = cocoa._NSRange>(): R;
    setAccessibilitySelectedTextRange<R = void, P0 = cocoa._NSRange>(_v: P0): R;
    accessibilitySelectedTextRanges<R = cocoa.NSArray>(): R;
    setAccessibilitySelectedTextRanges<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityServesAsTitleForUIElements<R = cocoa.NSArray>(): R;
    setAccessibilityServesAsTitleForUIElements<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilitySharedCharacterRange<R = cocoa._NSRange>(): R;
    setAccessibilitySharedCharacterRange<R = void, P0 = cocoa._NSRange>(_v: P0): R;
    accessibilitySharedFocusElements<R = cocoa.NSArray>(): R;
    setAccessibilitySharedFocusElements<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilitySharedTextUIElements<R = cocoa.NSArray>(): R;
    setAccessibilitySharedTextUIElements<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityShownMenu<R = unknown>(): R;
    setAccessibilityShownMenu<R = void, P0 = unknown>(_v: P0): R;
    accessibilitySortDirection<R = number>(): R;
    setAccessibilitySortDirection<R = void, P0 = number>(_v: P0): R;
    accessibilitySplitters<R = cocoa.NSArray>(): R;
    setAccessibilitySplitters<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilitySubrole<R = cocoa.NSString>(): R;
    setAccessibilitySubrole<R = void, P0 = cocoa.NSString>(_v: P0): R;
    accessibilityTabs<R = cocoa.NSArray>(): R;
    setAccessibilityTabs<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityTitle<R = cocoa.NSString>(): R;
    setAccessibilityTitle<R = void, P0 = cocoa.NSString>(_v: P0): R;
    accessibilityTitleUIElement<R = unknown>(): R;
    setAccessibilityTitleUIElement<R = void, P0 = unknown>(_v: P0): R;
    accessibilityToolbarButton<R = unknown>(): R;
    setAccessibilityToolbarButton<R = void, P0 = unknown>(_v: P0): R;
    accessibilityTopLevelUIElement<R = unknown>(): R;
    setAccessibilityTopLevelUIElement<R = void, P0 = unknown>(_v: P0): R;
    accessibilityURL<R = cocoa.NSURL>(): R;
    setAccessibilityURL<R = void, P0 = cocoa.NSURL>(_v: P0): R;
    accessibilityUnitDescription<R = cocoa.NSString>(): R;
    setAccessibilityUnitDescription<R = void, P0 = cocoa.NSString>(_v: P0): R;
    accessibilityUnits<R = number>(): R;
    setAccessibilityUnits<R = void, P0 = number>(_v: P0): R;
    accessibilityValue<R = unknown>(): R;
    setAccessibilityValue<R = void, P0 = unknown>(_v: P0): R;
    accessibilityValueDescription<R = cocoa.NSString>(): R;
    setAccessibilityValueDescription<R = void, P0 = cocoa.NSString>(_v: P0): R;
    accessibilityVerticalScrollBar<R = unknown>(): R;
    setAccessibilityVerticalScrollBar<R = void, P0 = unknown>(_v: P0): R;
    accessibilityVerticalUnitDescription<R = cocoa.NSString>(): R;
    setAccessibilityVerticalUnitDescription<R = void, P0 = cocoa.NSString>(_v: P0): R;
    accessibilityVerticalUnits<R = number>(): R;
    setAccessibilityVerticalUnits<R = void, P0 = number>(_v: P0): R;
    accessibilityVisibleCells<R = cocoa.NSArray>(): R;
    setAccessibilityVisibleCells<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityVisibleCharacterRange<R = cocoa._NSRange>(): R;
    setAccessibilityVisibleCharacterRange<R = void, P0 = cocoa._NSRange>(_v: P0): R;
    accessibilityVisibleChildren<R = cocoa.NSArray>(): R;
    setAccessibilityVisibleChildren<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityVisibleColumns<R = cocoa.NSArray>(): R;
    setAccessibilityVisibleColumns<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityVisibleRows<R = cocoa.NSArray>(): R;
    setAccessibilityVisibleRows<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityWarningValue<R = unknown>(): R;
    setAccessibilityWarningValue<R = void, P0 = unknown>(_v: P0): R;
    accessibilityWindow<R = unknown>(): R;
    setAccessibilityWindow<R = void, P0 = unknown>(_v: P0): R;
    accessibilityWindows<R = cocoa.NSArray>(): R;
    setAccessibilityWindows<R = void, P0 = cocoa.NSArray>(_v: P0): R;
    accessibilityZoomButton<R = unknown>(): R;
    setAccessibilityZoomButton<R = void, P0 = unknown>(_v: P0): R;
    debugDescription<R = cocoa.NSString>(): R;
    hash<R = number>(): R;
    superclass<R = unknown>(): R;
    touchBar<R = cocoa.NSTouchBar>(): R;
    // + NSWindow(Chocolat):
    commitEditedTextRetainingFirstResponder<R = void>(): R;
    closePopovers<R = boolean>(): R;
    convertPointFromScreen_ch<R = cocoa.CGPoint, P0 = cocoa.CGPoint>(_convertPointFromScreen_ch: P0): R;
  }
  namespace classes {
    export interface NSWindow<T = any> extends cocoa.classes.NSResponder, cocoa.classes.NSTouchBarProviderContainerProtocol, cocoa.classes.NSAppearanceCustomizationInternalProtocol, cocoa.classes.NSAnimatablePropertyContainerProtocol, cocoa.classes.NSMenuItemValidationProtocol, cocoa.classes.NSUserInterfaceValidationsProtocol, cocoa.classes.NSUserInterfaceItemIdentificationProtocol, cocoa.classes.NSAppearanceCustomizationProtocol, cocoa.classes.NSAccessibilityElementProtocol, cocoa.classes.NSAccessibilityProtocol {
      alloc<R = NSWindow>(): R;
      new: <R = NSWindow>() => R;
      _hiddenInWindowList<R = boolean>(): R;
      windowWithContentViewController<R = unknown, P0 = unknown>(_windowWithContentViewController: P0): R;
      keyPathsForValuesAffectingEffectiveAppearance<R = unknown>(): R;
      keyPathsForValuesAffectingAppearance<R = unknown>(): R;
      automaticallyNotifiesObserversOfAppearance<R = boolean>(): R;
      defaultAnimationForKeyPath<R = unknown, P0 = unknown>(_defaultAnimationForKeyPath: P0): R;
      _modalSessionForShownService<R = cocoa._NSModalSession, P0 = unknown>(__modalSessionForShownService: P0): R;
      removeFrameUsingName<R = void, P0 = unknown>(_removeFrameUsingName: P0): R;
      _savedFrameFromString<R = cocoa.CGRect, P0 = unknown>(__savedFrameFromString: P0): R;
      _allowedRunLoopModesForToolTips<R = unknown>(): R;
      _currentWorkspaceIsUserSpace<R = boolean>(): R;
      windowNumbersWithOptions<R = unknown, P0 = number>(_windowNumbersWithOptions: P0): R;
      _windowNumbersWithOptions_onSpace<R = unknown, P0 = number, P1 = number>(__windowNumbersWithOptions: P0, _onSpace: P1): R;
      windowNumberAtPoint_belowWindowWithWindowNumber<R = number, P0 = cocoa.CGPoint, P1 = number>(_windowNumberAtPoint: P0, _belowWindowWithWindowNumber: P1): R;
      _minimizeAll<R = void>(): R;
      _batchMinimizeWindowsWithBlock<R = boolean, P0 = cocoa.CDUnknownBlockType>(__batchMinimizeWindowsWithBlock: P0): R;
      _baseModalWindowLevel<R = number>(): R;
      _setBaseWindowModalLevel<R = void, P0 = number>(__setBaseWindowModalLevel: P0): R;
      _batchOrderWindows_withBlock<R = boolean, P0 = number, P1 = cocoa.CDUnknownBlockType>(__batchOrderWindows: P0, _withBlock: P1): R;
      _calcKeyAndMain<R = void>(): R;
      defaultDepthLimit<R = number>(): R;
      standardContentBorderThicknessForEdge_borderSize_styleMask<R = number, P0 = number, P1 = number, P2 = number>(_standardContentBorderThicknessForEdge: P0, _borderSize: P1, _styleMask: P2): R;
      _shouldMiniaturizeOnDoubleClick<R = boolean>(): R;
      _shouldZoomOnDoubleClick<R = boolean>(): R;
      _tracksDirtyRegions<R = boolean>(): R;
      _enableKeyStateChangeNotifications<R = void>(): R;
      _disableKeyStateChangeNotifications<R = void>(): R;
      automaticallyNotifiesObserversForKey<R = boolean, P0 = unknown>(_automaticallyNotifiesObserversForKey: P0): R;
      automaticallyNotifiesObserversOf_borderView<R = boolean>(): R;
      keyPathsForValuesAffectingContentLayoutRect<R = unknown>(): R;
      standardWindowButton_forStyleMask<R = unknown, P0 = number, P1 = number>(_standardWindowButton: P0, _forStyleMask: P1): R;
      minFrameWidthWithTitle_styleMask<R = number, P0 = unknown, P1 = number>(_minFrameWidthWithTitle: P0, _styleMask: P1): R;
      minContentSizeForMinFrameSize_styleMask<R = cocoa.CGSize, P0 = cocoa.CGSize, P1 = number>(_minContentSizeForMinFrameSize: P0, _styleMask: P1): R;
      frameViewClassForStyleMask<R = unknown, P0 = number>(_frameViewClassForStyleMask: P0): R;
      _isStyleMaskEffectivelyTitled<R = boolean, P0 = number>(__isStyleMaskEffectivelyTitled: P0): R;
      _allowsNontitledResizableWindows<R = boolean>(): R;
      _validateStyleMask<R = number, P0 = number>(__validateStyleMask: P0): R;
      _automateActivateDeactivate<R = void>(): R;
      _tabbedWindowsFinishedRestoration<R = void>(): R;
      _addWindowTabsMenuItemsIfNeeded<R = void>(): R;
      shouldPreferWindowTabbingForEvent_withIdentifier<R = boolean, P0 = unknown, P1 = unknown>(_shouldPreferWindowTabbingForEvent: P0, _withIdentifier: P1): R;
      shouldPreferWindowTabbingForEvent<R = boolean, P0 = unknown>(_shouldPreferWindowTabbingForEvent: P0): R;
      _setTabPlusButtonWasClicked<R = void, P0 = boolean>(__setTabPlusButtonWasClicked: P0): R;
      _shouldInvertImplicitBehavior<R = boolean>(): R;
      _setShouldInvertImplicitBehaviorToYesForCurrentRunLoop<R = void>(): R;
      _setShouldInvertImplicitBehavior<R = void, P0 = boolean>(__setShouldInvertImplicitBehavior: P0): R;
      setAllowsAutomaticWindowTabbing<R = void, P0 = boolean>(_setAllowsAutomaticWindowTabbing: P0): R;
      allowsAutomaticWindowTabbing<R = boolean>(): R;
      _updateTabbingModePreference<R = void>(): R;
      setUserTabbingPreference<R = void, P0 = number>(_setUserTabbingPreference: P0): R;
      userTabbingPreference<R = number>(): R;
      _readWindowTabbingModeFromPrefs<R = number>(): R;
      _sendDockMenuCommand_withTag_modifierFlags<R = boolean, P0 = number, P1 = number, P2 = number>(__sendDockMenuCommand: P0, _withTag: P1, _modifierFlags: P2): R;
      coreUIRenderer<R = cocoa.OpaqueCUIRendererRef>(): R;
      _windowWithPersistentUIWindowID<R = unknown, P0 = number>(__windowWithPersistentUIWindowID: P0): R;
      _tileDividerInteriorResizeEdgeThickness<R = number>(): R;
      _getExteriorResizeEdgeThicknesses_forStyleMask<R = void, P0 = number, P1 = number>(__getExteriorResizeEdgeThicknesses: P0, _forStyleMask: P1): R;
      _getResizeEdgeAndCornerThicknesses_forStyleMask<R = void, P0 = number, P1 = number>(__getResizeEdgeAndCornerThicknesses: P0, _forStyleMask: P1): R;
      canBeResizedFromInterior<R = boolean>(): R;
      _mouseHysteresisCheck_withExpiration_andDistance_finalMouseLocation<R = number, P0 = unknown, P1 = unknown, P2 = cocoa.CGSize, P3 = cocoa.CGPoint>(__mouseHysteresisCheck: P0, _withExpiration: P1, _andDistance: P2, _finalMouseLocation: P3): R;
      _useReducedMotionFullScreenTransition<R = boolean>(): R;
      _hidesChromeWhenFullScreen<R = boolean>(): R;
      // + NSWindow(Chocolat):
      
    }
  }
}

declare const NSWindow: cocoa.classes.NSWindow;
