/// <reference no-default-lib="true" />

declare namespace cocoa {
  export interface MSTheme<T = any> extends NSObject {
    cxx_destruct<R = void>(): R;
    changeApplicationAppearanceInBlock<R = void, P0 = CDUnknownBlockType>(_changeApplicationAppearanceInBlock: P0): R;
    resolvedNamesForBaseName_options<R = unknown, P0 = unknown, P1 = number>(_resolvedNamesForBaseName: P0, _options: P1): R;
    cachedImageForKey_owner_createBlock<R = unknown, P0 = unknown, P1 = unknown, P2 = CDUnknownBlockType>(_cachedImageForKey: P0, _owner: P1, _createBlock: P2): R;
    cachedImageForKey_owner<R = unknown, P0 = unknown, P1 = unknown>(_cachedImageForKey: P0, _owner: P1): R;
    cacheImage_forKey_owner<R = void, P0 = unknown, P1 = unknown, P2 = unknown>(_cacheImage: P0, _forKey: P1, _owner: P2): R;
    imageNamed_options<R = unknown, P0 = unknown, P1 = number>(_imageNamed: P0, _options: P1): R;
    imageNamed<R = unknown, P0 = unknown>(_imageNamed: P0): R;
    systemColorNamed<R = unknown, P0 = unknown>(_systemColorNamed: P0): R;
    _colorForStringValue_cachingKey<R = unknown, P0 = unknown, P1 = unknown>(__colorForStringValue: P0, _cachingKey: P1): R;
    colorForResolvedName<R = unknown, P0 = unknown>(_colorForResolvedName: P0): R;
    colorNamed_options<R = unknown, P0 = unknown, P1 = number>(_colorNamed: P0, _options: P1): R;
    colorNamed<R = unknown, P0 = unknown>(_colorNamed: P0): R;
    setDarkModeScheme<R = void, P0 = number>(_setDarkModeScheme: P0): R;
    darkModeScheme<R = number>(): R;
    layerListTextColorForBackgroundStyle_nodeIsHidden_editing_selected_active<R = unknown, P0 = number, P1 = boolean, P2 = boolean, P3 = boolean, P4 = boolean>(_layerListTextColorForBackgroundStyle: P0, _nodeIsHidden: P1, _editing: P2, _selected: P3, _active: P4): R;
    layerListSymbolOverrideSelectionColorForWindow_isActiveOutlineView<R = unknown, P0 = unknown, P1 = boolean>(_layerListSymbolOverrideSelectionColorForWindow: P0, _isActiveOutlineView: P1): R;
    layerListSelectionColorForWindow_isActiveOutlineView<R = unknown, P0 = unknown, P1 = boolean>(_layerListSelectionColorForWindow: P0, _isActiveOutlineView: P1): R;
    _colorNamed_forWindow_isActiveView<R = unknown, P0 = unknown, P1 = unknown, P2 = boolean>(__colorNamed: P0, _forWindow: P1, _isActiveView: P2): R;
    validateColorPlist<R = void>(): R;
    validate<R = void>(): R;
    attributedStringWithString_color_controlSize<R = unknown, P0 = unknown, P1 = unknown, P2 = number>(_attributedStringWithString: P0, _color: P1, _controlSize: P2): R;
    tintedImages<R = MSTintedImages>(): R;
    setTintedImages<R = void, P0 = MSTintedImages>(_v: P0): R;
    colorPlist<R = NSDictionary>(): R;
    cache<R = BCCache>(): R;
    isDark<R = boolean>(): R;
    layerListTabButtonColor<R = NSColor>(): R;
    layerListSymbolOverrideIconTintColor<R = NSColor>(): R;
    layerListSplitViewDividerColor<R = NSColor>(): R;
    layerListIconSharedTintColor<R = NSColor>(): R;
    layerListIconSelectedInactiveTintColor<R = NSColor>(): R;
    layerListIconSelectedActiveTintColor<R = NSColor>(): R;
    layerListIconPressedTintColorSelected<R = NSColor>(): R;
    layerListIconPressedTintColor<R = NSColor>(): R;
    layerListIconTintColor<R = NSColor>(): R;
    layerListFilterTokenSelectedTitleColor<R = NSColor>(): R;
    layerListFilterTokenTitleColor<R = NSColor>(): R;
    layerListFilterTokenSelectedBackgroundColor<R = NSColor>(): R;
    layerListFilterTokenBackgroundColor<R = NSColor>(): R;
    layerListFilterBarBorderColor<R = NSColor>(): R;
    layerListFilterBarBackgroundColor<R = NSColor>(): R;
    layerListLightBackgroundColor<R = NSColor>(): R;
    layerListBackgroundColor<R = NSColor>(): R;
    layerListSelectedArtboardBorderColor<R = NSColor>(): R;
    layerListArtboardBorderColor<R = NSColor>(): R;
    windowBadgeUnfocusedPillColor<R = NSColor>(): R;
    windowBadgeTextColor<R = NSColor>(): R;
    windowBadgeMultipleNotificationsColor<R = NSColor>(): R;
    windowBadgeTrialMessageColor<R = NSColor>(): R;
    cloudPopoverCancelButtonTintColorPressed<R = NSColor>(): R;
    cloudPopoverCancelButtonTintColor<R = NSColor>(): R;
    cloudPopoverButtonTintColorPressed<R = NSColor>(): R;
    cloudPopoverButtonTintColor<R = NSColor>(): R;
    windowBadgePluginUpdatesAvailableColor<R = NSColor>(): R;
    windowBadgeLibraryChangesAvailableColor<R = NSColor>(): R;
    windowBadgeFontsMissingColor<R = NSColor>(): R;
    preferencesWindowErrorTextColor<R = NSColor>(): R;
    licenseWindowErrorTextColor<R = NSColor>(): R;
    colorPickerSeparatorColor<R = NSColor>(): R;
    colorPickerMarkerShadowColor<R = NSColor>(): R;
    colorPickerMarkerFillColor<R = NSColor>(): R;
    colorPickerLightShadowColor<R = NSColor>(): R;
    colorPickerDarkShadowColor<R = NSColor>(): R;
    colorPickerCheckerboardBorderColor<R = NSColor>(): R;
    colorPickerCheckerboardBackgroundColor<R = NSColor>(): R;
    colorPickerAssetBorderColor<R = NSColor>(): R;
    canvasSymbolTitleColor<R = NSColor>(): R;
    canvasSymbolErrorTextColor<R = NSColor>(): R;
    canvasSymbolErrorBorderColor<R = NSColor>(): R;
    canvasSymbolErrorBackgroundColor<R = NSColor>(): R;
    canvasSliceOutlineColor<R = NSColor>(): R;
    canvasRulerTextBackgroundColor<R = NSColor>(): R;
    canvasRulerTextColor<R = NSColor>(): R;
    canvasRulerOccupiedColor<R = NSColor>(): R;
    canvasRulerLockColor<R = NSColor>(): R;
    canvasRulerLineOccupiedColor<R = NSColor>(): R;
    canvasRulerLineColor<R = NSColor>(): R;
    canvasRulerBackgroundColor<R = NSColor>(): R;
    canvasPixelLineColor<R = NSColor>(): R;
    canvasPageBackgroundColor<R = NSColor>(): R;
    canvasMeasurementLabelBackgroundColor<R = NSColor>(): R;
    canvasLayerSelectionColor<R = NSColor>(): R;
    canvasLayerHighlightColor<R = NSColor>(): R;
    canvasFlowArrowColor<R = NSColor>(): R;
    canvasBackgroundColor<R = NSColor>(): R;
    canvasArtboardTitleColor<R = NSColor>(): R;
    hoverButtonNormalColor<R = NSColor>(): R;
    hoverButtonHoverColor<R = NSColor>(): R;
    splitViewDividerColor<R = NSColor>(): R;
    inspectorSecondaryLabelTextColorHighlighted<R = NSColor>(): R;
    inspectorSecondaryLabelTextColor<R = NSColor>(): R;
    inspectorArtboardPresetTableViewBackgroundColor<R = NSColor>(): R;
    inspectorArtboardPresetHeaderColor<R = NSColor>(): R;
    inspectorStylePreviewButtonOverlayHighlightingColor<R = NSColor>(): R;
    inspectorSliderRightTrackColor<R = NSColor>(): R;
    inspectorSliderKnobBorderColor<R = NSColor>(): R;
    inspectorSliderKnobColor<R = NSColor>(): R;
    inspectorSeparatorColor<R = NSColor>(): R;
    inspectorSectionSeparatorColor<R = NSColor>(): R;
    inspectorSectionHeaderTextColor<R = NSColor>(): R;
    inspectorSectionBackgroundColor<R = NSColor>(): R;
    inspectorResizePreviewInnerLayerBorderColor<R = NSColor>(): R;
    inspectorResizePreviewInnerLayerBackgroundColor<R = NSColor>(): R;
    inspectorResizePreviewEdgeIndicatorColor<R = NSColor>(): R;
    inspectorResizePreviewBackgroundColor<R = NSColor>(): R;
    inspectorPushButtonBackgroundColor<R = NSColor>(): R;
    inspectorLabelTextColor<R = NSColor>(): R;
    inspectorLabelBorderColor<R = NSColor>(): R;
    inspectorLabelBackgroundColor<R = NSColor>(): R;
    inspectorInlineLabelTextColor<R = NSColor>(): R;
    inspectorIconAccentColor<R = NSColor>(): R;
    inspectorIconColor<R = NSColor>(): R;
    inspectorHighlightedSliderKnobColor<R = NSColor>(): R;
    inspectorHighlightedIconColor<R = NSColor>(): R;
    inspectorHighlightedBorderColor<R = NSColor>(): R;
    inspectorHighlightedAccentColor<R = NSColor>(): R;
    inspectorDisabledIconColor<R = NSColor>(): R;
    inspectorButtonHighlightedBackgroundColor<R = NSColor>(): R;
    inspectorButtonDropShadowColor<R = NSColor>(): R;
    inspectorButtonBackgroundColor<R = NSColor>(): R;
    inspectorBorderColor<R = NSColor>(): R;
    inspectorBackgroundColor<R = NSColor>(): R;
    inspectorAlignmentViewBackgroundColor<R = NSColor>(): R;
    inspectorAlignmentStrutColor<R = NSColor>(): R;
    inspectorAlignmentDisabledStrutColor<R = NSColor>(): R;
    inspectorAccentColor<R = NSColor>(): R;
  }
  namespace classes {
    export interface MSTheme<T = any> extends NSObject {
      alloc<R = MSTheme>(): R;
      new: <R = MSTheme>() => R;
      sharedTheme<R = unknown>(): R;
      initialize<R = void>(): R;
    }
  }
}

declare const MSTheme: cocoa.classes.MSTheme;
